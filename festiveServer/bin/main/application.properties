spring.application.name=festiveServer

# 프로필 설정
spring.profiles.active=local

# JWT 기본 설정
jwt.expiration=86400

#커넥션의 최대 연결 수 설정
spring.datasource.hikari.maximum-pool-size=20

# HikariCP Connection Pool Properties
#커넥션 연결을 사용할 수 있을 때까지 대기하는 최대 시간(ms)을 지정
spring.datasource.hikari.connection-timeout=30000

#커넥션이 풀에서 유휴 상태로 있을 수 있는 최대 시간(ms)을 지정
# 유휴 : 사용하지 않고 놀고있는 커넥션을 얼마나 오래 살려둘지 설정하는 것
spring.datasource.hikari.idle-timeout=600000

#연결 풀의 이름을 지정
spring.datasource.hikari.pool-name=MyHikariCP

#자동 커밋 끄기
spring.datasource.hikari.auto-commit=false

# JPA/Hibernate 설정
# 테이블 자동 생성 막기
spring.jpa.hibernate.ddl-auto=none
# SQL 쿼리 출력 여부
spring.jpa.show-sql=true
#뷰 렌더링 시점까지 영속성 컨텍스트 닫음
spring.jpa.open-in-view=false

# SQL 쿼리 로깅
# Hibernate가 실행하는 모든 SQL을 로그로 출력
logging.level.org.hibernate.SQL=DEBUG
# SQL 쿼리에 바인딩되는 파라미터 값을 보여줌
# ?로 표시되는 파라미터의 실제 값 확인 가능
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# naver registration
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email,tel,profile

# naver provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# google registration
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=email,profile

# 로깅 레벨 설정
logging.level.com.project.festive=DEBUG

# 브라우저 자동 새로고침 기능
spring.devtools.livereload.enabled=true
# 코드 변경 시 서버 자동 재시작
spring.devtools.restart.enabled=true