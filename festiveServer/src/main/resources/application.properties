spring.application.name=festiveServer

# 프로필 설정 (기본값: local, AWS에서는 prod로 변경)
spring.profiles.active=${SPRING_PROFILES_ACTIVE:local}

# JWT 기본 설정
jwt.expiration=86400

#커넥션의 최대 연결 수 설정
spring.datasource.hikari.maximum-pool-size=20

# HikariCP Connection Pool Properties
#커넥션 연결을 사용할 수 있을 때까지 대기하는 최대 시간(ms)을 지정
spring.datasource.hikari.connection-timeout=30000

#커넥션이 풀에서 유휴 상태로 있을 수 있는 최대 시간(ms)을 지정
# 유휴 : 사용하지 않고 놀고있는 커넥션을 얼마나 오래 살려둘지 설정하는 것
spring.datasource.hikari.idle-timeout=600000

#연결 풀의 이름을 지정
spring.datasource.hikari.pool-name=MyHikariCP

#자동 커밋 끄기
spring.datasource.hikari.auto-commit=false

# JPA/Hibernate 설정
# 테이블 자동 생성 막기
spring.jpa.hibernate.ddl-auto=none
# SQL 쿼리 출력 여부
spring.jpa.show-sql=true
#뷰 렌더링 시점까지 영속성 컨텍스트 닫음
spring.jpa.open-in-view=false

# SQL 쿼리 로깅
# Hibernate가 실행하는 모든 SQL을 로그로 출력
logging.level.org.hibernate.SQL=DEBUG
# SQL 쿼리에 바인딩되는 파라미터 값을 보여줌
# ?로 표시되는 파라미터의 실제 값 확인 가능
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# AI 서비스 로그 레벨 조정 (과도한 로그 방지)
logging.level.com.project.festive.festiveserver.ai=WARN
logging.level.com.project.festive.festiveserver.ai.service.AITravelServiceImpl=WARN
logging.level.com.project.festive.festiveserver.ai.service.TourAPIServiceImpl=WARN
logging.level.com.project.festive.festiveserver.ai.service.TravelAnalysisServiceImpl=WARN

# naver registration
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri=https://api.festivekorea.site/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email,tel,profile

# naver provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# google registration
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=https://api.festivekorea.site/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=email,profile

# kakao registration
spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_APP_KEY}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.redirect-uri=https://api.festivekorea.site/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname, profile_image, account_email

# kakao provider
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# 로깅 레벨 설정
logging.level.com.project.festive=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security=DEBUG

# MyBatis SQL 로깅
logging.level.com.project.festive.festiveserver.travel.mapper=DEBUG

# Gmail SMTP 설정
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${GMAIL_USERNAME}
spring.mail.password=${GMAIL_APP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# 브라우저 자동 새로고침 기능
spring.devtools.livereload.enabled=true
# 코드 변경 시 서버 자동 재시작
spring.devtools.restart.enabled=true

# 최대 업로드 파일 크기 (10MB)
spring.servlet.multipart.max-file-size=10MB
# 최대 요청 크기 (10MB)
spring.servlet.multipart.max-request-size=10MB
# 프로필 이미지 파일 저장 경로 (실제 EC2 경로)
file.upload-dir=/home/ec2-user/upload/profile/

# OpenAI API 설정
openai.api.key=${OPENAI_API_KEY}

# TourAPI 설정
tour.api.service-key=II%2BkDeW06LSXEWatX8UD2OWIih1Z%2FmpI9fVsVfnUYxszcIZTSXzSGCXtDgTURxuEMD1wOvQ3romID%2B4RvieywQ%3D%3D

spring.web.resources.static-locations=file:///home/ec2-user/upload/profile/
spring.resources.static-locations=file:///home/ec2-user/upload/profile/

# LocalDateTime을 ISO 문자열로 반환
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
# 날짜 시간 포맷 설정
spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss
# LocalDateTime 직렬화 설정
spring.jackson.serialization.write-dates-as-timestamps=false

# CORS 설정 - 허용할 프론트엔드 도메인 (개발환경 + 프로덕션환경)
cors.allowed-origins=http://localhost:5173,http://localhost:3000,https://festivekorea.site,https://www.festivekorea.site,https://festive-git-main-youngmins-projects-ed25c656.vercel.app

# 게시글 이미지 파일 저장 경로 (실제 EC2 경로)
spring.resources.board-image=/home/ec2-user/upload/board/