[{"filePath":"C:\\workspace\\festive\\festive-app\\src\\App.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\AppRoutes.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\api\\axiosAPI.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\components\\Footer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\components\\Header.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\components\\legal\\CompanyInfo.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\components\\legal\\LegalScrollToTop.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\components\\legal\\LegalSideMenu.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\components\\legal\\PrivacyPolicy.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\components\\legal\\TermsOfService.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\hooks\\useAuth.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'isLoggedIn', 'login', 'logout', and 'member'. Either include them or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [isLoggedIn, login, logout, member]","fix":{"range":[982,984],"text":"[isLoggedIn, login, logout, member]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from \"react\";\r\nimport useAuthStore from \"../store/useAuthStore\";\r\nimport axiosApi from \"../api/axiosAPI\";\r\n\r\nconst useAuth = () => {\r\n  const { login, logout, member, isLoggedIn } = useAuthStore();\r\n\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      try {\r\n        // authStore에 로그인 상태가 없을 때만 서버에 요청\r\n        if (!isLoggedIn || !member) {\r\n          const response = await axiosApi.get(\"/auth/userInfo\");\r\n          if (response.status === 200) {\r\n            login(response.data);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // 401 오류는 정상적인 상황 (로그인되지 않은 상태)\r\n        if (error.response?.status === 401) {\r\n          console.log(\"인증되지 않은 상태입니다.\");\r\n          // 서버에서 인증되지 않았다고 응답하면 로컬 상태도 초기화\r\n          logout();\r\n        } else {\r\n          console.error(\"앱 초기화 중 인증 확인 오류:\", error);\r\n          // 네트워크 오류 등으로 인해 서버에 접근할 수 없는 경우에는 \r\n          // 기존 상태를 유지 (로그아웃하지 않음)\r\n        }\r\n      }\r\n    };\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"현재 인증 상태:\", { isLoggedIn, member });\r\n  }, [isLoggedIn, member]);\r\n};\r\n\r\nexport default useAuth;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\hooks\\useDebounce.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\jcomponents\\Find\\Find.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isPwChanging' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"isPwChanging"},"fix":{"range":[1052,1064],"text":""},"desc":"Remove unused variable 'isPwChanging'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCancel' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":286,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":286,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCancel"},"fix":{"range":[7833,8069],"text":""},"desc":"Remove unused variable 'handleCancel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleResultClick' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":298,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":298,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleResultClick"},"fix":{"range":[8077,8144],"text":""},"desc":"Remove unused variable 'handleResultClick'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePasswordChange' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":340,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":340,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePasswordChange"},"fix":{"range":[9141,10382],"text":""},"desc":"Remove unused variable 'handlePasswordChange'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\r\nimport './Find.css';\r\nimport {useSearchParams, useNavigate} from \"react-router-dom\";\r\nimport axiosApi from '../../api/axiosAPI';\r\nimport ResetPw from './ResetPw';\r\nimport SearchIdResult from './SearchIdResult';\r\n\r\nconst Find = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [activeTab, setActiveTab] = useState(searchParams.get(\"tab\") || 'id'); // 'id' or 'pw', 기본값은 'id'\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    username: '', // 아이디 찾기용 이름\r\n    id: '', // 비밀번호 찾기용 아이디\r\n    email: '',\r\n    tel: '',\r\n    authKey: '',\r\n    authMethod: 'email'\r\n  });\r\n  const [isSending, setIsSending] = useState(false); // 발송 중\r\n  const [isVerifying, setIsVerifying] = useState(false); // 인증 확인 중\r\n  const [isAuthKeyVerified, setIsAuthKeyVerified] = useState(false); // 인증 성공 여부\r\n  const [foundId, setFoundId] = useState(''); // 찾은 아이디 상태\r\n  const [newPassword, setNewPassword] = useState(''); // 비밀번호 변경용\r\n  const [isPwChanging, setIsPwChanging] = useState(false); // 비밀번호 변경 중\r\n  const [currentView, setCurrentView] = useState('find'); // 'find' | 'resetPw'\r\n  const navigate = useNavigate();\r\n  const [oldPassword, setOldPassword] = useState(''); // 기존 비밀번호\r\n  \r\n  // useRef로 입력 필드 참조\r\n  const usernameRef = useRef(null);\r\n  const idRef = useRef(null);\r\n  const authKeyRef = useRef(null);\r\n  \r\n  // URL 파라미터 변경 감지하여 activeTab 동기화\r\n  useEffect(() => {\r\n    const tabFromUrl = searchParams.get(\"tab\");\r\n\r\n    if (tabFromUrl && (tabFromUrl === 'id' || tabFromUrl === 'pw')) {\r\n      setActiveTab(tabFromUrl);\r\n\r\n    } else if (!tabFromUrl) {\r\n      // URL에 tab 파라미터가 없으면 기본값으로 설정하고 URL 업데이트\r\n      setSearchParams({ tab: 'id' });\r\n    }\r\n  }, [searchParams, setSearchParams]);\r\n  \r\n  const handleInputChange = (field, value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: field === 'tel' ? value.replace(/[^\\d]/g, '') : value\r\n    }));\r\n    // 이메일이 변경되면 인증번호 입력값과 인증 성공 상태 초기화\r\n    if (field === 'email') {\r\n      setFormData(prev => ({ ...prev, authKey: '' }));\r\n      setIsAuthKeyVerified(false);\r\n    }\r\n  };\r\n  \r\n  const handleTabChange = (tab) => {\r\n    setActiveTab(tab);\r\n    setSearchParams({ tab }); // URL에 tab 파라미터 추가\r\n    setCurrentView('find'); // 뷰를 찾기 화면으로 초기화\r\n    setShowResult(false);\r\n    setIsAuthKeyVerified(false); // 인증 상태 초기화\r\n    setFoundId(''); // 찾은 아이디 초기화\r\n    \r\n    // 탭 변경 시 모든 입력값 초기화\r\n    setFormData({\r\n      username: '', // 아이디 찾기용 이름\r\n      id: '', // 비밀번호 찾기용 아이디\r\n      email: '',\r\n      tel: '',\r\n      authKey: '',\r\n      authMethod: 'email'\r\n    });\r\n    \r\n    // 탭 변경 후 (DOM 업데이트 후) 해당 입력 필드에 포커스\r\n    setTimeout(() => {\r\n      if (tab === 'id' && usernameRef.current) {\r\n        usernameRef.current.focus();\r\n      } else if (tab === 'pw' && idRef.current) {\r\n        idRef.current.focus();\r\n      }\r\n    }, 0);\r\n  };\r\n  \r\n  // 공통 인증 요청 API 호출 메서드\r\n  const callAuthRequestApi = async (endpoint, payload) => {\r\n    try {\r\n      setIsSending(true);\r\n      const response = await axiosApi.post(endpoint, payload);\r\n      const { success, message } = response.data;\r\n      \r\n      if (success) {\r\n        alert(message);\r\n        setIsAuthKeyVerified(false);\r\n        setFormData(prev => ({ ...prev, authKey: '' }));\r\n        \r\n        // 인증번호 발송 성공 후 인증번호 입력 필드에 포커스\r\n        setTimeout(() => {\r\n          if (authKeyRef.current) {\r\n            authKeyRef.current.focus();\r\n          }\r\n        }, 100);\r\n        \r\n        return true;\r\n\r\n      } else {\r\n        alert(message);\r\n        return false;\r\n      }\r\n\r\n    } catch (error) {\r\n      if (error.response && error.response.data && error.response.data.message) {\r\n        alert(error.response.data.message);\r\n\r\n      } else {\r\n        alert('알 수 없는 오류가 발생했습니다.');\r\n      }\r\n      return false;\r\n\r\n    } finally {\r\n      setIsSending(false);\r\n    }\r\n  };\r\n\r\n  // 공통 입력값 유효성 검사 메서드\r\n  const validateAuthRequestInputs = () => {\r\n    if (formData.authMethod === 'email' && !formData.email) {\r\n      alert('이메일을 입력해주세요.');\r\n      return false;\r\n    } else if (formData.authMethod === 'tel') {\r\n      if (!formData.tel) {\r\n        alert('전화번호를 입력해주세요.');\r\n        return false;\r\n      }\r\n      // 국내 휴대폰 번호 패턴(010, 011, 016, 017, 018, 019로 시작, 10~11자리)\r\n      if (!/^01[016789][0-9]{7,8}$/.test(formData.tel)) {\r\n        alert('유효한 휴대폰 번호(010, 011, 016, 017, 018, 019로 시작, 10~11자리 숫자)만 입력 가능합니다.');\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleIdAuthRequest = async () => {\r\n    if (!validateAuthRequestInputs()) {\r\n      return;\r\n    }\r\n\r\n    let payload;\r\n    if (formData.authMethod === 'email') {\r\n      payload = {\r\n        name: formData.username,\r\n        authMethod: formData.authMethod,\r\n        email: formData.email\r\n      };\r\n\r\n    } else if (formData.authMethod === 'tel') {\r\n      payload = {\r\n        name: formData.username,\r\n        authMethod: formData.authMethod,\r\n        tel: formData.tel\r\n      };\r\n    }\r\n\r\n    await callAuthRequestApi('/auth/findId', payload);\r\n  };\r\n\r\n  const handlePwAuthRequest = async () => {\r\n    if (!validateAuthRequestInputs()) {\r\n      return;\r\n    }\r\n\r\n    let payload;\r\n    if (formData.authMethod === 'email') {\r\n      payload = {\r\n        id: formData.id,\r\n        email: formData.email\r\n      };\r\n\r\n    } else if (formData.authMethod === 'tel') {\r\n      // 전화번호 인증은 기존대로 /auth/findId 사용 (추후 별도 구현 가능)\r\n      payload = {\r\n        userId: formData.id,\r\n        authMethod: formData.authMethod,\r\n        tel: formData.tel\r\n      };\r\n    }\r\n\r\n    const endpoint = formData.authMethod === 'email' ? '/auth/findPw' : '/auth/findId';\r\n    await callAuthRequestApi(endpoint, payload);\r\n  };\r\n\r\n  // 공통 API 호출 메서드\r\n  const callFindApi = async (endpoint, payload) => {\r\n    try {\r\n      const response = await axiosApi.post(endpoint, payload);\r\n      if (response.data.success && response.data.userId) {\r\n        setFoundId(response.data.userId);\r\n        return true;\r\n\r\n      } else {\r\n        setFoundId('');\r\n        alert(response.data.message || '일치하는 회원이 없습니다.');\r\n        return false;\r\n      }\r\n\r\n    } catch (error) {\r\n      setFoundId('');\r\n      if (error.response && error.response.data && error.response.data.message) {\r\n        alert(error.response.data.message);\r\n\r\n      } else {\r\n        alert('조회 중 오류가 발생했습니다.');\r\n      }\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 공통 유효성 검사 메서드\r\n  const validateAuthInputs = () => {\r\n    if (formData.authMethod === 'email' && (!formData.email || !formData.authKey)) {\r\n      alert('이메일과 인증번호를 모두 입력해주세요.');\r\n      return false;\r\n\r\n    } else if (formData.authMethod === 'tel' && (!formData.tel || !formData.authKey)) {\r\n      alert('전화번호와 인증번호를 모두 입력해주세요.');\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n  \r\n  const handleIdSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // 아이디 찾기 유효성 검사\r\n    if (!formData.username) {\r\n      alert('이름을 입력해주세요.');\r\n      return;\r\n    }\r\n    \r\n    if (!validateAuthInputs()) {\r\n      return;\r\n    }\r\n    \r\n    // API 호출\r\n    let payload;\r\n    if (formData.authMethod === 'email') {\r\n      payload = {\r\n        name: formData.username,\r\n        email: formData.email\r\n      };\r\n    } else if (formData.authMethod === 'tel') {\r\n      payload = {\r\n        name: formData.username,\r\n        tel: formData.tel\r\n      };\r\n    }\r\n    \r\n    const success = await callFindApi('/auth/findId/result', payload);\r\n    if (success) {\r\n      setShowResult(true);\r\n    }\r\n  };\r\n\r\n  const handlePwSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // 비밀번호 찾기 유효성 검사\r\n    if (!formData.id || !formData.authKey) {\r\n      alert('아이디와 인증번호를 모두 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    if (!validateAuthInputs()) {\r\n      return;\r\n    }\r\n\r\n    // ResetPw 화면으로 전환\r\n    setCurrentView('resetPw');\r\n  };\r\n  \r\n  const handleCancel = () => {\r\n    setFormData({\r\n      username: '', // 아이디 찾기용 이름\r\n      id: '', // 비밀번호 찾기용 아이디\r\n      email: '',\r\n      tel: '',\r\n      authKey: '',\r\n      authMethod: 'email'\r\n    });\r\n    setShowResult(false);\r\n  };\r\n  \r\n  const handleResultClick = () => {\r\n    alert('아이디 찾기 결과 처리');\r\n  };\r\n  \r\n  // 인증번호 확인\r\n  const handleCheckAuthKey = async () => {\r\n    if (!formData.email || !formData.tel && !formData.authKey) {\r\n      alert('이메일 혹은 전화번호, 인증번호를 모두 입력해주세요.');\r\n      return;\r\n    }\r\n    try {\r\n      setIsVerifying(true);\r\n      const response = await axiosApi.post('/auth/checkAuthKey', {\r\n        email: formData.email || null,\r\n        tel: formData.tel || null,\r\n        authKey: formData.authKey\r\n      });\r\n\r\n      if (response.data.success) {\r\n        alert('인증번호가 확인되었습니다.');\r\n        setIsAuthKeyVerified(true);\r\n\r\n      } else {\r\n        alert(response.data.message || '인증번호가 일치하지 않습니다.');\r\n        setIsAuthKeyVerified(false);\r\n      }\r\n\r\n    } catch (error) {\r\n      setIsAuthKeyVerified(false);\r\n\r\n      if (error.response && error.response.data && error.response.data.message) {\r\n        alert(error.response.data.message);\r\n\r\n      } else {\r\n        alert('인증번호 확인 중 오류가 발생했습니다.');\r\n      }\r\n      \r\n    } finally {\r\n      setIsVerifying(false);\r\n    }\r\n  };\r\n  \r\n  const handlePasswordChange = async () => {\r\n    if (!oldPassword || !newPassword) {\r\n      alert('기존 비밀번호, 새 비밀번호를 모두 입력해주세요.');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setIsPwChanging(true);\r\n      // 실제 비밀번호 변경 API 호출 (엔드포인트는 /auth/findPw/reset 등으로 가정)\r\n      const response = await axiosApi.post('/auth/findPw/reset', {\r\n        oldPassword: oldPassword,\r\n        newPassword: newPassword\r\n      });\r\n      if (response.data.success) {\r\n        alert('비밀번호가 성공적으로 변경되었습니다.');\r\n        setShowResult(false);\r\n        setFormData({ \r\n          username: '', // 아이디 찾기용 이름\r\n          id: '', // 비밀번호 찾기용 아이디\r\n          email: '', \r\n          tel: '', \r\n          authKey: '', \r\n          authMethod: 'email' \r\n        });\r\n        setNewPassword('');\r\n        setOldPassword('');\r\n        setIsAuthKeyVerified(false);\r\n        // 로그인 페이지로 이동\r\n        navigate('/signin');\r\n      } else {\r\n        alert(response.data.message || '비밀번호 변경에 실패했습니다.');\r\n      }\r\n    } catch (error) {\r\n      if (error.response && error.response.data && error.response.data.message) {\r\n        alert(error.response.data.message);\r\n      } else {\r\n        alert('비밀번호 변경 중 오류가 발생했습니다.');\r\n      }\r\n    } finally {\r\n      setIsPwChanging(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"find-container\">\r\n      <div className=\"find-wrapper\">\r\n        <div className=\"find-card\">\r\n          {/* 탭 헤더 */}\r\n          <div className=\"tab-header\">\r\n            <button type=\"button\"\r\n                className={`find-tab-button ${activeTab === 'id' ? 'active' : ''}`}\r\n                onClick={() => handleTabChange('id')}\r\n            >\r\n              아이디 찾기\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                className={`find-tab-button ${activeTab === 'pw' ? 'active' : ''}`}\r\n                onClick={() => handleTabChange('pw')}\r\n            >\r\n              비밀번호 찾기\r\n            </button>\r\n          </div>\r\n          \r\n          {/* 뷰에 따른 렌더링 */}\r\n          {currentView === 'find' && (\r\n            <form \r\n              className=\"find-form\" \r\n            >\r\n              {/* id/pw에 따라 입력 필드 변경 */}\r\n              <div className=\"find-input-group\">\r\n                <label htmlFor={activeTab === 'id' ? 'username' : 'id'} className=\"find-input-label\">\r\n                  {activeTab === 'id' ? 'UserName' : 'ID'}\r\n                </label>\r\n                {activeTab === 'id' ? (\r\n                  <input\r\n                      ref={usernameRef}\r\n                      id=\"username\"\r\n                      name=\"username\"\r\n                      type=\"text\"\r\n                      required\r\n                      value={formData.username}\r\n                      onChange={(e) => handleInputChange('username', e.target.value)}\r\n                      placeholder=\"이름\"\r\n                      className=\"find-input-field\"\r\n                  />\r\n                ) : (\r\n                  <input\r\n                      ref={idRef}\r\n                      id=\"id\"\r\n                      name=\"id\"\r\n                      type=\"text\"\r\n                      required\r\n                      value={formData.id}\r\n                      onChange={(e) => handleInputChange('id', e.target.value)}\r\n                      placeholder=\"아이디\"\r\n                      className=\"find-input-field\"\r\n                  />\r\n                )}\r\n              </div>\r\n              {/* 인증 방식 선택 및 입력 필드 (id/pw 동일 구조) */}\r\n              <div className=\"find-input-group\">\r\n                <label className=\"find-input-label\">인증 방식 선택</label>\r\n                <div className=\"auth-method-selector\">\r\n                  <label className=\"auth-method-option\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"authMethod\"\r\n                      value=\"email\"\r\n                      checked={formData.authMethod === 'email'}\r\n                      onChange={(e) => handleInputChange('authMethod', e.target.value)}\r\n                    />\r\n                    <span className=\"auth-method-label\">이메일 인증</span>\r\n                  </label>\r\n                  <label className=\"auth-method-option\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"authMethod\"\r\n                      value=\"tel\"\r\n                      checked={formData.authMethod === 'tel'}\r\n                      onChange={(e) => handleInputChange('authMethod', e.target.value)}\r\n                    />\r\n                    <span className=\"auth-method-label\">전화번호 인증</span>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              {/* 이메일/전화번호 입력 필드 */}\r\n              {formData.authMethod === 'email' ? (\r\n                <div className=\"find-input-group\">\r\n                  <label htmlFor=\"email\" className=\"find-input-label\">\r\n                    Email address\r\n                  </label>\r\n                  <div className=\"auth-input-group\">\r\n                    <div className=\"auth-input-wrapper\">\r\n                      <input\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          type=\"email\"\r\n                          required\r\n                          value={formData.email}\r\n                          onChange={(e) => handleInputChange('email', e.target.value)}\r\n                          onKeyDown={(e) => {\r\n                            if (e.key === 'Enter' && !isSending && !isAuthKeyVerified) {\r\n                              e.preventDefault();\r\n                              activeTab === 'id' ? handleIdAuthRequest() : handlePwAuthRequest();\r\n                            }\r\n                          }}\r\n                          placeholder=\"이메일\"\r\n                          className=\"find-input-field\"\r\n                      />\r\n                    </div>\r\n                    <button\r\n                        type=\"button\"\r\n                        onClick={() => activeTab === 'id' ? handleIdAuthRequest() : handlePwAuthRequest()}\r\n                        className=\"auth-button\"\r\n                        disabled={isSending}\r\n                    >\r\n                      {isSending ? '발송 중...' : '발송'}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"find-input-group\">\r\n                  <label htmlFor=\"tel\" className=\"find-input-label\">\r\n                    Phone\r\n                  </label>\r\n                  <div className=\"auth-input-group\">\r\n                    <div className=\"auth-input-wrapper\">\r\n                      <input\r\n                          id=\"tel\"\r\n                          name=\"tel\"\r\n                          type=\"tel\"\r\n                          required\r\n                          value={formData.tel}\r\n                          onChange={(e) => handleInputChange('tel', e.target.value)}\r\n                          maxLength={11}\r\n                          placeholder=\"숫자만 입력(예: 01012345678)\"\r\n                          className=\"find-input-field\"\r\n                      />\r\n                    </div>\r\n                    <button\r\n                        type=\"button\"\r\n                        onClick={() => activeTab === 'id' ? handleIdAuthRequest() : handlePwAuthRequest()}\r\n                        className=\"auth-button\"\r\n                        disabled={isSending}\r\n                    >\r\n                      {isSending ? '인증 중...' : '인증'}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {/* 인증번호 입력 필드 */}\r\n              <div className=\"find-input-group\">\r\n                <label htmlFor=\"authKey\" className=\"find-input-label\">\r\n                  Auth key\r\n                </label>\r\n                <div className=\"auth-input-group\">\r\n                  <div className=\"auth-input-wrapper\">\r\n                    <input\r\n                        ref={authKeyRef}\r\n                        id=\"authKey\"\r\n                        name=\"authKey\"\r\n                        type=\"text\"\r\n                        required\r\n                        value={formData.authKey}\r\n                        onChange={(e) => handleInputChange('authKey', e.target.value)}\r\n                        onKeyDown={(e) => {\r\n                          if (e.key === 'Enter' && !isVerifying && !isAuthKeyVerified && formData.authKey.trim()) {\r\n                            e.preventDefault();\r\n                            handleCheckAuthKey();\r\n                          }\r\n                        }}\r\n                        placeholder=\"인증번호\"\r\n                        className=\"find-input-field\"\r\n                        disabled={isAuthKeyVerified}\r\n                    />\r\n                  </div>\r\n                  <button\r\n                      type=\"button\"\r\n                      className=\"auth-button\"\r\n                      onClick={handleCheckAuthKey}\r\n                      disabled={isVerifying || isAuthKeyVerified}\r\n                  >\r\n                    {isVerifying ? '확인 중...' : '인증 확인'}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              {/* 버튼 그룹 (id, pw 탭 모두) */}\r\n              {(activeTab === 'id' || activeTab === 'pw') && (\r\n                <div className=\"find-button-group\">\r\n                  <button\r\n                      type=\"button\"\r\n                      className={`find-btn find-btn-submit${(!isAuthKeyVerified && (activeTab === 'id' || activeTab === 'pw')) ? ' disabled' : ''}`}\r\n                      disabled={(activeTab === 'id' || activeTab === 'pw') && !isAuthKeyVerified}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        activeTab === 'id' ? handleIdSubmit(e) : handlePwSubmit(e);\r\n                      }}\r\n                  >\r\n                    {activeTab === 'id' ? '아이디 조회하기' : '비밀번호 변경하기'}\r\n                  </button>\r\n                </div>\r\n              )}\r\n              {/* 인증 미완료 안내 */}\r\n              {((activeTab === 'id' && !isAuthKeyVerified) || (activeTab === 'pw' && !isAuthKeyVerified)) && (\r\n                <div className=\"additional-text\" style={{ color: '#ef4444', marginTop: '0.5rem' }}>\r\n                  인증 확인이 완료되어야 {activeTab === 'id' ? '아이디 조회가' : '비밀번호 변경이'} 가능합니다.\r\n                </div>\r\n              )}\r\n            </form>\r\n          )}\r\n          \r\n          {/* ResetPw 컴포넌트 */}\r\n          {currentView === 'resetPw' && (\r\n            <ResetPw\r\n              userId={formData.id}\r\n              authMethod={formData.authMethod}\r\n              email={formData.email}\r\n              tel={formData.tel}\r\n              navigate={navigate}\r\n            />\r\n          )}\r\n          \r\n          {/* 결과 섹션 - 모달 형태로 표시 */}\r\n          <SearchIdResult\r\n            foundId={foundId}\r\n            show={showResult && activeTab === 'id'}\r\n            onClose={() => setShowResult(false)}\r\n            onLogin={() => {\r\n              setShowResult(false);\r\n              navigate('/signin');\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Find;","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\jcomponents\\Find\\ResetPw.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\jcomponents\\Find\\SearchIdResult.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\jcomponents\\LocalFestive\\LocalFestive.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInitialFestivals'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchInitialFestivals]","fix":{"range":[2761,2763],"text":"[fetchInitialFestivals]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"./LocalFestive.css\";\r\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport ScrollToTop from \"../../scomponents/monthFestive/ScrollToTop.jsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axiosApi from \"../../api/axiosAPI\";\r\n\r\nconst LocalFestive = () => {\r\n  // 축제 목록 상태\r\n  const [festivals, setFestivals] = useState([]);\r\n  const [sortType, setSortType] = useState(\"date\"); // '축제일순', '거리순'\r\n  const [searchStartDate, setSearchStartDate] = useState(new Date().toISOString().slice(0, 10));\r\n  const [searchEndDate, setSearchEndDate] = useState('');\r\n  const [searchLocation, setSearchLocation] = useState('');\r\n  const [userLocation, setUserLocation] = useState(null); // 사용자 위치\r\n  const [areaOptions, setAreaOptions] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  // 무한 스크롤을 위한 상태\r\n  const [page, setPage] = useState(1); // 현재 페이지\r\n  const [hasMore, setHasMore] = useState(true); // 더 많은 데이터 존재 여부\r\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태\r\n  const [displayedFestivals, setDisplayedFestivals] = useState([]); // 화면에 표시할 축제\r\n  const [pageSize] = useState(25); // 한 번에 로드할 개수\r\n\r\n  // Intersection Observer 관련 ref\r\n  const observerRef = useRef();\r\n  const loadingRef = useRef();\r\n\r\n  // 사용자 위치 가져오기\r\n  const getUserLocation = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(\r\n          new Error(\"이 브라우저에서는 위치 기반 서비스를 지원하지 않습니다.\")\r\n        );\r\n        return;\r\n      }\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setUserLocation({ lat: latitude, lng: longitude });\r\n          resolve({ lat: latitude, lng: longitude });\r\n        },\r\n        (error) => {\r\n          console.error(\"위치 가져오기 실패:\", error);\r\n          reject(error);\r\n        },\r\n        {\r\n          enableHighAccuracy: true,\r\n          timeout: 10000,\r\n          maximumAge: 300000, // 5분\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  // 위치 권한 요청 및 확인\r\n  const requestLocationPermission = async () => {\r\n    try {\r\n      const location = await getUserLocation();\r\n      return location;\r\n    } catch (error) {\r\n      console.error(\"위치 권한 요청 실패:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // DB 조회해서 처음 마운트시 지역 옵션 생성\r\n  useEffect(() => {\r\n    const fetchAreas = async () => {\r\n      try {\r\n        const response = await axiosApi.get(`${import.meta.env.VITE_API_URL}/area/areas`);\r\n        setAreaOptions(response.data);\r\n\r\n      } catch (error) {\r\n        console.error(\"지역 옵션 생성 중 오류 발생:\", error.response?.data || error.message);\r\n      }\r\n    };\r\n\r\n    fetchAreas();\r\n  }, []);\r\n  \r\n  // 초기 축제 데이터 로드\r\n  useEffect(() => {\r\n    fetchInitialFestivals();\r\n  }, []);\r\n\r\n  // 축제 데이터 가져오기 함수\r\n  const fetchFestivalData = async () => {\r\n    const today = new Date();\r\n    const yyyyMMdd = today.toISOString().slice(0, 10).replace(/-/g, \"\");\r\n    const serviceKey = import.meta.env.VITE_TOURAPI_KEY;\r\n\r\n    const params = new URLSearchParams({\r\n      MobileOS: \"WEB\",\r\n      MobileApp: \"Festive\",\r\n      _type: \"json\",\r\n      eventStartDate: yyyyMMdd,\r\n      arrange: \"A\",\r\n      numOfRows: \"100\",\r\n      pageNo: \"1\"\r\n    });\r\n\r\n    const url = `https://apis.data.go.kr/B551011/KorService2/searchFestival2?serviceKey=${serviceKey}&${params.toString()}`;\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const items = data?.response?.body?.items?.item;\r\n\r\n    if (!items || !Array.isArray(items)) return [];\r\n\r\n    // 축제일순 정렬\r\n    items.sort((a, b) => a.eventstartdate.localeCompare(b.eventstartdate));\r\n\r\n    return items.map((item) => {\r\n      const start = item.eventstartdate;\r\n      const end = item.eventenddate;\r\n\r\n      return {\r\n        id: item.contentid,\r\n        title: item.title,\r\n        location: item.addr1 || \"장소 미정\",\r\n        date: `${start?.replace(/(\\d{4})(\\d{2})(\\d{2})/, \"$1.$2.$3\")} - ${end?.replace(/(\\d{4})(\\d{2})(\\d{2})/, \"$1.$2.$3\")}`,\r\n        image: item.firstimage || \"/logo.png\",\r\n        startDate: start,\r\n        status: getFestivalStatus(start, end),\r\n        mapx: item.mapx,\r\n        mapy: item.mapy,\r\n      };\r\n    });\r\n  };\r\n\r\n  // 초기 데이터 로드\r\n  const fetchInitialFestivals = async () => {\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const data = await fetchFestivalData();\r\n      setFestivals(data);\r\n      setDisplayedFestivals(data);\r\n      setHasMore(data.length > pageSize);\r\n      setPage(1);\r\n\r\n    } catch (error) {\r\n      console.error(\"초기 축제 로드 실패:\", error);\r\n\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 검색 함수\r\n  const searchFestivals = async () => {\r\n    setIsLoading(true);\r\n    setPage(1);\r\n    setHasMore(true);\r\n\r\n    try {\r\n      const formatDate = (dateStr) => dateStr ? dateStr.replaceAll(\"-\", \"\") : \"\";\r\n      const serviceKey = import.meta.env.VITE_TOURAPI_KEY;\r\n      const params = new URLSearchParams({\r\n        MobileOS: \"WEB\",\r\n        MobileApp: \"Festive\",\r\n        _type: \"json\",\r\n        eventStartDate: formatDate(searchStartDate),\r\n        eventEndDate: formatDate(searchEndDate),\r\n        arrange: \"A\",\r\n        numOfRows: \"100\",\r\n        pageNo: \"1\",\r\n      });\r\n\r\n      if (searchLocation) {\r\n        params.append(\"areaCode\", searchLocation);\r\n      }\r\n\r\n      const url = `https://apis.data.go.kr/B551011/KorService2/searchFestival2?serviceKey=${serviceKey}&${params.toString()}`;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      const items = data?.response?.body?.items?.item;\r\n\r\n      if (!items || !Array.isArray(items)) {\r\n        setFestivals([]);\r\n        setDisplayedFestivals([]);\r\n        setHasMore(false);\r\n        return;\r\n      }\r\n\r\n      // 종료된 축제 제외\r\n      const filtered = items.filter((item) => {\r\n        return getFestivalStatus(item.eventstartdate, item.eventenddate) !== \"종료\";\r\n      });\r\n\r\n      // 매핑\r\n      let mapped = filtered.map((item) => {\r\n        const start = item.eventstartdate;\r\n        const end = item.eventenddate;\r\n\r\n        return {\r\n          id: item.contentid,\r\n          title: item.title,\r\n          location: item.addr1 || \"장소 미정\",\r\n          date: `${start?.replace(/(\\d{4})(\\d{2})(\\d{2})/, \"$1.$2.$3\")} - ${end?.replace(/(\\d{4})(\\d{2})(\\d{2})/, \"$1.$2.$3\")}`,\r\n          image: item.firstimage || \"/logo.png\",\r\n          startDate: start,\r\n          status: getFestivalStatus(start, end),\r\n          mapx: item.mapx,\r\n          mapy: item.mapy,\r\n        };\r\n      });\r\n\r\n      // 정렬\r\n      if (sortType === \"distance\") {\r\n        try {\r\n          const festivalsWithDistance = await addDistanceToFestivals(mapped);\r\n          mapped = festivalsWithDistance.sort((a, b) => {\r\n            if (a.distance === null && b.distance === null) return 0;\r\n            if (a.distance === null) return 1;\r\n            if (b.distance === null) return -1;\r\n\r\n            return a.distance - b.distance;\r\n          });\r\n\r\n        } catch (error) {\r\n          console.error(\"거리순 정렬 실패, 축제일순으로 대체:\", error);\r\n          mapped = mapped.sort((a, b) => a.startDate.localeCompare(b.startDate));\r\n        }\r\n\r\n      } else {\r\n        mapped = mapped.sort((a, b) => a.startDate.localeCompare(b.startDate));\r\n      }\r\n      setFestivals(mapped);\r\n      setDisplayedFestivals(mapped.slice(0, pageSize));\r\n      setHasMore(mapped.length > pageSize);\r\n\r\n    } catch (error) {\r\n      console.error(\"축제 검색 실패:\", error);\r\n\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 축제 목록에 거리 정보 추가하는 함수\r\n  const addDistanceToFestivals = async (festivals) => {\r\n    try {\r\n      // 사용자 위치 가져오기\r\n      let currentLocation = userLocation;\r\n      if (!currentLocation) {\r\n        currentLocation = await requestLocationPermission();\r\n\r\n        if (!currentLocation) {\r\n          throw new Error(\"위치 정보를 가져올 수 없습니다.\");\r\n        }\r\n      }\r\n\r\n      // 두 지점 간의 거리 계산 (Haversine 공식)\r\n      const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n        const R = 6371; // 지구의 반지름 (km)\r\n        const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n        const dLon = ((lon2 - lon1) * Math.PI) / 180;\r\n        const a =\r\n          Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n          Math.cos((lat1 * Math.PI) / 180) *\r\n            Math.cos((lat2 * Math.PI) / 180) *\r\n            Math.sin(dLon / 2) *\r\n            Math.sin(dLon / 2);\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        const distance = R * c; // km 단위\r\n        return distance;\r\n      };\r\n\r\n      // 축제 목록에 거리 정보 추가\r\n      return festivals.map((festival) => {\r\n        if (festival.mapx && festival.mapy && currentLocation) {\r\n          const distance = calculateDistance(\r\n            currentLocation.lat,\r\n            currentLocation.lng,\r\n            parseFloat(festival.mapy), // 위도\r\n            parseFloat(festival.mapx) // 경도\r\n          );\r\n\r\n          return {\r\n            ...festival,\r\n            distance: Math.round(distance * 10) / 10, // 소수점 첫째 자리까지 반올림\r\n          };\r\n        }\r\n\r\n        return { ...festival, distance: null }; // 좌표가 없으면 null로 설정\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error(\"거리 정보 추가 실패:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 검색 핸들러\r\n  const handleSearch = () => {\r\n    searchFestivals();\r\n  };\r\n\r\n  // 축제 클릭 핸들러\r\n  const handleFestivalClick = (festivalId) => {\r\n    navigate(`/festival/detail/${festivalId}`);\r\n  };\r\n\r\n  // 정렬 옵션 변경 핸들러\r\n  const handleSortChange = async (newSortType) => {\r\n    setSortType(newSortType);\r\n\r\n    if (newSortType === \"distance\") {\r\n      try {\r\n        // 현재 축제 목록에 거리 정보 추가 후 정렬\r\n        const festivalsWithDistance = await addDistanceToFestivals(festivals);\r\n        const sortedFestivals = festivalsWithDistance.sort((a, b) => {\r\n          if (a.distance === null && b.distance === null) return 0;\r\n          if (a.distance === null) return 1; // 좌표가 없는 축제는 뒤로\r\n          if (b.distance === null) return -1; // 좌표가 없는 축제는 뒤로\r\n\r\n          return a.distance - b.distance;\r\n        });\r\n\r\n        setFestivals(sortedFestivals);\r\n        setDisplayedFestivals(sortedFestivals);\r\n\r\n      } catch (error) {\r\n        // 위치 권한이 거부된 경우\r\n        if (error.code === 1) {\r\n          alert(\r\n            \"위치 기반 서비스에 동의해주세요. 거리순 정렬을 사용하려면 위치 권한이 필요합니다.\"\r\n          );\r\n          setSortType(\"date\"); // 날짜순으로 되돌리기\r\n\r\n        } else {\r\n          alert(\"거리순 정렬 중 오류가 발생했습니다. 다시 시도해주세요.\");\r\n          setSortType(\"date\"); // 날짜순으로 되돌리기\r\n        }\r\n      }\r\n\r\n    } else if (newSortType === \"date\") {\r\n      // 날짜순 정렬 (현재 축제 목록에서 정렬)\r\n      const sorted = [...festivals].sort((a, b) =>\r\n        a.startDate.localeCompare(b.startDate)\r\n      );\r\n      setFestivals(sorted);\r\n      setDisplayedFestivals(sorted);\r\n    }\r\n  };\r\n\r\n  // 축제 상태 반환 함수\r\n  const getFestivalStatus = (start, end) => {\r\n    const now = new Date();\r\n    const startDate = new Date(\r\n      `${start.slice(0, 4)}-${start.slice(4, 6)}-${start.slice(6, 8)}`\r\n    );\r\n    const endDate = new Date(\r\n      `${end.slice(0, 4)}-${end.slice(4, 6)}-${end.slice(6, 8)}`\r\n    );\r\n\r\n    if (now < startDate) return \"예정\";\r\n    else if (now > endDate) return \"종료\";\r\n    else return \"진행중\";\r\n  };\r\n\r\n  // 데이터 받아오면 렌더링 개수 관리\r\n  useEffect(() => {\r\n    setDisplayedFestivals(festivals.slice(0, page * pageSize));\r\n    setHasMore(festivals.length > page * pageSize);\r\n  }, [festivals, page, pageSize]);\r\n\r\n  // 무한 스크롤은 클라이언트에서 slice로만 처리 (추가 API 호출 없음)\r\n  const loadMoreFestivals = useCallback(() => {\r\n    if (isLoading || !hasMore) return;\r\n    setIsLoading(true);\r\n\r\n    setTimeout(() => {\r\n      const nextPage = page + 1;\r\n      const newDisplayed = festivals.slice(0, nextPage * pageSize);\r\n\r\n      setDisplayedFestivals(newDisplayed);\r\n      setPage(nextPage);\r\n      setHasMore(newDisplayed.length < festivals.length);\r\n      setIsLoading(false);\r\n    }, 400); // 0.4초 뒤에 로딩 되도록 설정\r\n  }, [page, pageSize, isLoading, hasMore, festivals]);\r\n\r\n  // Intersection Observer 설정\r\n  useEffect(() => {\r\n    // 1. IntersectionObserver 인스턴스 생성\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        const target = entries[0];\r\n        // 2. 타겟이 화면에 보이고, 더 불러올 데이터가 있고, 로딩 중이 아닐 때만 loadMoreFestivals 실행\r\n        if (target.isIntersecting && hasMore && !isLoading) {\r\n          loadMoreFestivals();\r\n        }\r\n      },\r\n      {\r\n        root: null,           // 뷰포트(브라우저 창) 기준으로 관찰\r\n        rootMargin: '100px',  // 타겟이 실제로 뷰포트에 닿기 100px 전에 미리 감지\r\n        threshold: 0.1        // 타겟 요소의 10%만 보여도 콜백 실행\r\n      }\r\n    );\r\n\r\n    // 3. loadingRef가 가리키는 DOM 요소를 관찰 시작\r\n    if (loadingRef.current) {\r\n      observer.observe(loadingRef.current);\r\n    }\r\n\r\n    observerRef.current = observer;\r\n\r\n    // 4. 컴포넌트 언마운트 시 observer 해제\r\n    return () => {\r\n      if (observerRef.current) {\r\n        observerRef.current.disconnect();\r\n      }\r\n    };\r\n  }, [hasMore, isLoading, loadMoreFestivals]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"local-header\">\r\n        <div className=\"local-main-title\">지역별 축제</div>\r\n        <div className=\"local-sub-title\">\r\n          # 지역별로 다양한 축제를 만나보세요.\r\n        </div>\r\n\r\n        {/* 검색 섹션 */}\r\n        <div className=\"search-section\">\r\n          <div className=\"search-title\">축제 검색</div>\r\n          <div className=\"search-description\">\r\n            원하는 날짜와 지역을 선택하여 축제를 찾아보세요\r\n          </div>\r\n          <div className=\"search-container\">\r\n            <div className=\"search-form-row\">\r\n              <div className=\"input-block\">\r\n                <span className=\"input-label\">시작 날짜</span>\r\n                <input\r\n                  id=\"searchStartDate\"\r\n                  type=\"date\"\r\n                  className=\"search-input date-input\"\r\n                  value={searchStartDate}\r\n                  onChange={(e) => setSearchStartDate(e.target.value)}\r\n                  placeholder=\"시작일\"\r\n                />\r\n              </div>\r\n              <span className=\"date-range-tilde\">~</span>\r\n              <div className=\"input-block\">\r\n                <span className=\"input-label\">끝 날짜</span>\r\n                <input\r\n                  id=\"searchEndDate\"\r\n                  type=\"date\"\r\n                  className=\"search-input date-input\"\r\n                  value={searchEndDate}\r\n                  onChange={(e) => setSearchEndDate(e.target.value)}\r\n                  placeholder=\"종료일\"\r\n                />\r\n              </div>\r\n              <div className=\"input-block\">\r\n                <span className=\"input-label\">지역</span>\r\n                <select\r\n                  className=\"search-input location-select\"\r\n                  value={searchLocation}\r\n                  onChange={(e) => setSearchLocation(e.target.value)}\r\n                >\r\n                  <option value=\"\">전체 지역</option>\r\n                  {areaOptions.map((area) => (\r\n                    <option key={area.areaCode} value={area.areaCode}>\r\n                      {area.areaName}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <button className=\"search-button\" onClick={handleSearch}>\r\n                검색\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 새로운 축제 갤러리 섹션 */}\r\n      <div className=\"festival-gallery-section\">\r\n        {/* 정렬 옵션 */}\r\n        <div className=\"sort-options\">\r\n          <span\r\n            className={`sort-option ${sortType === \"date\" ? \"active\" : \"\"}`}\r\n            onClick={() => handleSortChange(\"date\")}\r\n          >\r\n            축제일순\r\n          </span>\r\n          <span className=\"divider\">|</span>\r\n          <span\r\n            className={`sort-option ${\r\n              sortType === \"distance\" ? \"active\" : \"\"\r\n            }`}\r\n            onClick={() => handleSortChange(\"distance\")}\r\n          >\r\n            거리순\r\n          </span>\r\n        </div>\r\n        \r\n        <div className=\"gallery-grid\">\r\n          {displayedFestivals.slice(0, 9).map((festival, index) => (\r\n            <div\r\n              key={festival.id}\r\n              className={`gallery-card ${index === 0 ? \"large-card\" : \"\"}`}\r\n              onClick={() => handleFestivalClick(festival.id)}\r\n            >\r\n              <div className=\"gallery-image-container\">\r\n                <img\r\n                  src={festival.image}\r\n                  alt={festival.title}\r\n                  className=\"gallery-image\"\r\n                />\r\n                <div className=\"gallery-overlay\">\r\n                  <div className=\"gallery-content\">\r\n                    <h3 className=\"gallery-title\">{festival.title}</h3>\r\n                    <p className=\"gallery-date\">{festival.date}</p>\r\n                    <p className=\"gallery-location\">\r\n                      {festival.location}\r\n                      {sortType === \"distance\" && festival.distance && (\r\n                        <span\r\n                          style={{\r\n                            color: \"#60a5fa\",\r\n                            marginLeft: \"8px\",\r\n                            fontSize: \"0.8rem\",\r\n                          }}\r\n                        >\r\n                          ({festival.distance.toFixed(1)}km)\r\n                        </span>\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n                  <div\r\n                    className={`gallery-status ${\r\n                      festival.status === \"진행중\" ? \"active\" : \"upcoming\"\r\n                    }`}\r\n                  >\r\n                    {festival.status}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"festival-main\">\r\n        {/* 축제 목록 섹션 */}\r\n        <section className=\"festivals-section\">\r\n          {/* 축제 그리드 */}\r\n          <div className=\"festivals-grid\">\r\n            {displayedFestivals.slice(9).map((festival) => (\r\n              <div\r\n                key={festival.id}\r\n                className=\"festival-card\"\r\n                onClick={() => handleFestivalClick(festival.id)}\r\n              >\r\n                <div className=\"festival-image-container\">\r\n                  <img\r\n                    src={festival.image}\r\n                    alt={festival.title}\r\n                    className=\"festival-image\"\r\n                  />\r\n                  <div\r\n                    className={`festival-status ${\r\n                      festival.status === \"진행중\" ? \"active\" : \"upcoming\"\r\n                    }`}\r\n                  >\r\n                    {festival.status}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"festival-info\">\r\n                  <h3 className=\"festival-title\">{festival.title}</h3>\r\n                  <p className=\"festival-location\">\r\n                    <svg\r\n                      className=\"icon\"\r\n                      fill=\"currentColor\"\r\n                      viewBox=\"0 0 20 20\"\r\n                    >\r\n                      <path\r\n                        fillRule=\"evenodd\"\r\n                        d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\"\r\n                        clipRule=\"evenodd\"\r\n                      />\r\n                    </svg>\r\n                    {festival.location}\r\n                    {sortType === \"distance\" && festival.distance && (\r\n                      <span\r\n                        style={{\r\n                          color: \"#60a5fa\",\r\n                          marginLeft: \"8px\",\r\n                          fontSize: \"0.8rem\",\r\n                        }}\r\n                      >\r\n                        ({festival.distance.toFixed(1)}km)\r\n                      </span>\r\n                    )}\r\n                  </p>\r\n                  <p className=\"festival-date\">\r\n                    <svg\r\n                      className=\"icon\"\r\n                      fill=\"currentColor\"\r\n                      viewBox=\"0 0 20 20\"\r\n                    >\r\n                      <path\r\n                        fillRule=\"evenodd\"\r\n                        d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\"\r\n                        clipRule=\"evenodd\"\r\n                      />\r\n                    </svg>\r\n                    {festival.date}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          {/* 로딩 인디케이터 */}\r\n          {isLoading && (\r\n            <div className=\"loading-indicator\">\r\n              <div className=\"spinner\"></div>\r\n              <p>축제를 불러오는 중...</p>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Intersection Observer 타겟 */}\r\n          {hasMore && (\r\n            <div ref={loadingRef} className=\"observer-target\" style={{ height: '20px' }} />\r\n          )}\r\n          \r\n          {/* 더 이상 데이터가 없을 때 */}\r\n          {!hasMore && displayedFestivals.length > 0 && (\r\n            <div className=\"no-more-data\">\r\n              <p>모든 축제를 불러왔습니다.</p>\r\n            </div>\r\n          )}\r\n          \r\n          <ScrollToTop />\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocalFestive;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\jcomponents\\Signin\\Signin.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":31,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[837,838],"text":""},"desc":"Remove unused variable 'e'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { faComment } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport axiosAPI from \"../../api/axiosAPI\";\r\nimport useAuthStore from \"../../store/useAuthStore\";\r\nimport \"./Signin.css\";\r\n\r\nconst LoginForm = () => {\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    id: \"\",\r\n    password: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleLogin();\r\n    }\r\n  };\r\n\r\n  const handleLogin = async (e) => {\r\n\r\n    // 이미 로딩 중이면 아무것도 하지 않고 함수를 종료\r\n    if (loading) {\r\n      return;\r\n    }\r\n    setLoading(true); // 로딩 상태 시작, 버튼이 비활성화됨\r\n\r\n    try {\r\n      const response = await axiosAPI.post(`/auth/login`, {\r\n        id: formData.id,\r\n        password: formData.password\r\n      });\r\n      const data = response.data;\r\n      \r\n      if (data) {\r\n        const { login } = useAuthStore.getState();\r\n        login(data);\r\n\r\n        navigate(\"/\");\r\n      }\r\n\r\n    } catch (error) {\r\n      alert(error.response.data);\r\n      \r\n    } finally {\r\n      // 요청이 성공하든 실패하든 항상 로딩 상태를 해제\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleOAuth2Login = (provider) => {\r\n\r\n    // OAuth2 인증 URL 리다이렉트\r\n    window.location.href = `${import.meta.env.VITE_API_URL}/oauth2/authorization/${provider}`;\r\n\r\n    // CustomSuccessHandler.java 참고\r\n    // OAuth2 소셜 로그인 인증 이후 서버에서 자동으로 프론트엔드로 리다이렉트 됨\r\n    // 프론트엔드에서는 리다이렉트 된 페이지에서 토큰을 쿠키에 저장하고, 로그인 상태를 유지함\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <div className=\"login-wrapper\">\r\n        <div className=\"login-card\">\r\n          {/* 제목 */}\r\n          <div className=\"login-header\">\r\n            <h2 className=\"login-title\">Log-in</h2>\r\n          </div>\r\n\r\n          {/* 로그인 폼 */}\r\n          <div className=\"login-form\">\r\n            {/* ID 입력 필드 */}\r\n            <div className=\"info-input-group\">\r\n              <label htmlFor=\"id\" className=\"login-input-label\">\r\n                ID\r\n              </label>\r\n              <input\r\n                id=\"id\"\r\n                name=\"id\"\r\n                type=\"text\"\r\n                required\r\n                value={formData.id}\r\n                onChange={handleInputChange}\r\n                placeholder=\"아이디\"\r\n                className=\"input-field\"\r\n                onKeyDown={handleKeyDown}\r\n              />\r\n            </div>\r\n\r\n            {/* 패스워드 입력 필드 */}\r\n            <div className=\"info-input-group\">\r\n              <label htmlFor=\"password\" className=\"login-input-label\">\r\n                Password\r\n              </label>\r\n              <input\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                required\r\n                value={formData.password}\r\n                onChange={handleInputChange}\r\n                placeholder=\"비밀번호\"\r\n                className=\"input-field\"\r\n                onKeyDown={handleKeyDown}\r\n              />\r\n            </div>\r\n\r\n            {/* 아이디 찾기 | 비밀번호 찾기 링크 */}\r\n            <div className=\"find-links\">\r\n              <div className=\"find-links-content\">\r\n                <Link to=\"/find?tab=id\" className=\"find-link\">\r\n                  아이디 찾기\r\n                </Link>\r\n                <span className=\"separator\">|</span>\r\n                <Link to=\"/find?tab=pw\" className=\"find-link\">\r\n                  비밀번호 찾기\r\n                </Link>\r\n              </div>\r\n            </div>\r\n\r\n            {/* 버튼 그룹 */}\r\n            <div className=\"button-group\">\r\n              <Link to=\"/signup\" className=\"btn btn-signup\">\r\n                회원가입\r\n              </Link>\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleLogin}\r\n                className=\"btn btn-login\"\r\n                disabled={loading} // loading이 true일 때 버튼을 비활성화\r\n              >\r\n              {loading ? \"로그인 중...\" : \"로그인\"}\r\n            </button>\r\n            </div>\r\n\r\n            {/* SNS 로그인 섹션 */}\r\n            <div className=\"sns-section\">\r\n              <div className=\"sns-title\">\r\n                <span>SNS 계정으로 간편하게 시작하기</span>\r\n              </div>\r\n\r\n              <div className=\"sns-buttons\">\r\n                {/* Google 로그인 */}\r\n                <button\r\n                  className=\"sns-btn sns-google\"\r\n                  onClick={() => handleOAuth2Login(\"google\")}\r\n                >\r\n                  <div className=\"google-icon\">\r\n                    <svg\r\n                      version=\"1.1\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 48 48\"\r\n                      style={{ display: \"block\" }}\r\n                    >\r\n                      <path\r\n                        fill=\"#EA4335\"\r\n                        d=\"M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z\"\r\n                      ></path>\r\n                      <path\r\n                        fill=\"#4285F4\"\r\n                        d=\"M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z\"\r\n                      ></path>\r\n                      <path\r\n                        fill=\"#FBBC05\"\r\n                        d=\"M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z\"\r\n                      ></path>\r\n                      <path\r\n                        fill=\"#34A853\"\r\n                        d=\"M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z\"\r\n                      ></path>\r\n                      <path fill=\"none\" d=\"M0 0h48v48H0z\"></path>\r\n                    </svg>\r\n                  </div>\r\n                </button>\r\n\r\n                {/* Naver 로그인 */}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"sns-btn sns-naver\"\r\n                  onClick={() => handleOAuth2Login(\"naver\")}\r\n                >\r\n                  <span>N</span>\r\n                </button>\r\n\r\n                {/* Kakao 로그인 */}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"sns-btn sns-kakao\"\r\n                  onClick={() => handleOAuth2Login(\"kakao\")}\r\n                >\r\n                  <div className=\"kakao-icon\">\r\n                    <FontAwesomeIcon className=\"kakao-item\" icon={faComment} />\r\n                  </div>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\jcomponents\\Signup\\Signup.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":605,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":605,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'daum' is not defined.","line":642,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":642,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":729,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":729,"endColumn":17}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'debounced'. Either include it or remove the dependency array.","line":482,"column":6,"nodeType":"ArrayExpression","endLine":482,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [debounced.id, debounced.nickname, debounced.email, debounced]","fix":{"range":[14166,14217],"text":"[debounced.id, debounced.nickname, debounced.email, debounced]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState } from 'react';\r\nimport axiosAPI from \"../../api/axiosAPI\";\r\nimport { useDebounce } from '../../hooks/useDebounce';\r\nimport './Signup.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Signup = () => {\r\n  const [currentStep, setCurrentStep] = useState(1);\r\n  const [agreements, setAgreements] = useState({\r\n    terms: false,\r\n    privacy: false,\r\n    marketing: false,\r\n    location: false\r\n  });\r\n  \r\n  const handlePrev = () => {\r\n    if (currentStep > 1) {\r\n      setCurrentStep(currentStep - 1);\r\n    }\r\n  };\r\n  \r\n  const handleNext = () => {\r\n    // 필수 약관 동의 확인\r\n    if (currentStep === 1) {\r\n      const requiredAgreements = ['terms', 'privacy'];\r\n      const allRequiredChecked = requiredAgreements.every(key => agreements[key]);\r\n      \r\n      if (!allRequiredChecked) {\r\n        alert('필수 약관에 동의해주세요.');\r\n        return;\r\n      }\r\n    }\r\n    \r\n    if (currentStep < 3) {\r\n      setCurrentStep(currentStep + 1);\r\n    }\r\n  };\r\n  \r\n  const renderCurrentStep = () => {\r\n    switch (currentStep) {\r\n      case 1:\r\n        return <Agreements agreements={agreements} setAgreements={setAgreements} />;\r\n      case 2:\r\n        return <Inform handlePrev={handlePrev} currentStep={currentStep} setCurrentStep={setCurrentStep} />;\r\n      case 3:\r\n        return <Completion />;\r\n      default:\r\n        return <Agreements agreements={agreements} setAgreements={setAgreements} />;\r\n    }\r\n  };\r\n  \r\n  return (\r\n      <div className=\"signup-container\">\r\n        <div className=\"signup-wrapper\">\r\n          <ProgressSteps currentStep={currentStep} />\r\n          \r\n          {/* Main Content */}\r\n          <div className=\"signup-content\">\r\n            {renderCurrentStep()}\r\n            \r\n            {currentStep === 1 && (\r\n                <div className=\"nav-buttons\">\r\n                  <button className=\"next-btn\" onClick={handleNext}>\r\n                    다음\r\n                  </button>\r\n                </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst ProgressSteps = ({ currentStep }) => {\r\n  const steps = [\r\n    { number: 1, label: '약관동의' },\r\n    { number: 2, label: '정보입력' },\r\n    { number: 3, label: '가입완료' }\r\n  ];\r\n  \r\n  return (\r\n      <div className=\"progress-steps\">\r\n        {steps.map((step, index) => (\r\n            <React.Fragment key={step.number}>\r\n              <div className={`step ${currentStep >= step.number ? 'active' : ''}`}>\r\n                <div className=\"step-number\">{step.number}</div>\r\n                <div className=\"step-label\">{step.label}</div>\r\n              </div>\r\n              {index < steps.length - 1 && (\r\n                  <div className={`step-line ${currentStep === 3 ? 'zigzag-line' : ''}`}></div>\r\n              )}\r\n            </React.Fragment>\r\n        ))}\r\n      </div>\r\n  );\r\n};\r\n\r\nconst Agreements = ({ agreements, setAgreements }) => {\r\n  const [expandedSections, setExpandedSections] = useState({\r\n    terms: false,\r\n    privacy: false,\r\n    marketing: false,\r\n    location: false\r\n  });\r\n  \r\n  const handleAgreementChange = (key) => {\r\n    setAgreements(prev => ({\r\n      ...prev,\r\n      [key]: !prev[key]\r\n    }));\r\n  };\r\n  \r\n  const handleToggleExpand = (section) => {\r\n    setExpandedSections(prev => ({\r\n      ...prev,\r\n      [section]: !prev[section]\r\n    }));\r\n  };\r\n  \r\n  const handleSelectAll = () => {\r\n    const allChecked = Object.values(agreements).every(val => val);\r\n    const newState = !allChecked;\r\n    setAgreements({\r\n      terms: newState,\r\n      privacy: newState,\r\n      marketing: newState,\r\n      location: newState\r\n    });\r\n  };\r\n  \r\n  // FIXME: 약관 내용 하드코딩 수정 필요\r\n  const sections = [\r\n    {\r\n      id: 'terms',\r\n      label: '이용약관',\r\n      required: true,\r\n      content: `제1조 (목적)\r\n본 약관은 축제 알림 및 소통 게시판 웹사이트(이하 \"사이트\")가 제공하는 서비스의 이용과 관련하여\r\n사이트와 회원 간의 권리·의무 및 책임사항을 규정합니다.\r\n\r\n제2조 (서비스의 제공)\r\n사이트는 이용자에게 축제 일정 알림, 게시판을 통한 커뮤니케이션, 콘텐츠 공유 등의 서비스를 제공합니다.\r\n\r\n제3조 (회원가입)\r\n회원은 약관에 동의하고 회원가입 양식을 작성하여 가입 신청을 합니다. 사이트는 이를 승인함으로써 회원 자격이 부여됩니다.\r\n\r\n제4조 (회원의 의무)\r\n- 타인의 정보를 도용하거나 허위 정보를 기재하지 않아야 합니다.\r\n- 사이트 운영에 지장을 주는 행위를 해서는 안 됩니다.\r\n\r\n제5조 (서비스 이용 제한)\r\n사이트는 회원이 약관을 위반하거나 공공질서 및 미풍양속에 반하는 행위를 할 경우 서비스 이용을 제한할 수 있습니다.`\r\n    },\r\n    {\r\n      id: 'privacy',\r\n      label: '개인정보의 수집범위',\r\n      required: true,\r\n      content: `사이트는 회원가입 및 서비스 이용을 위해 다음과 같은 개인정보를 수집합니다:\r\n- 필수 수집항목: 이름(닉네임), 이메일 주소, 비밀번호\r\n- 선택 수집항목: 프로필 이미지, 관심 축제 지역/카테고리\r\n- 자동 수집 항목: 접속 로그, 쿠키, 이용 기록, IP 주소 등`\r\n    },\r\n    {\r\n      id: 'marketing',\r\n      label: '개인정보의 수집 및 이용 목적',\r\n      required: false,\r\n      content: `수집한 개인정보는 다음의 목적을 위해 사용됩니다:\r\n1. 회원 관리: 가입의사 확인, 이용자 식별, 탈퇴 의사 확인 등\r\n2. 서비스 제공: 축제 알림, 게시판 글 작성 및 댓글 기능 제공 등\r\n3. 알림 서비스: 사용자가 선택한 관심 축제 정보 제공 및 푸시 알림\r\n4. 분석 및 개선: 이용 패턴 분석을 통한 서비스 개선`\r\n    },\r\n    {\r\n      id: 'location',\r\n      label: '개인정보의 보유기간 및 이용기간',\r\n      required: false,\r\n      content: `회원 탈퇴 시: 즉시 삭제 (단, 관련 법령에 따라 일정 기간 보존되는 정보 제외)\r\n전자상거래 기록 보존 (해당 시):\r\n계약/청약철회/결제 기록: 5년\r\n소비자 불만 또는 분쟁처리 기록: 3년\r\n접속에 관한 기록(IP 등): 3개월`\r\n    }\r\n  ];\r\n  \r\n  const TermsSection = ({ label, content, checked, onChange, expanded, onToggle, required }) => {\r\n    return (\r\n        <div className=\"terms-section\">\r\n          <div className=\"terms-header\">\r\n            <label className=\"checkbox-label\">\r\n              <input\r\n                  type=\"checkbox\"\r\n                  checked={checked}\r\n                  onChange={onChange}\r\n                  required={required}\r\n              />\r\n              <span className=\"checkmark\"></span>\r\n              {label} {required && <span className=\"required\">*</span>}\r\n            </label>\r\n            <button className=\"toggle-btn\" onClick={onToggle}>\r\n              상세\r\n            </button>\r\n          </div>\r\n          {expanded && (\r\n              <div className=\"terms-content\">\r\n                {content}\r\n              </div>\r\n          )}\r\n        </div>\r\n    );\r\n  };\r\n  \r\n  return (\r\n      <>\r\n        <h2 className=\"signup-title\">약관동의</h2>\r\n        <hr/>\r\n        {sections.map((section) => (\r\n            <TermsSection\r\n                key={section.id}\r\n                label={section.label}\r\n                content={section.content}\r\n                checked={agreements[section.id] || false}\r\n                onChange={() => handleAgreementChange(section.id)}\r\n                expanded={expandedSections[section.id] || false}\r\n                onToggle={() => handleToggleExpand(section.id)}\r\n                required={section.required}\r\n            />\r\n        ))}\r\n        \r\n        <div className=\"bottom-notice\">\r\n          <p>이용약관, 개인정보의 수집범위, 개인정보의 수집 및 이용 목적, 개인정보의 보유기간 및 이용기간 동의를 포함합니다.</p>\r\n          <label className=\"select-all-label\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={Object.values(agreements).every(Boolean)}\r\n                onChange={handleSelectAll}\r\n            />\r\n            <span className=\"checkmark\"></span>\r\n            전체동의\r\n          </label>\r\n        </div>\r\n      </>\r\n  );\r\n};\r\n\r\n// validation 규칙과 메시지 분리\r\nconst validationRules = {\r\n  id: {\r\n    required: true,\r\n    minLength: 4,\r\n    maxLength: 20,\r\n    pattern: /^[a-zA-Z0-9]+$/,\r\n    message: {\r\n      required: '아이디를 입력해주세요',\r\n      minLength: '아이디는 4~20자 사이로 입력해주세요',\r\n      maxLength: '아이디는 4~20자 사이로 입력해주세요',\r\n      pattern: '아이디는 영문자와 숫자만 사용 가능합니다'\r\n    }\r\n  },\r\n  name: {\r\n    required: true,\r\n    minLength: 2,\r\n    maxLength: 20,\r\n    message: {\r\n      required: '이름을 입력해주세요',\r\n      minLength: '이름은 2~20자 사이로 입력해주세요',\r\n      maxLength: '이름은 2~20자 사이로 입력해주세요'\r\n    }\r\n  },\r\n  email: {\r\n    required: true,\r\n    pattern: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n    message: {\r\n      required: '이메일을 입력해주세요',\r\n      pattern: '올바른 이메일 형식으로 입력해주세요'\r\n    }\r\n  },\r\n  nickname: {\r\n    required: true,\r\n    minLength: 2,\r\n    maxLength: 15,\r\n    pattern: /^[ㄱ-힣a-zA-Z0-9]+$/,\r\n    message: {\r\n      required: '닉네임을 입력해주세요',\r\n      minLength: '닉네임은 2~15자 사이로 입력해주세요',\r\n      maxLength: '닉네임은 2~15자 사이로 입력해주세요',\r\n      pattern: '닉네임은 한글, 영문자, 숫자만 사용 가능합니다'\r\n    }\r\n  },\r\n  password: {\r\n    required: true,\r\n    minLength: 6,\r\n    maxLength: 20,\r\n    pattern: /^(?=.*[a-zA-Z])(?=.*[0-9]).{6,}$/,\r\n    message: {\r\n      required: '비밀번호를 입력해주세요',\r\n      minLength: '비밀번호는 6~20자 사이로 입력해주세요',\r\n      maxLength: '비밀번호는 6~20자 사이로 입력해주세요',\r\n      pattern: '비밀번호는 영문자와 숫자를 포함해야 합니다'\r\n    }\r\n  },\r\n  passwordConfirm: {\r\n    required: true,\r\n    message: {\r\n      required: '비밀번호 확인을 입력해주세요',\r\n      match: '비밀번호가 일치하지 않습니다'\r\n    }\r\n  },\r\n  authKey: {\r\n    required: true,\r\n    length: 6,\r\n    message: {\r\n      required: '인증번호를 입력해주세요',\r\n      length: '인증번호는 6자리로 입력해주세요'\r\n    }\r\n  },\r\n  tel: {\r\n    required: true,\r\n    minLength: 10,\r\n    maxLength: 11,\r\n    pattern: /^\\d{10,11}$/,\r\n    message: {\r\n      required: '전화번호를 입력해주세요',\r\n      minLength: '전화번호는 10~11자리 숫자만 입력 가능합니다',\r\n      maxLength: '전화번호는 10~11자리 숫자만 입력 가능합니다',\r\n      pattern: '숫자만 입력해주세요 (예: 01012345678)'\r\n    }\r\n  }\r\n};\r\n\r\nconst duplicateErrorMessages = {\r\n  id: {\r\n    TOO_SHORT: '아이디는 4~20자 사이로 입력해주세요.',\r\n    INVALID_FORMAT: '아이디는 영문자와 숫자만 사용 가능합니다.',\r\n    DUPLICATE: '이미 사용 중인 아이디입니다.',\r\n    SERVER_ERROR: '확인 중 오류가 발생했습니다.',\r\n    UNSUPPORTED_TYPE: '지원하지 않는 타입입니다.'\r\n  },\r\n  nickname: {\r\n    TOO_SHORT: '닉네임은 2~15자여야 합니다.',\r\n    INVALID_FORMAT: '닉네임은 한글, 영문자, 숫자만 사용 가능합니다.',\r\n    DUPLICATE: '이미 사용 중인 닉네임입니다.',\r\n    SERVER_ERROR: '확인 중 오류가 발생했습니다.',\r\n    UNSUPPORTED_TYPE: '지원하지 않는 타입입니다.'\r\n  },\r\n  email: {\r\n    INVALID_FORMAT: '올바른 이메일 형식으로 입력해주세요.',\r\n    DUPLICATE: '이미 사용 중인 이메일입니다.',\r\n    SERVER_ERROR: '확인 중 오류가 발생했습니다.',\r\n    UNSUPPORTED_TYPE: '지원하지 않는 타입입니다.'\r\n  }\r\n};\r\n\r\nconst getDuplicateMessage = (field, code) => {\r\n  if (!code) return '';\r\n  return duplicateErrorMessages[field]?.[code] || '확인 중 오류가 발생했습니다.';\r\n};\r\n\r\nconst Inform = ({ handlePrev, currentStep, setCurrentStep }) => {\r\n\r\n  // 1. 상태 선언\r\n  // [formData] : 회원가입 입력값 전체를 관리\r\n  // [duplicateStatus] : id, nickname, email, authKey의 중복확인/인증 상태(checked, available, message)\r\n  // [validationErrors] : 각 입력값의 validation 에러 메시지\r\n  const [formData, setFormData] = useState({\r\n    name: '', nickname: '', email: '', tel: '', authKey: '', id: '', password: '', passwordConfirm: '', \r\n    address: { zipcode: '', detail: '', extra: '' }, \r\n    authMethod: 'email'\r\n  });\r\n\r\n  const [duplicateStatus, setDuplicateStatus] = useState({\r\n    id: { checked: false, available: false, message: '' },\r\n    nickname: { checked: false, available: false, message: '' },\r\n    email: { checked: false, available: false, message: '' },\r\n    authKey: { checked: false, available: false, message: '' } // 인증번호 상태 추가\r\n  });\r\n\r\n  const [validationErrors, setValidationErrors] = useState({});\r\n  const [isEmailLoading, setIsEmailLoading] = useState(false); // 이메일 인증 로딩 상태\r\n  const [isTelLoading, setIsTelLoading] = useState(false); // 전화번호 인증 로딩 상태\r\n\r\n  // 2. useRef (race condition 방지)\r\n  // [lastRequestedValue] : 중복확인 요청의 마지막 값을 기억하여 응답 순서 꼬임(race condition) 방지\r\n  // [authKeyInputRef] : 인증번호 입력 필드 참조\r\n  const lastRequestedValue = useRef({});\r\n  const authKeyInputRef = useRef(null);\r\n\r\n  // 3. useDebounce\r\n  // [debounced] : 입력값이 일정 시간(500ms) 동안 변경 없을 때만 값이 반영됨(불필요한 API 호출 방지)\r\n  const debounced = {\r\n    id: useDebounce(formData.id, 500),\r\n    nickname: useDebounce(formData.nickname, 500),\r\n    email: useDebounce(formData.email, 500),\r\n    authKey: useDebounce(formData.authKey, 500)\r\n  };\r\n\r\n  // 4. 헬퍼: validation\r\n  // [validateField] : 각 입력값에 대해 validation 규칙(길이, 정규식 등) 체크 후 에러 메시지 반환\r\n  const validateField = (field, value, compareValue) => {\r\n    const rules = validationRules[field];\r\n\r\n    if (!rules) return '';\r\n    if (rules.required && !value) return rules.message.required;\r\n\r\n    if (rules.minLength && value.length < rules.minLength) return rules.message.minLength;\r\n    if (rules.maxLength && value.length > rules.maxLength) return rules.message.maxLength;\r\n\r\n    if (rules.pattern && !rules.pattern.test(value)) return rules.message.pattern;\r\n    \r\n    if (field === 'passwordConfirm' && value !== compareValue) return rules.message.match;\r\n    if (field === 'authKey' && value.length !== 6) return rules.message.length;\r\n\r\n    return '';\r\n  };\r\n\r\n  // 5. 헬퍼: 중복확인\r\n  // [checkDuplicate] : 중복확인 API 호출, 응답이 마지막 요청값과 일치할 때만 상태 업데이트 (race condition 방지)\r\n  const checkDuplicate = async (field, value) => {\r\n    lastRequestedValue.current[field] = value;\r\n\r\n    try {\r\n      setDuplicateStatus(prev => ({ ...prev, [field]: { checked: false, available: false, message: '' } }));\r\n\r\n      // 중복 확인하는 필드가 아닌 경우\r\n      if (!['id', 'nickname', 'email'].includes(field)) return;\r\n\r\n      // 특수 문자가 포함된 경우 인코딩 처리\r\n      const response = await axiosAPI.get(`/member/exists?type=${field}&value=${encodeURIComponent(value)}`);\r\n\r\n      // 마지막 요청값과 현재 값이 다른 경우 중복확인 중단\r\n      if (lastRequestedValue.current[field] !== value) return;\r\n      \r\n      // 중복 확인 결과 업데이트\r\n      setDuplicateStatus(prev => ({\r\n        ...prev,\r\n        [field]: {\r\n          checked: true,\r\n          available: response.data.available,\r\n          message: getDuplicateMessage(field, response.data.code)\r\n        }\r\n      }));\r\n\r\n    } catch {\r\n      if (lastRequestedValue.current[field] !== value) return;\r\n      \r\n      setDuplicateStatus(prev => ({\r\n        ...prev,\r\n        [field]: {\r\n          checked: true,\r\n          available: false,\r\n          message: getDuplicateMessage(field, 'SERVER_ERROR')\r\n        }\r\n      }));\r\n    }\r\n  };\r\n\r\n  // 6. useEffect: 중복확인 (id, nickname, email)\r\n  useEffect(() => {\r\n    ['id', 'nickname', 'email'].forEach(field => {\r\n      const value = debounced[field];\r\n      let shouldCheck = false;\r\n\r\n      switch(field) {\r\n        case 'id':\r\n          shouldCheck = value && value.length >= 4;\r\n          break;\r\n        case 'nickname':\r\n          shouldCheck = value && value.length >= 2;\r\n          break;\r\n        case 'email':\r\n          shouldCheck = value && value.includes('@');\r\n          break;\r\n        default:\r\n          shouldCheck = false;\r\n      }\r\n\r\n      if (shouldCheck) {\r\n        setDuplicateStatus(prev => ({ ...prev, [field]: { checked: false, available: false, message: '' } }));\r\n        checkDuplicate(field, value);\r\n      }\r\n    });\r\n    // eslint-disable-next-line\r\n  }, [debounced.id, debounced.nickname, debounced.email]);\r\n\r\n  // 7. useEffect: 인증번호 실시간 체크\r\n  useEffect(() => {\r\n    const checkAuthKey = async () => {\r\n      if ((!debounced.email && !formData.tel) || !debounced.authKey) {\r\n        setDuplicateStatus(prev => ({ ...prev, authKey: { checked: false, available: false, message: '' } }));\r\n        return;\r\n      }\r\n      try {\r\n        const res = await axiosAPI.post('/auth/checkAuthKey', {\r\n          email: debounced.email,\r\n          tel: formData.tel,\r\n          authKey: debounced.authKey,\r\n          authMethod: formData.authMethod\r\n        });\r\n\r\n        if (res.data.success) {\r\n          setDuplicateStatus(prev => ({ ...prev, authKey: { checked: true, available: true, message: '인증 성공!' } }));\r\n        } else {\r\n          setDuplicateStatus(prev => ({ ...prev, authKey: { checked: true, available: false, message: res.data.message || '인증번호가 일치하지 않습니다.' } }));\r\n        }\r\n\r\n      } catch (error) {\r\n        // 서버에서 401, 400 등 에러 응답 시 메시지를 그대로 안내\r\n        const msg = error.response?.data?.message || '서버 오류';\r\n        setDuplicateStatus(prev => ({ ...prev, authKey: { checked: true, available: false, message: msg } }));\r\n      }\r\n    };\r\n\r\n    if (debounced.authKey.length === 6) {\r\n      checkAuthKey();\r\n    } else {\r\n      setDuplicateStatus(prev => ({ ...prev, authKey: { checked: false, available: false, message: '' } }));\r\n    }\r\n  }, [debounced.authKey, debounced.email, formData.tel, formData.authMethod]);\r\n\r\n  // 8. 입력 핸들러 (validation, 중복확인 상태 초기화)\r\n  // [handleInputChange] : 입력값 변경 시 formData, validationErrors, duplicateStatus를 업데이트\r\n  // - 아이디/닉네임/이메일 입력 시 중복확인 상태 초기화\r\n  // - 비밀번호 입력 시 비밀번호 확인도 재검증\r\n  // - 인증번호 입력 시 인증 상태 초기화\r\n  const handleInputChange = (field, value) => {\r\n    // 중첩된 필드 처리 (예: address.zipcode)\r\n    if (field.includes('.')) {\r\n      const [parent, child] = field.split('.');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [parent]: {\r\n          ...prev[parent],\r\n          [child]: value\r\n        }\r\n      }));\r\n    } else {\r\n      // 인증 방식(authMethod) 변경 시 인증번호(authKey)와 인증 상태 모두 초기화\r\n      if (field === 'authMethod') {\r\n        setFormData(prev => ({ ...prev, authMethod: value, authKey: '' }));\r\n        setDuplicateStatus(prev => ({\r\n          ...prev,\r\n          authKey: { checked: false, available: false, message: '' }\r\n        }));\r\n      } else if (field === 'tel') {\r\n        // 숫자만 허용\r\n        const onlyNumber = value.replace(/[^\\d]/g, '');\r\n        setFormData(prev => ({ ...prev, tel: onlyNumber }));\r\n      } else {\r\n        setFormData(prev => ({ ...prev, [field]: value }));\r\n      }\r\n    }\r\n\r\n    if ([\"id\", \"nickname\", \"email\", \"authKey\"].includes(field)) {\r\n      setDuplicateStatus(prev => ({ ...prev, [field]: { checked: false, available: false, message: '' } }));\r\n    }\r\n\r\n    setValidationErrors(prev => ({\r\n      ...prev,\r\n      [field]: validateField(field, value, field === 'passwordConfirm' ? formData.password : undefined)\r\n    }));\r\n\r\n    if (field === 'password') {\r\n      setValidationErrors(prev => ({\r\n        ...prev,\r\n        passwordConfirm: validateField('passwordConfirm', formData.passwordConfirm, value)\r\n      }));\r\n    }\r\n  };\r\n\r\n  // 9. 기타 핸들러\r\n  // [handleSmsVerification] : SMS 인증 요청\r\n  // [handleAuthKeyVerification] : 인증번호 확인\r\n  // [handleAddressSearch] : 주소 검색\r\n  const handleSmsVerification = async () => {\r\n    const { email, tel } = formData;\r\n\r\n    if (formData.authMethod === 'email') {\r\n      if (!email || email.trim() === '') {\r\n        alert('이메일을 입력해주세요.');\r\n        return;\r\n      }\r\n\r\n      if(!duplicateStatus.email.available) {\r\n        alert(duplicateStatus.email.message);\r\n        return;\r\n      }\r\n\r\n      if(validationErrors.email) {\r\n        alert(validationErrors.email);\r\n        return;\r\n      }\r\n\r\n      // 이메일 인증\r\n      try {\r\n        setIsEmailLoading(true);\r\n        const response = await axiosAPI.post(`/auth/email`, { email: email.trim() });\r\n        if(response.data.success) {\r\n          alert('이메일로 인증번호가 전송되었습니다.');\r\n          setFormData(prev => ({ ...prev, authMethod: 'email', authKey: '' }));\r\n          if (authKeyInputRef.current) {\r\n            authKeyInputRef.current.focus();\r\n          }\r\n        } else {\r\n          alert('이메일로 인증번호 전송에 실패했습니다.');\r\n        }\r\n      } catch (error) {\r\n        alert('이메일로 인증번호 전송에 실패했습니다.');\r\n      } finally {\r\n        setIsEmailLoading(false);\r\n      }\r\n\r\n    } else {\r\n      if (!tel || tel.trim() === '') {\r\n        alert('전화번호를 입력해주세요.');\r\n        return;\r\n      }\r\n      \r\n      // SMS 인증\r\n      try {\r\n        setIsTelLoading(true);\r\n        // 실제 인증번호 발송 API 호출\r\n        const response = await axiosAPI.post('/auth/sms', { tel: tel.trim() });\r\n        if (response.data.success) {\r\n          alert('전화번호로 인증번호가 전송되었습니다.');\r\n          setFormData(prev => ({ ...prev, authMethod: 'tel', authKey: '' }));\r\n          if (authKeyInputRef.current) {\r\n            authKeyInputRef.current.focus();\r\n          }\r\n        } else {\r\n          alert(response.data.message || '전화번호로 인증번호 전송에 실패했습니다.');\r\n        }\r\n      } catch (error) {\r\n        alert(error.response?.data?.message || '전화번호로 인증번호 전송에 실패했습니다.');\r\n      } finally {\r\n        setIsTelLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAddressSearch = () => {\r\n    // 다음 주소 API 다루기\r\n    function execDaumPostcode() {\r\n      new daum.Postcode({\r\n        oncomplete: function(data) {\r\n          // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n\r\n          // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n          // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n          var addr = ''; // 주소 변수\r\n\r\n          //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n          if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n            addr = data.roadAddress;\r\n          } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n            addr = data.jibunAddress;\r\n          }\r\n\r\n          // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n          // 상세 주소 정보도 함께 설정\r\n          setFormData(prev => ({ \r\n            ...prev, \r\n            address: { \r\n              zipcode: data.zonecode, \r\n              detail: addr, \r\n              extra: data.buildingName || '' // 건물명이 있으면 상세 주소에 자동 입력\r\n            } \r\n          }));\r\n        }\r\n      }).open();\r\n    };\r\n\r\n    execDaumPostcode();\r\n  };\r\n\r\n  // 모든 중복/유효성 검사 통과 여부 확인 함수\r\n  const isAllValid = () => {\r\n    // 필수 유효성 검사\r\n    const requiredFields = ['name', 'nickname', 'email', 'id', 'password', 'passwordConfirm', 'authKey'];\r\n    for (const field of requiredFields) {\r\n      const value = formData[field];\r\n      // 공백만 있는 경우도 체크\r\n      if (validationErrors[field] || !value || (typeof value === 'string' && value.trim() === '')) return false;\r\n    }\r\n    // 중복/인증 체크\r\n    if (!duplicateStatus.id.available) return false;\r\n    if (!duplicateStatus.nickname.available) return false;\r\n    if (!duplicateStatus.email.available) return false;\r\n    if (!duplicateStatus.authKey.available) return false;\r\n    return true;\r\n  };\r\n\r\n  // 회원가입 제출 함수\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!isAllValid()) {\r\n      alert('모든 입력값을 올바르게 입력해주세요.');\r\n      return;\r\n    }\r\n    try {\r\n      // 회원가입 API 호출\r\n      const { name, nickname, email, tel, id, password, address } = formData;\r\n      \r\n      // 주소 형식 조합 (MyPageEditInfo.jsx와 동일한 형식)\r\n      let formattedAddress = '';\r\n      if (address.zipcode && address.detail) {\r\n        formattedAddress = `${address.zipcode} ${address.detail}`;\r\n        if (address.extra) {\r\n          formattedAddress += ` (${address.extra})`;\r\n        }\r\n      }\r\n      \r\n      const response = await axiosAPI.post('/member/signup', {\r\n        name: name.trim(),\r\n        nickname: nickname.trim(),\r\n        email: email.trim(),\r\n        tel: tel.trim(),\r\n        id: id.trim(),\r\n        password: password.trim(),\r\n        address: formattedAddress\r\n      });\r\n\r\n      if(response.data === 1) {\r\n        alert('회원가입이 완료되었습니다!');\r\n        setCurrentStep(3); // 직접 3으로 이동\r\n        return; // 여기서 함수 종료!\r\n      } else {\r\n        alert('회원가입 중 오류가 발생했습니다.');\r\n      }\r\n\r\n    } catch (err) {\r\n      alert('회원가입 중 오류가 발생했습니다.');\r\n    }\r\n  };\r\n\r\n  // 10. 렌더링\r\n  const getInputClass = field => {\r\n    const base = 'form-input';\r\n    const status = duplicateStatus[field];\r\n    if (validationErrors[field]) return `${base} unavailable`;\r\n    if (!['id', 'nickname', 'email', 'authKey'].includes(field)) return base;\r\n    if (status && status.checked && status.available) return `${base} available`;\r\n    if (status && status.checked && !status.available) return `${base} unavailable`;\r\n    return base;\r\n  };\r\n\r\n  const getStatusMessage = field => {\r\n    const status = duplicateStatus[field];\r\n    if (!status || !status.checked || !status.message) return null;\r\n    return <span className={`status-message ${status.available ? 'success' : 'error'}`}>{status.message}</span>;\r\n  };\r\n\r\n  const getValidationError = field => {\r\n    const error = validationErrors[field];\r\n    return error ? <span className=\"validation-error\">{error}</span> : null;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"signup-title\">정보입력</h2>\r\n      <p className=\"signup-subtitle\">회원 가입을 위해 *표시는 필수로 입력해주세요</p>\r\n      <hr/>\r\n      <form className=\"signup-form\" onSubmit={handleSubmit}>\r\n        <div className=\"user-form-row\">\r\n          <div className=\"user-form-group\">\r\n            <label className=\"form-label\">이름 <span className=\"required\">*</span></label>\r\n            <input type=\"text\" className={getInputClass('name')} placeholder=\"이름을 입력해주세요\" value={formData.name} onChange={e => handleInputChange('name', e.target.value.trim())} />\r\n            {getValidationError('name')}\r\n          </div>\r\n          <div className=\"user-form-group\">\r\n            <label className=\"form-label\">닉네임 <span className=\"required\">*</span></label>\r\n            <div className=\"form-input-group\">\r\n              <input type=\"text\" className={getInputClass('nickname')} placeholder=\"닉네임을 입력해주세요\" value={formData.nickname} onChange={e => handleInputChange('nickname', e.target.value.trim())} />\r\n            </div>\r\n            {getStatusMessage('nickname')}\r\n            {getValidationError('nickname')}\r\n          </div>\r\n        </div>\r\n        <div className=\"user-form-row\">\r\n          <div className=\"user-form-group\">\r\n            <label className=\"form-label\">이메일 <span className=\"required\">*</span></label>\r\n            <input type=\"email\" className={getInputClass('email')} placeholder=\"이메일을 입력해주세요\" value={formData.email} onChange={e => handleInputChange('email', e.target.value.trim())} />\r\n            {getStatusMessage('email')}\r\n            {getValidationError('email')}\r\n          </div>\r\n          <div className=\"user-form-group\">\r\n            <label className=\"form-label\">전화번호 <span className=\"required\">*</span></label>\r\n            <input type=\"tel\" className=\"form-input\" placeholder=\"숫자만 입력(예: 01012345678)\" value={formData.tel} onChange={e => handleInputChange('tel', e.target.value)} maxLength={11} />\r\n          </div>\r\n        </div>\r\n        <div className=\"user-form-group\">\r\n          <label className=\"form-label\">인증 방식 선택 <span className=\"required\">*</span></label>\r\n          <div className=\"auth-method-selector\">\r\n            <label className=\"auth-method-option\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"authMethod\"\r\n                value=\"email\"\r\n                checked={formData.authMethod === 'email'}\r\n                onChange={(e) => handleInputChange('authMethod', e.target.value)}\r\n              />\r\n              <span className=\"auth-method-label\">이메일 인증</span>\r\n            </label>\r\n            <label className=\"auth-method-option\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"authMethod\"\r\n                value=\"tel\"\r\n                checked={formData.authMethod === 'tel'}\r\n                onChange={(e) => handleInputChange('authMethod', e.target.value)}\r\n              />\r\n              <span className=\"auth-method-label\">전화번호 인증</span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"user-form-group\">\r\n          <label className=\"form-label\">인증번호 <span className=\"required\">*</span></label>\r\n          <div className=\"form-input-group\">\r\n            <input\r\n              type=\"text\"\r\n              className={getInputClass('authKey')}\r\n              placeholder=\"인증번호를 입력해주세요\"\r\n              value={formData.authKey}\r\n              onChange={e => handleInputChange('authKey', e.target.value.trim())}\r\n              ref={authKeyInputRef}\r\n              maxLength={6}\r\n            />\r\n            <button type=\"button\" className=\"action-btn\" onClick={handleSmsVerification} disabled={isEmailLoading || isTelLoading}>\r\n              {isEmailLoading || isTelLoading ? '인증중...' : (formData.authMethod === 'email' ? '이메일 인증' : '전화번호 인증')}\r\n            </button>\r\n          </div>\r\n          {getStatusMessage('authKey')}\r\n        </div>\r\n        <div className=\"user-form-group\">\r\n          <label className=\"form-label\">아이디 <span className=\"required\">*</span></label>\r\n          <div className=\"form-input-group\">\r\n            <input type=\"text\" className={getInputClass('id')} placeholder=\"아이디를 입력해주세요 (4~20자, 영문자/숫자)\" value={formData.id} onChange={e => handleInputChange('id', e.target.value.trim())} />\r\n          </div>\r\n          {getStatusMessage('id')}\r\n          {getValidationError('id')}\r\n        </div>\r\n        <div className=\"user-form-group\">\r\n          <label className=\"form-label\">비밀번호 <span className=\"required\">*</span></label>\r\n          <input type=\"password\" className={getInputClass('password')} placeholder=\"비밀번호를 입력해주세요 (6~20자, 영문자+숫자)\" value={formData.password} onChange={e => handleInputChange('password', e.target.value.trim())} />\r\n          {getValidationError('password')}\r\n        </div>\r\n        <div className=\"user-form-group\">\r\n          <label className=\"form-label\">비밀번호 확인 <span className=\"required\">*</span></label>\r\n          <input type=\"password\" className={getInputClass('passwordConfirm')} placeholder=\"비밀번호를 다시 입력해주세요\" value={formData.passwordConfirm} onChange={e => handleInputChange('passwordConfirm', e.target.value.trim())} />\r\n          {getValidationError('passwordConfirm')}\r\n        </div>\r\n        <div className=\"user-form-group\">\r\n          <label className=\"form-label\">주소</label>\r\n          <div className=\"address-group\">\r\n            <div className=\"form-input-group\">\r\n              <input type=\"text\" disabled className=\"form-input\" placeholder=\"우편번호\" value={formData.address.zipcode} onChange={e => handleInputChange('address.zipcode', e.target.value)} readOnly />\r\n              <button type=\"button\" className=\"action-btn\" onClick={handleAddressSearch}>우편번호 찾기</button>\r\n            </div>\r\n            <input type=\"text\" disabled className=\"form-input full-width\" placeholder=\"기본 주소\" value={formData.address.detail} onChange={e => handleInputChange('address.detail', e.target.value)} />\r\n            <input type=\"text\" className=\"form-input full-width\" placeholder=\"상세 주소 (예: 101동 101호)\" value={formData.address.extra} onChange={e => handleInputChange('address.extra', e.target.value.trim())} />\r\n          </div>\r\n        </div>\r\n        {currentStep === 2 && (\r\n          <div className=\"nav-buttons\">\r\n            {currentStep > 1 && (\r\n              <button className=\"prev-btn\" onClick={handlePrev} type=\"button\">\r\n                이전\r\n              </button>\r\n            )}\r\n            <button\r\n              className=\"next-btn\"\r\n              disabled={!isAllValid()}\r\n              type=\"submit\"\r\n            >\r\n              회원가입\r\n            </button>\r\n          </div>\r\n        )}\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Completion = () => {\r\n  \r\n  const path = '/src/assets/signup/';\r\n  const cards = [\r\n    {\r\n      img: 'ai.png',\r\n      title: 'AI 맞춤 여행정보 추천',\r\n      content: '당신의 취향과 일정에 맞는 축제 여행 코스를 AI가 똑똑하게 추천해드립니다. 개인별 선호도를 분석하여 최적의 루트를 제안합니다.'\r\n    },\r\n    {\r\n      img: 'local.png',\r\n      title: '지역별 상세 축제 정보',\r\n      content: '전국 각 지역의 크고 작은 축제들을 한눈에! 지역 특색이 담긴 다양한 축제 정보를 상세히 제공합니다.'\r\n    },\r\n    {\r\n      img: 'calendar.png',\r\n      title: '월별 축제 캘린더 & 검색',\r\n      content: '월별로 열리는 축제들을 캘린더로 확인하고, 원하는 타입이나 지역으로 쉽게 검색할 수 있습니다. 놓치고 싶지 않은 축제 일정을 확인 가능해요!'\r\n    }\r\n  ]\r\n  \r\n  return (\r\n      <>\r\n        <div className=\"completion-container\">\r\n          \r\n          {/* Center Content */}\r\n          <div className=\"completion-content\">\r\n            {/* Character Images */}\r\n            <div className=\"character\">\r\n              <img src=\"/src/assets/signup/korean.png\" alt=\"사물놀이 캐릭터\" className=\"character-img\" />\r\n            </div>\r\n            \r\n            <h2 className=\"completion-title\">가입을 진심으로 환영합니다!</h2>\r\n            \r\n            {/* Feature Cards */}\r\n            <div className=\"feature-cards\">\r\n              \r\n              {cards.map((card, index) => (\r\n                <div className=\"feature-card\" key={index}>\r\n                  <div className=\"feature-icon-wrapper\">\r\n                    <img src={path + card.img} alt={card.img} className=\"feature-icon-img\" />\r\n                  </div>\r\n                \r\n                  <div className=\"feature-content\">\r\n                    <h3>{card.title}</h3>\r\n                    <p>{card.content}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              \r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Login Button */}\r\n        <Link to=\"/signin\" className=\"login-btn\" style={{ display: 'block', width: '100%' }}>\r\n          로그인 하러 가기\r\n        </Link>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default Signup;","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\festiveCalendar\\FestiveCalendar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\festiveCalendar\\Pagination.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\festiveCalendar\\Title.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\myPage\\MyPageCalendar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\myPage\\MyPageEditInfo.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\myPage\\MyPageEditProfile.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":33,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"navigate"},"fix":{"range":[1279,1310],"text":""},"desc":"Remove unused variable 'navigate'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProfileInfo'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProfileInfo]","fix":{"range":[2090,2092],"text":"[fetchProfileInfo]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":132,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport \"./MyPageEditProfile.css\";\r\nimport \"./MyPageWithdrawal.css\"; // 공통 스타일 유지\r\nimport MyPageSideBar from \"./MyPageSideBar.jsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useAuthStore from \"../../store/useAuthStore\";\r\nimport axiosApi from \"../../api/axiosAPI\";\r\n\r\n// 닉네임 유효성 검사 함수 (공백 허용X, 2~15자)\r\nconst isValidNickname = (nickname) => {\r\n  if (!nickname) return false;\r\n  if (/\\s/.test(nickname)) return false; // 공백 포함시 false\r\n  return nickname.length >= 2 && nickname.length <= 15;\r\n};\r\n\r\nconst MyPageEditProfile = () => {\r\n  const { updateNickname, updateProfileImage } = useAuthStore();\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [profileData, setProfileData] = useState({\r\n    name: \"\",\r\n    nickname: \"\",\r\n    profileImageUrl: \"\",\r\n  });\r\n  const [newProfileImageFile, setNewProfileImageFile] = useState(null);\r\n  const [previewImageUrl, setPreviewImageUrl] = useState(null);\r\n\r\n  const [isNicknameAvailable, setIsNicknameAvailable] = useState(null); // null: 검사 안함, true: 사용가능, false: 중복\r\n  const [nicknameCheckLoading, setNicknameCheckLoading] = useState(false);\r\n\r\n  const originalNicknameRef = useRef(\"\");\r\n  const nicknameCheckTimeout = useRef(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // --- 초기 프로필 정보 로드 ---\r\n  const fetchProfileInfo = useCallback(async () => {\r\n    try {\r\n      const response = await axiosApi.get(`/mypage/profile`);\r\n      const data = response.data;\r\n      setProfileData({\r\n        name: data.name,\r\n        nickname: data.nickname,\r\n        profileImageUrl: data.profileImage,\r\n      });\r\n      updateProfileImage(data.profileImage); // store도 즉시 갱신!\r\n      originalNicknameRef.current = data.nickname;\r\n      setIsNicknameAvailable(null);\r\n      setNewProfileImageFile(null);\r\n      setPreviewImageUrl(null);\r\n    } catch (err) {\r\n      console.error(\"회원 프로필 정보 조회 실패\", err);\r\n      alert(\"프로필 정보를 불러오는데 실패했습니다.\");\r\n    }\r\n  }, [updateProfileImage]);\r\n\r\n  // 컴포넌트 마운트 시에만 프로필 정보 로드\r\n  useEffect(() => {\r\n    fetchProfileInfo();\r\n  }, []);\r\n\r\n  // --- 닉네임 중복체크 (입력 시 debounce로 자동) ---\r\n  useEffect(() => {\r\n    const nickname = profileData.nickname?.trim() || \"\";\r\n\r\n    // 자기 닉네임 그대로면 항상 통과\r\n    if (nickname === originalNicknameRef.current) {\r\n      setIsNicknameAvailable(true);\r\n      setNicknameCheckLoading(false);\r\n      return;\r\n    }\r\n    // 닉네임이 유효성 조건(2~15자) 미달이면 미체크\r\n    if (!isValidNickname(nickname)) {\r\n      setIsNicknameAvailable(null);\r\n      setNicknameCheckLoading(false);\r\n      return;\r\n    }\r\n    // debounce\r\n    if (nicknameCheckTimeout.current)\r\n      clearTimeout(nicknameCheckTimeout.current);\r\n    setNicknameCheckLoading(true);\r\n    nicknameCheckTimeout.current = setTimeout(async () => {\r\n      try {\r\n        const response = await axiosApi.get(\r\n          `/mypage/profile/checkNickname?nickname=${nickname}`\r\n        );\r\n        const data = response.data;\r\n        setIsNicknameAvailable(!data.isDuplicate);\r\n      } catch {\r\n        setIsNicknameAvailable(null);\r\n      } finally {\r\n        setNicknameCheckLoading(false);\r\n      }\r\n    }, 400);\r\n\r\n    return () => {\r\n      if (nicknameCheckTimeout.current)\r\n        clearTimeout(nicknameCheckTimeout.current);\r\n    };\r\n  }, [profileData.nickname]);\r\n\r\n  // --- 입력 값 변경 핸들러 (닉네임 입력 시 공백 자동 제거) ---\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"nickname\") {\r\n      // 모든 공백(스페이스, 탭 등) 자동 제거\r\n      setProfileData((prev) => ({\r\n        ...prev,\r\n        [name]: value.replace(/\\s/g, \"\"),\r\n      }));\r\n    } else {\r\n      setProfileData((prev) => ({\r\n        ...prev,\r\n        [name]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  // --- 기본 이미지로 변경 핸들러 ---\r\n  const handleResetProfileImage = async () => {\r\n    if (!window.confirm(\"정말 기본 이미지로 변경하시겠습니까?\")) return;\r\n\r\n    try {\r\n      const res = await axiosApi.post('/mypage/profile/reset-image');\r\n      if (res.data && res.data.success) {\r\n        alert('기본 이미지로 변경되었습니다.');\r\n        fetchProfileInfo(); // 최신 정보 갱신\r\n        setNewProfileImageFile(null);\r\n        setPreviewImageUrl(null);\r\n      } else {\r\n        alert('기본 이미지 변경에 실패했습니다.');\r\n      }\r\n    } catch (err) {\r\n      alert('기본 이미지 변경 중 오류가 발생했습니다.');\r\n    }\r\n  };\r\n\r\n  // --- 프로필 이미지 파일 선택 핸들러 (모달 내부) ---\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setNewProfileImageFile(file);\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => setPreviewImageUrl(reader.result);\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      setNewProfileImageFile(null);\r\n      setPreviewImageUrl(null);\r\n    }\r\n  };\r\n\r\n  // --- 프로필 사진 업로드 모달 내 '사진 선택 완료' 버튼 클릭 핸들러 ---\r\n  const handleImageSelectComplete = () => {\r\n    setShowModal(false);\r\n    if (newProfileImageFile) {\r\n      alert('\"수정하기\" 버튼을 눌러 변경사항을 저장하세요.');\r\n    }\r\n  };\r\n\r\n  // --- 최종 프로필 정보 수정 (닉네임 + 사진) ---\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // 닉네임 유효성 체크\r\n    const nickname = profileData.nickname?.trim() || \"\";\r\n    if (!isValidNickname(nickname)) {\r\n      alert(\"닉네임은 2~15자로 입력해주세요.\");\r\n      return;\r\n    }\r\n    // 자기 닉네임 아니고 사용 불가(중복) 상태\r\n    if (\r\n      nickname !== originalNicknameRef.current &&\r\n      (!isNicknameAvailable || nicknameCheckLoading)\r\n    ) {\r\n      alert(\"닉네임 중복 확인 중이거나, 이미 사용 중인 닉네임입니다.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"nickname\", profileData.nickname);\r\n      if (newProfileImageFile) {\r\n        formData.append(\"profileImage\", newProfileImageFile);\r\n      }\r\n      const response = await fetch(\r\n        \"http://localhost:8080/mypage/edit-profile\",\r\n        {\r\n          method: \"POST\",\r\n          credentials: \"include\",\r\n          body: formData,\r\n        }\r\n      );\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        // 닉네임이 변경되었으면 스토어 업데이트\r\n        if (profileData.nickname !== originalNicknameRef.current) {\r\n          updateNickname(profileData.nickname);\r\n        }\r\n\r\n        alert(data.message);\r\n\r\n        // 프로필 이미지가 변경되었으면 최신 정보를 가져와서 스토어 업데이트\r\n        if (newProfileImageFile) {\r\n          // 프로필 이미지 업데이트 후 최신 정보 조회\r\n          setTimeout(() => {\r\n            fetchProfileInfo();\r\n          }, 100);\r\n        }\r\n\r\n        setProfileData((prev) => ({ ...prev }));\r\n        setNewProfileImageFile(null);\r\n        setPreviewImageUrl(null);\r\n        originalNicknameRef.current = profileData.nickname;\r\n        setIsNicknameAvailable(null);\r\n      } else {\r\n        alert(`프로필 수정 실패: ${data.message}`);\r\n      }\r\n    } catch {\r\n      console.error(\"프로필 수정 실패\");\r\n      alert(\"프로필 수정 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 기본 프로필 이미지 SVG\r\n  const defaultProfileSvg =\r\n    \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='80' height='80' viewBox='0 0 80 80'%3E%3Ccircle cx='40' cy='40' r='40' fill='%23f0f0f0'/%3E%3Ccircle cx='40' cy='35' r='12' fill='%23999'/%3E%3Cpath d='M20 65 Q40 55 60 65' fill='%23999'/%3E%3C/svg%3E\";\r\n\r\n  // 프로필 이미지 경로 보정 함수\r\n  const getProfileImageSrc = (url) => {\r\n    if (!url) return defaultProfileSvg;\r\n    if (url.startsWith(\"http\")) return url;\r\n    if (url.startsWith(\"/profile-images/\")) return url;\r\n    return `/profile-images/${url}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <main className=\"main-content\">\r\n        <MyPageSideBar\r\n          name={profileData.name}\r\n          profileImageUrl={profileData.profileImageUrl}\r\n        />\r\n        <section className=\"profile-main\">\r\n          <div className=\"profile-header\">\r\n            <h1>프로필 수정</h1>\r\n            <p>프로필 사진 또는 닉네임을 수정할 수 있습니다.</p>\r\n          </div>\r\n\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"profile-content\">\r\n              <div className=\"profile-avatar-large\">\r\n                <img\r\n                  src={\r\n                    previewImageUrl ||\r\n                    getProfileImageSrc(profileData.profileImageUrl)\r\n                  }\r\n                  alt=\"프로필\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-buttons\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"edit-btn\"\r\n                  onClick={() => setShowModal(true)}\r\n                >\r\n                  사진 변경\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"edit-btn\"\r\n                  style={{ marginLeft: \"8px\", background: \"#f0f0f0\", color: \"#666\" }}\r\n                  onClick={handleResetProfileImage}\r\n                >\r\n                  기본 이미지로 변경\r\n                </button>\r\n              </div>\r\n\r\n\r\n              <div className=\"form-section\">\r\n                <div className=\"mypage-form-row\">\r\n                  <label>닉네임</label>\r\n                  <div className=\"mypage-input-group\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"nickname\"\r\n                      value={profileData.nickname}\r\n                      onChange={handleInputChange}\r\n                      placeholder=\"닉네임을 입력하세요\"\r\n                      minLength={2}\r\n                      maxLength={15}\r\n                      autoComplete=\"off\"\r\n                      pattern=\"^[^\\s]+$\"\r\n                      inputMode=\"text\"\r\n                    />\r\n                  </div>\r\n                  {/* 닉네임 안내/검사 메시지 */}\r\n                  {profileData.nickname?.trim() === \"\" && (\r\n                    <p className=\"nickname-message info\">\r\n                      닉네임을 입력하세요.\r\n                    </p>\r\n                  )}\r\n                  {profileData.nickname?.trim() &&\r\n                    !isValidNickname(profileData.nickname.trim()) && (\r\n                      <p className=\"nickname-message error\">\r\n                        닉네임은 2~15자여야 합니다.\r\n                      </p>\r\n                    )}\r\n                  {isValidNickname(profileData.nickname?.trim() || \"\") &&\r\n                    profileData.nickname?.trim() !==\r\n                    originalNicknameRef.current &&\r\n                    (nicknameCheckLoading ? (\r\n                      <p className=\"nickname-message info\">중복 확인 중...</p>\r\n                    ) : isNicknameAvailable === false ? (\r\n                      <p className=\"nickname-message error\">\r\n                        이미 사용 중인 닉네임입니다.\r\n                      </p>\r\n                    ) : isNicknameAvailable === true ? (\r\n                      <p className=\"nickname-message success\">\r\n                        사용 가능한 닉네임입니다.\r\n                      </p>\r\n                    ) : null)}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-buttons\">\r\n                <button type=\"submit\" className=\"submit-btn\">\r\n                  수정하기\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </section>\r\n      </main>\r\n\r\n      {/* Modal */}\r\n      {showModal && (\r\n        <div className=\"modal-overlay\" onClick={() => setShowModal(false)}>\r\n          <div\r\n            className=\"modal\"\r\n            onClick={(e) => e.stopPropagation()}\r\n            style={{ width: \"400px\" }}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <h3>프로필 사진 변경</h3>\r\n              <button\r\n                className=\"modal-close\"\r\n                onClick={() => setShowModal(false)}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>새로운 프로필 사진을 업로드하세요.</p>\r\n              <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n              {/* 모달 내 미리보기 */}\r\n              {previewImageUrl && (\r\n                <div style={{ marginTop: \"15px\", textAlign: \"center\" }}>\r\n                  <img\r\n                    src={previewImageUrl}\r\n                    alt=\"미리보기\"\r\n                    style={{\r\n                      maxWidth: \"100px\",\r\n                      maxHeight: \"100px\",\r\n                      borderRadius: \"50%\",\r\n                      objectFit: \"cover\",\r\n                    }}\r\n                  />\r\n                  <p\r\n                    style={{\r\n                      fontSize: \"0.8em\",\r\n                      color: \"#555\",\r\n                      marginTop: \"5px\",\r\n                    }}\r\n                  >\r\n                    선택된 이미지 미리보기\r\n                  </p>\r\n                </div>\r\n              )}\r\n              {newProfileImageFile && (\r\n                <p style={{ marginTop: \"10px\", fontSize: \"0.9em\" }}>\r\n                  선택된 파일: {newProfileImageFile.name}\r\n                </p>\r\n              )}\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"modal-btn primary\"\r\n                onClick={handleImageSelectComplete}\r\n              >\r\n                사진 선택 완료\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"modal-btn\"\r\n                onClick={() => {\r\n                  setShowModal(false);\r\n                  setNewProfileImageFile(null);\r\n                  setPreviewImageUrl(null);\r\n                }}\r\n              >\r\n                취소\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPageEditProfile;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\myPage\\MyPageEditPw.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'submitStatus' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"submitStatus"},"fix":{"range":[896,908],"text":""},"desc":"Remove unused variable 'submitStatus'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":65,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":183,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":183,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./MyPageWithdrawal.css\";\r\nimport \"./MyPageEditPw.css\";\r\nimport MyPageSideBar from \"./MyPageSideBar\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport useAuthStore from \"../../store/useAuthStore\";\r\n\r\nconst passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,20}$/;\r\n\r\n\r\nconst MyPageEditPw = () => {\r\n  const [passwordData, setPasswordData] = useState({\r\n    currentPassword: \"\",\r\n    newPassword: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const [currentPwStatus, setCurrentPwStatus] = useState(\"\"); // \"empty\" | \"checking\" | \"matched\" | \"unmatched\"\r\n  const [newPwStatus, setNewPwStatus] = useState(\"\"); // \"empty\" | \"valid\" | \"invalid\"\r\n  const [confirmPwStatus, setConfirmPwStatus] = useState(\"\"); // \"empty\" | \"matched\" | \"unmatched\"\r\n  const [submitMessage, setSubmitMessage] = useState(\"\");\r\n  const [submitStatus, setSubmitStatus] = useState(\"\"); // success | error\r\n\r\n  const currentPwTimeout = useRef(null);\r\n\r\n  const location = useLocation();\r\n  const { name, profileImageUrl } = location.state || {};\r\n\r\n  const navigate = useNavigate();\r\n  const { member } = useAuthStore();\r\n\r\n  // 현재 비밀번호 일치 확인\r\n  useEffect(() => {\r\n    const currentPassword = passwordData.currentPassword;\r\n    setSubmitMessage(\"\");\r\n    setSubmitStatus(\"\");\r\n\r\n    if (!currentPassword) {\r\n      setCurrentPwStatus(\"empty\");\r\n      return;\r\n    }\r\n\r\n    if (submitMessage) {\r\n      alert(submitMessage);\r\n    }\r\n\r\n\r\n\r\n    setCurrentPwStatus(\"checking\");\r\n    if (currentPwTimeout.current) clearTimeout(currentPwTimeout.current);\r\n    currentPwTimeout.current = setTimeout(async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8080/mypage/check-current-password\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          credentials: \"include\",\r\n          body: JSON.stringify({ password: currentPassword }),\r\n        });\r\n        const data = await response.json();\r\n        if (response.ok && data.match === true) {\r\n          setCurrentPwStatus(\"matched\");\r\n        } else {\r\n          setCurrentPwStatus(\"unmatched\");\r\n        }\r\n      } catch (e) {\r\n        setCurrentPwStatus(\"unmatched\");\r\n      }\r\n    }, 400);\r\n\r\n    return () => {\r\n      if (currentPwTimeout.current) clearTimeout(currentPwTimeout.current);\r\n    };\r\n  }, [passwordData.currentPassword, submitMessage]);\r\n\r\n  // 새 비밀번호 유효성 체크\r\n  useEffect(() => {\r\n    setSubmitMessage(\"\");\r\n    setSubmitStatus(\"\");\r\n    if (!passwordData.newPassword) {\r\n      setNewPwStatus(\"empty\");\r\n    } else if (passwordRegex.test(passwordData.newPassword)) {\r\n      setNewPwStatus(\"valid\");\r\n    } else {\r\n      setNewPwStatus(\"invalid\");\r\n    }\r\n  }, [passwordData.newPassword]);\r\n\r\n  // 새 비밀번호 확인 일치 여부 체크\r\n  useEffect(() => {\r\n    setSubmitMessage(\"\");\r\n    setSubmitStatus(\"\");\r\n    if (!passwordData.confirmPassword) {\r\n      setConfirmPwStatus(\"empty\");\r\n    } else if (passwordData.newPassword === passwordData.confirmPassword) {\r\n      setConfirmPwStatus(\"matched\");\r\n    } else {\r\n      setConfirmPwStatus(\"unmatched\");\r\n    }\r\n  }, [passwordData.newPassword, passwordData.confirmPassword]);\r\n\r\n  // 입력 핸들러\r\n  const handlePasswordChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setPasswordData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setSubmitMessage(\"\");\r\n    setSubmitStatus(\"\");\r\n\r\n    const { currentPassword, newPassword, confirmPassword } = passwordData;\r\n\r\n    if (!member) {\r\n      setSubmitMessage(\"로그인이 필요한 서비스입니다.\");\r\n      setSubmitStatus(\"error\");\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n\r\n    // 필수 입력 체크\r\n    if (!currentPassword || !newPassword || !confirmPassword) {\r\n      setSubmitMessage(\"모든 필드를 입력해주세요.\");\r\n      setSubmitStatus(\"error\");\r\n      return;\r\n    }\r\n\r\n    // 현재 비밀번호 일치\r\n    if (currentPwStatus !== \"matched\") {\r\n      setSubmitMessage(\"현재 비밀번호가 일치하지 않습니다.\");\r\n      setSubmitStatus(\"error\");\r\n      return;\r\n    }\r\n\r\n    // 새 비밀번호 유효성\r\n    if (newPwStatus !== \"valid\") {\r\n      setSubmitMessage(\"비밀번호는 영문자+숫자 조합 6~20자로 입력하세요.\");\r\n      setSubmitStatus(\"error\");\r\n      return;\r\n    }\r\n\r\n    // 새 비밀번호 일치\r\n    if (confirmPwStatus !== \"matched\") {\r\n      setSubmitMessage(\"비밀번호 확인이 일치하지 않습니다.\");\r\n      setSubmitStatus(\"error\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/mypage/change-password\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          credentials: \"include\",\r\n          body: JSON.stringify({\r\n            currentPassword,\r\n            newPassword,\r\n            confirmPassword,\r\n          }),\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSubmitMessage(\"비밀번호가 성공적으로 변경되었습니다. 다시 로그인해주세요.\");\r\n        setSubmitStatus(\"success\");\r\n        setTimeout(() => {\r\n          localStorage.clear();\r\n          navigate(\"/\");\r\n        }, 1500);\r\n      } else {\r\n        alert(data.message || \"비밀번호 변경 실패\");\r\n        setSubmitMessage(data.message || \"비밀번호 변경 실패\");\r\n        setSubmitStatus(\"error\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"네트워크 오류 또는 서버 오류가 발생했습니다.\");\r\n      setSubmitMessage(\"네트워크 오류 또는 서버 오류가 발생했습니다.\");\r\n      setSubmitStatus(\"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <main className=\"main-content\">\r\n        <MyPageSideBar\r\n          name={name}\r\n          profileImageUrl={profileImageUrl}\r\n        />\r\n        <section className=\"profile-main\">\r\n          <div className=\"profile-header\">\r\n            <h1>비밀번호 수정</h1>\r\n            <p>\r\n              현재 비밀번호가 일치하는 경우 새 비밀번호로 변경할 수 있습니다.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"password-content\">\r\n            <form className=\"password-form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n              <div className=\"password-form-row\">\r\n                <label>현재 비밀번호</label>\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"currentPassword\"\r\n                  value={passwordData.currentPassword}\r\n                  onChange={handlePasswordChange}\r\n                  placeholder=\"현재 비밀번호를 입력하세요\"\r\n                  autoComplete=\"off\"\r\n                />\r\n                {currentPwStatus === \"matched\" && (\r\n                  <p className=\"nickname-message success\">현재 비밀번호가 일치합니다.</p>\r\n                )}\r\n                {currentPwStatus === \"unmatched\" && passwordData.currentPassword && (\r\n                  <p className=\"nickname-message error\">현재 비밀번호가 일치하지 않습니다.</p>\r\n                )}\r\n                {currentPwStatus === \"checking\" && (\r\n                  <p className=\"nickname-message info\">비밀번호 확인 중...</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"password-form-row\">\r\n                <label>새 비밀번호</label>\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"newPassword\"\r\n                  value={passwordData.newPassword}\r\n                  onChange={handlePasswordChange}\r\n                  placeholder=\"새 비밀번호를 입력하세요\"\r\n                  autoComplete=\"off\"\r\n                />\r\n                {newPwStatus === \"valid\" && (\r\n                  <p className=\"nickname-message success\">사용 가능한 비밀번호입니다.</p>\r\n                )}\r\n                {newPwStatus === \"invalid\" && (\r\n                  <p className=\"nickname-message error\">비밀번호는 영문자+숫자 조합 6~20자여야 합니다.</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"password-form-row\">\r\n                <label>새 비밀번호 확인</label>\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"confirmPassword\"\r\n                  value={passwordData.confirmPassword}\r\n                  onChange={handlePasswordChange}\r\n                  placeholder=\"새 비밀번호를 다시 입력하세요\"\r\n                  autoComplete=\"off\"\r\n                />\r\n                {confirmPwStatus === \"matched\" && passwordData.confirmPassword && (\r\n                  <p className=\"nickname-message success\">비밀번호가 일치합니다.</p>\r\n                )}\r\n                {confirmPwStatus === \"unmatched\" && passwordData.confirmPassword && (\r\n                  <p className=\"nickname-message error\">비밀번호가 일치하지 않습니다.</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"password-form-buttons\">\r\n                <button type=\"submit\" className=\"submit-btn\">\r\n                  수정하기\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"cancel-btn\"\r\n                  onClick={() => {\r\n                    setPasswordData({\r\n                      currentPassword: \"\",\r\n                      newPassword: \"\",\r\n                      confirmPassword: \"\",\r\n                    });\r\n                    setCurrentPwStatus(\"empty\");\r\n                    setNewPwStatus(\"empty\");\r\n                    setConfirmPwStatus(\"empty\");\r\n                    setSubmitMessage(\"\");\r\n                    setSubmitStatus(\"\");\r\n                  }}\r\n                >\r\n                  취소하기\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPageEditPw;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\myPage\\MyPageMyComment.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\myPage\\MyPageMyPost.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\myPage\\MyPageSideBar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\myPage\\MyPageWithdrawal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\kcomponents\\myPage\\Pagination.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":19,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":19,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faAnglesLeft,\r\n  faAnglesRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Pagination.css\";\r\n\r\n/**\r\n * 페이지네이션 로직을 관리하는 커스텀 훅\r\n *\r\n * @param {Object} options\r\n * @param {number} options.totalItems - 전체 아이템 수\r\n * @param {number} [options.pageSize=10] - 페이지당 표시할 아이템 수\r\n * @param {number} [options.initialPage=1] - 초기 페이지 번호\r\n */\r\nexport const usePagination = ({\r\n  totalItems,\r\n  pageSize = 10,\r\n  initialPage = 1,\r\n}) => {\r\n  const [currentPage, setCurrentPage] = useState(initialPage);\r\n  const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n  const goToPage = useCallback(\r\n    (page) => {\r\n      if (page < 1 || page > totalPages) return;\r\n      setCurrentPage(page);\r\n    },\r\n    [totalPages]\r\n  );\r\n\r\n  const currentItems = useCallback(\r\n    (items) => {\r\n      const startIndex = (currentPage - 1) * pageSize;\r\n      return items.slice(startIndex, startIndex + pageSize);\r\n    },\r\n    [currentPage, pageSize]\r\n  );\r\n\r\n  return {\r\n    currentPage,\r\n    totalPages,\r\n    goToPage,\r\n    currentItems,\r\n    pageSize,\r\n  };\r\n};\r\n\r\n/**\r\n * 페이지네이션 컴포넌트\r\n *\r\n * @param {Object} props\r\n * @param {number} props.currentPage - 현재 페이지 번호\r\n * @param {number} props.totalPages - 전체 페이지 수\r\n * @param {Function} props.onPageChange - 페이지 변경 시 호출될 함수\r\n * @param {string} [props.className=\"\"] - 추가할 CSS 클래스명\r\n * @param {boolean} [props.showFirstLast=true] - 첫 페이지/마지막 페이지 버튼 표시 여부\r\n * @param {number} [props.maxVisiblePages=5] - 한 번에 표시할 페이지 버튼의 최대 개수\r\n *\r\n * @example\r\n * // 기본 사용법\r\n * <Pagination\r\n *   currentPage={currentPage}\r\n *   totalPages={totalPages}\r\n *   onPageChange={(page) => setCurrentPage(page)}\r\n * />\r\n *\r\n * // 커스텀 스타일과 옵션을 적용한 사용법\r\n * <Pagination\r\n *   currentPage={currentPage}\r\n *   totalPages={totalPages}\r\n *   onPageChange={handlePageChange}\r\n *   className=\"custom-pagination\"\r\n *   showFirstLast={false}\r\n *   maxVisiblePages={7}\r\n * />\r\n */\r\nfunction Pagination({\r\n  currentPage,\r\n  totalPages,\r\n  onPageChange,\r\n  className = \"\",\r\n  showFirstLast = true,\r\n  maxVisiblePages = 5,\r\n}) {\r\n  /**\r\n   * 현재 페이지를 중심으로 표시할 페이지 번호들을 계산\r\n   *\r\n   * 예시:\r\n   * - 전체 페이지가 10페이지이고 현재 페이지가 5페이지인 경우\r\n   * - maxVisiblePages가 5인 경우\r\n   * - 결과: [3, 4, 5, 6, 7]\r\n   *\r\n   * 특수한 경우 처리:\r\n   * 1. 현재 페이지가 처음/끝에 가까운 경우 시작/끝 페이지를 조정\r\n   * 2. 전체 페이지 수가 maxVisiblePages보다 작은 경우 모든 페이지를 표시\r\n   *\r\n   * @returns {number[]} 화면에 표시할 페이지 번호 배열\r\n   */\r\n  const getPageNumbers = () => {\r\n    const pageNumbers = [];\r\n    // 시작 페이지 계산: 현재 페이지를 중심으로 좌우로 페이지를 표시\r\n    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));\r\n    // 끝 페이지 계산: 시작 페이지부터 최대 표시 개수만큼 표시\r\n    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\r\n\r\n    // 끝 페이지가 최대 표시 개수보다 작은 경우, 시작 페이지를 조정\r\n    if (endPage - startPage + 1 < maxVisiblePages) {\r\n      startPage = Math.max(1, endPage - maxVisiblePages + 1);\r\n    }\r\n\r\n    // 페이지 번호 배열 생성\r\n    for (let i = startPage; i <= endPage; i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n\r\n    return pageNumbers;\r\n  };\r\n\r\n  return (\r\n    <div className={`pagination-container ${className}`.trim()}>\r\n      {/* 첫 페이지로 이동하는 버튼 */}\r\n      {showFirstLast && (\r\n        <button\r\n          type=\"button\"\r\n          className=\"pagination-btn nav\"\r\n          onClick={() => onPageChange(1)}\r\n          disabled={currentPage === 1}\r\n          aria-label=\"첫 페이지로 이동\"\r\n        >\r\n          <FontAwesomeIcon icon={faAnglesLeft} />\r\n        </button>\r\n      )}\r\n\r\n      {/* 이전 페이지로 이동하는 버튼 */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"pagination-btn nav\"\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n        disabled={currentPage === 1}\r\n        aria-label=\"이전 페이지로 이동\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleLeft} />\r\n      </button>\r\n\r\n      {/* 페이지 번호 버튼들 */}\r\n      {getPageNumbers().map((pageNum) => (\r\n        <button\r\n          type=\"button\"\r\n          key={pageNum}\r\n          className={`pagination-btn${currentPage === pageNum ? \" active\" : \"\"\r\n            }`}\r\n          onClick={() => onPageChange(pageNum)}\r\n          aria-label={`${pageNum} 페이지로 이동`}\r\n          aria-current={currentPage === pageNum ? \"page\" : undefined}\r\n        >\r\n          {pageNum}\r\n        </button>\r\n      ))}\r\n\r\n      {/* 다음 페이지로 이동하는 버튼 */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"pagination-btn nav\"\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n        disabled={currentPage === totalPages}\r\n        aria-label=\"다음 페이지로 이동\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleRight} />\r\n      </button>\r\n\r\n      {/* 마지막 페이지로 이동하는 버튼 */}\r\n      {showFirstLast && (\r\n        <button\r\n          type=\"button\"\r\n          className=\"pagination-btn nav\"\r\n          onClick={() => onPageChange(totalPages)}\r\n          disabled={currentPage === totalPages}\r\n          aria-label=\"마지막 페이지로 이동\"\r\n        >\r\n          <FontAwesomeIcon icon={faAnglesRight} />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\Admin.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminApplicationDetail.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminApplicationStatus.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setHasNewBooth'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setHasNewBooth]","fix":{"range":[915,917],"text":"[setHasNewBooth]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport \"./AdminApplicationStatus.css\";\r\nimport \"./AdminCommon.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport AdminSidebar from \"./AdminSideBar\";\r\nimport axiosApi from \"../api/axiosAPI\";\r\nimport { useAdminNotification } from \"./AdminNotificationContext.jsx\";\r\n\r\nconst AdminApplicationStatus = () => {\r\n  const [applications, setApplications] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 10;\r\n  const { setHasNewBooth } = useAdminNotification();\r\n\r\n  useEffect(() => {\r\n    async function fetchApplications() {\r\n      try {\r\n        const response = await axiosApi.get(\"/api/booth/requests\");\r\n        setApplications(response.data);\r\n      } catch {\r\n        alert(\"신청 목록을 불러오지 못했습니다.\");\r\n      }\r\n    }\r\n    fetchApplications();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setHasNewBooth(false);\r\n  }, []);\r\n\r\n  // 페이지네이션 계산\r\n  const totalPages = Math.ceil(applications.length / itemsPerPage);\r\n  const pagedApplications = applications.slice(\r\n    (currentPage - 1) * itemsPerPage,\r\n    currentPage * itemsPerPage\r\n  );\r\n\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const renderPagination = () => {\r\n    const pages = [];\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      pages.push(\r\n        <button\r\n          key={i}\r\n          className={`pagination-btn ${currentPage === i ? \"active\" : \"\"}`}\r\n          onClick={() => handlePageChange(i)}\r\n        >\r\n          {i}\r\n        </button>\r\n      );\r\n    }\r\n    return pages;\r\n  };\r\n\r\n  // 상세보기 페이지로 이동\r\n  const navigate = useNavigate();\r\n  const handleGotoDetail = (boothNo) => {\r\n    navigate(\"/admin/appDetail\", { state: { boothNo } });\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-management-container\">\r\n      <div className=\"management-content\">\r\n        {/* Sidebar */}\r\n        <AdminSidebar />\r\n        <main className=\"admin-main\">\r\n          <div className=\"admin-header\">\r\n            <h1 className=\"admin-title\">신청 현황</h1>\r\n          </div>\r\n\r\n          <div className=\"status-content\">\r\n            <table className=\"application-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>신청자명</th>\r\n                  <th>신청유형</th>\r\n                  <th>신청 축제</th>\r\n                  <th>상태</th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {pagedApplications.map((application) => (\r\n                  <tr key={application.boothNo}>\r\n                    <td>{application.applicantName || application.name}</td>\r\n                    <td>\r\n                      {application.boothType === 1\r\n                        ? \"플리마켓\"\r\n                        : application.boothType === 2\r\n                        ? \"푸드트럭\"\r\n                        : \"-\"}\r\n                    </td>\r\n                    <td>{application.contentTitle}</td>\r\n                    <td>\r\n                      {application.boothAccept === \"Y\" ? \"수락완료\" : \"대기\"}\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        className=\"btn-detail\"\r\n                        onClick={() => handleGotoDetail(application.boothNo)}\r\n                      >\r\n                        내용보기\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n\r\n            <div className=\"pagination\">\r\n              <button\r\n                className=\"pagination-btn nav-btn\"\r\n                onClick={() => handlePageChange(Math.max(1, currentPage - 1))}\r\n              >\r\n                ‹\r\n              </button>\r\n              {renderPagination()}\r\n              <button\r\n                className=\"pagination-btn nav-btn\"\r\n                onClick={() =>\r\n                  handlePageChange(Math.min(totalPages, currentPage + 1))\r\n                }\r\n              >\r\n                ›\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminApplicationStatus;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminBoardManagement.jsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPosts]","fix":{"range":[1867,1869],"text":"[fetchPosts]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminBoardWrite.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminCreateAccount.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminCustomerReply.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminCustomerReportDetail.jsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDetail'. Either include it or remove the dependency array.","line":19,"column":6,"nodeType":"ArrayExpression","endLine":19,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDetail, reportNo]","fix":{"range":[671,681],"text":"[fetchDetail, reportNo]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminCustomerService.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'setHasNewInquiry' and 'setHasNewReport'. Either include them or remove the dependency array.","line":110,"column":6,"nodeType":"ArrayExpression","endLine":110,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setHasNewInquiry, setHasNewReport]","fix":{"range":[3034,3036],"text":"[setHasNewInquiry, setHasNewReport]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport \"./AdminCustomerService.css\";\r\nimport \"./AdminCommon.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport AdminSidebar from \"./AdminSideBar\";\r\nimport Pagination, { usePagination } from \"./Pagination\";\r\nimport { useAdminNotification } from \"./AdminNotificationContext.jsx\";\r\nimport axiosApi from \"../api/axiosAPI\";\r\n\r\nconst AdminCustomerService = () => {\r\n  const [inquiries, setInquiries] = useState([]);\r\n  const [reports, setReports] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [inquiryLoading, setInquiryLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n  const { setHasNewReport } = useAdminNotification();\r\n  const { setHasNewInquiry } = useAdminNotification();\r\n\r\n  // 문의내역 페이지네이션 설정\r\n  const inquiryPagination = usePagination({\r\n    totalItems: inquiries.length,\r\n    pageSize: 3, // 페이지당 3개씩 표시\r\n    initialPage: 1,\r\n  });\r\n\r\n  // 신고내역 페이지네이션 설정\r\n  const reportPagination = usePagination({\r\n    totalItems: reports.length,\r\n    pageSize: 3, // 페이지당 3개씩 표시\r\n    initialPage: 1,\r\n  });\r\n\r\n  // 고객센터 문의내역 조회\r\n  const fetchInquiries = async () => {\r\n    try {\r\n      setInquiryLoading(true);\r\n      setError(null);\r\n\r\n      const response = await axiosApi.get(\r\n        \"http://localhost:8080/api/customer/boards\",\r\n        {\r\n          params: {\r\n            page: 1,\r\n            size: 100, // 충분한 데이터를 가져오기 위해 큰 값 설정\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const data = response.data;\r\n\r\n        // 백엔드에서 inquiryList로 데이터를 보내고 있음\r\n        if (data.inquiryList && Array.isArray(data.inquiryList)) {\r\n          setInquiries(data.inquiryList);\r\n        } else if (data.content && Array.isArray(data.content)) {\r\n          setInquiries(data.content);\r\n        } else if (Array.isArray(data)) {\r\n          setInquiries(data);\r\n        } else {\r\n          setInquiries([]);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"문의내역 조회 실패:\", error);\r\n      setError(\"문의내역을 불러오는데 실패했습니다.\");\r\n      setInquiries([]);\r\n    } finally {\r\n      setInquiryLoading(false);\r\n    }\r\n  };\r\n\r\n  // 신고 목록 조회\r\n  const fetchReports = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const response = await axiosApi.get(\"/api/reports\");\r\n\r\n      if (response.status === 200) {\r\n        const data = response.data;\r\n        if (Array.isArray(data)) {\r\n          setReports(data);\r\n        } else {\r\n          setReports([]);\r\n        }\r\n      } else {\r\n        setReports([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"신고 목록 조회 중 오류:\", error);\r\n\r\n      // 500 에러인 경우 서버 문제로 간주하고 빈 배열로 설정\r\n      if (error.response && error.response.status === 500) {\r\n        setReports([]);\r\n      } else {\r\n        setReports([]);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchInquiries();\r\n    fetchReports();\r\n    setHasNewReport(false);\r\n    setHasNewInquiry(false);\r\n  }, []);\r\n\r\n  const handleReply = (inquiry) => {\r\n    console.log(\"답변하기:\", inquiry);\r\n    navigate(\"/admin/reply\", { state: { inquiry } });\r\n  };\r\n\r\n  const handleDeleteInquiry = async (inquiry) => {\r\n    const confirmDelete = window.confirm(\r\n      `문의글 \"${inquiry.boardTitle}\"을(를) 삭제하시겠습니까?`\r\n    );\r\n\r\n    if (confirmDelete) {\r\n      try {\r\n        const response = await axiosApi.delete(\r\n          `http://localhost:8080/api/customer/boards/${inquiry.boardNo}`\r\n        );\r\n        if (response.status === 200) {\r\n          alert(\"문의글이 삭제되었습니다.\");\r\n          fetchInquiries(); // 목록 새로고침\r\n        }\r\n      } catch (error) {\r\n        console.error(\"문의글 삭제 실패:\", error);\r\n        alert(\"문의글 삭제에 실패했습니다.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleReportDetail = (reportNo) => {\r\n    console.log(\"내용보기:\", reportNo);\r\n    navigate(`/admin/report-detail/${reportNo}`);\r\n  };\r\n\r\n  // 현재 페이지에 표시할 문의내역 가져오기\r\n  const currentInquiries = inquiryPagination.currentItems(inquiries);\r\n\r\n  // 현재 페이지에 표시할 신고내역 가져오기\r\n  const currentReports = reportPagination.currentItems(reports);\r\n\r\n  // 문의 상태에 따른 배지 스타일\r\n  const getStatusBadge = (status) => {\r\n    switch (status) {\r\n      case \"대기중\":\r\n        return <span className=\"status-badge waiting\">대기중</span>;\r\n      case \"답변완료\":\r\n        return <span className=\"status-badge completed\">답변완료</span>;\r\n      case \"처리중\":\r\n        return <span className=\"status-badge processing\">처리중</span>;\r\n      default:\r\n        return <span className=\"status-badge waiting\">대기중</span>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-management-container\">\r\n      <div className=\"management-content\">\r\n        {/* Sidebar */}\r\n        <AdminSidebar />\r\n        <main className=\"admin-main\">\r\n          <div className=\"admin-header\">\r\n            <h1 className=\"admin-title\">고객센터 관리</h1>\r\n          </div>\r\n\r\n          <div className=\"customer-service-container\">\r\n            {/* 문의내역 섹션 */}\r\n            <section className=\"inquiry-section\">\r\n              <h2 className=\"section-title\">문의내역</h2>\r\n\r\n              {inquiryLoading ? (\r\n                <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n                  문의내역을 불러오는 중...\r\n                </div>\r\n              ) : error ? (\r\n                <div\r\n                  style={{ textAlign: \"center\", padding: \"20px\", color: \"red\" }}\r\n                >\r\n                  {error}\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  <div className=\"inquiry-list paginated-list\">\r\n                    {currentInquiries.length > 0 ? (\r\n                      currentInquiries.map((inquiry) => (\r\n                        <div key={inquiry.boardNo} className=\"inquiry-item\">\r\n                          <div className=\"inquiry-header\">\r\n                            <span className=\"inquiry-id\">\r\n                              #{inquiry.boardNo}\r\n                            </span>\r\n                            <span className=\"inquiry-title\">\r\n                              {inquiry.boardTitle}\r\n                            </span>\r\n                            <div className=\"inquiry-badges\">\r\n                              {getStatusBadge(inquiry.inquiryStatus)}\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"inquiry-meta\">\r\n                            <span className=\"inquiry-category\">\r\n                              [{inquiry.category}]\r\n                            </span>\r\n                            <span className=\"inquiry-author\">\r\n                              {inquiry.memberNickname}\r\n                            </span>\r\n                            <span className=\"inquiry-date\">\r\n                              {new Date(inquiry.boardCreateDate).toLocaleString(\r\n                                \"ko-KR\"\r\n                              )}\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"inquiry-actions\">\r\n                            <button\r\n                              className=\"admin-action-btn admin-delete-btn\"\r\n                              onClick={() => handleDeleteInquiry(inquiry)}\r\n                            >\r\n                              삭제\r\n                            </button>\r\n                            <button\r\n                              className=\"admin-action-btn admin-reply-btn\"\r\n                              onClick={() => handleReply(inquiry)}\r\n                            >\r\n                              {inquiry.inquiryStatus === \"답변완료\"\r\n                                ? \"답변 수정하기\"\r\n                                : \"답변하기\"}\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      ))\r\n                    ) : (\r\n                      <div\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          padding: \"20px\",\r\n                          color: \"#666\",\r\n                        }}\r\n                      >\r\n                        등록된 문의가 없습니다.\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* 페이지네이션 */}\r\n                  {inquiries.length > 0 && (\r\n                    <Pagination\r\n                      currentPage={inquiryPagination.currentPage}\r\n                      totalPages={inquiryPagination.totalPages}\r\n                      onPageChange={inquiryPagination.goToPage}\r\n                      className=\"custom-pagination\"\r\n                      showFirstLast={true}\r\n                      maxVisiblePages={5}\r\n                    />\r\n                  )}\r\n                </>\r\n              )}\r\n            </section>\r\n\r\n            {/* 신고내역 섹션 */}\r\n            <section className=\"report-section\">\r\n              <h2 className=\"section-title\">신고내역</h2>\r\n\r\n              {loading ? (\r\n                <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n                  로딩 중...\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  <div className=\"report-list paginated-list\">\r\n                    {currentReports.length > 0 ? (\r\n                      currentReports.map((report) => (\r\n                        <div key={report.reportNo} className=\"report-item\">\r\n                          <div className=\"inquiry-header\">\r\n                            <span className=\"inquiry-id\">\r\n                              #{report.reportNo}\r\n                            </span>\r\n                            <span className=\"inquiry-title\">\r\n                              {report.reportType === 0 ? \"게시글\" : \"댓글\"} 신고\r\n                              - {report.reportReason}\r\n                            </span>\r\n                            <span\r\n                              className={`status-badge ${\r\n                                report.reportStatus === 1\r\n                                  ? \"completed\"\r\n                                  : \"waiting\"\r\n                              }`}\r\n                              style={{ marginLeft: \"8px\" }}\r\n                            >\r\n                              {report.reportStatus === 1 ? \"처리완료\" : \"대기\"}\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"inquiry-meta\">\r\n                            <span className=\"inquiry-author\">\r\n                              신고자: {report.reporterNo}\r\n                            </span>\r\n                            <span className=\"inquiry-date\">\r\n                              {report.reportTime}\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"inquiry-actions\">\r\n                            <button\r\n                              className=\"admin-action-btn admin-view-btn\"\r\n                              onClick={() =>\r\n                                handleReportDetail(report.reportNo)\r\n                              }\r\n                            >\r\n                              내용보기\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      ))\r\n                    ) : (\r\n                      <div\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          padding: \"20px\",\r\n                          color: \"#666\",\r\n                        }}\r\n                      >\r\n                        등록된 신고가 없습니다.\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* 페이지네이션 */}\r\n                  {reports.length > 0 && (\r\n                    <Pagination\r\n                      currentPage={reportPagination.currentPage}\r\n                      totalPages={reportPagination.totalPages}\r\n                      onPageChange={reportPagination.goToPage}\r\n                      className=\"custom-pagination\"\r\n                      showFirstLast={true}\r\n                      maxVisiblePages={5}\r\n                    />\r\n                  )}\r\n                </>\r\n              )}\r\n            </section>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminCustomerService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminDeleteMember.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"isLoading"},"fix":{"range":[475,484],"text":""},"desc":"Remove unused variable 'isLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setIsLoading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":12,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"setIsLoading"},"fix":{"range":[484,498],"text":""},"desc":"Remove unused variable 'setIsLoading'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { Search, Star } from \"lucide-react\";\r\nimport \"./AdminDeleteMember.css\";\r\nimport \"./AdminCommon.css\";\r\nimport AdminSidebar from \"./AdminSideBar\";\r\nimport axiosApi from \"../api/axiosAPI\";\r\n\r\nconst AdminDeleteMember = () => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [selectedMembers, setSelectedMembers] = useState([]);\r\n  const [withdrawnMembers, setWithdrawnMembers] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // 탈퇴 회원 데이터\r\n  const fetchWithdrawMember = async () => {\r\n    try {\r\n      const resp = await axiosApi.get(\"/admin/withdraw\");\r\n      const data = resp.data;\r\n\r\n      if (resp.status == 200) {\r\n        console.log(data);\r\n        setWithdrawnMembers(data);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"탈퇴 회원 불러오기 에러 : \", err);\r\n    }\r\n  };\r\n\r\n  // 체크박스 선택/해제 상태 반영\r\n  const handleCheckboxChange = (memberNo) => {\r\n    setSelectedMembers((prev) =>\r\n      prev.includes(memberNo)\r\n        ? prev.filter((number) => number !== memberNo)\r\n        : [...prev, memberNo]\r\n    );\r\n\r\n    console.log(\"selectedMembers : \", selectedMembers);\r\n  };\r\n\r\n  // 체크박스 전체선택\r\n  const handleSelectAll = () => {\r\n    if (selectedMembers.length === withdrawnMembers.length) {\r\n      setSelectedMembers([]);\r\n    } else {\r\n      setSelectedMembers(withdrawnMembers.map((member) => member.memberNo));\r\n    }\r\n    console.log(\"selectedMembers : \", selectedMembers);\r\n  };\r\n\r\n  // filteredMembers : id, 닉네임, 이름으로 검색된 회원들\r\n  const filteredMembers = (withdrawnMembers || []).filter((member) => {\r\n    if (!member) return false;\r\n    return (\r\n      member.id?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      member.name?.includes(searchTerm) ||\r\n      member.nickname?.includes(searchTerm)\r\n    );\r\n  });\r\n\r\n  // 삭제 버튼 클릭 시 회원 삭제\r\n  const handleClickDelete = async (memberNoList) => {\r\n    const isConfirmed = window.confirm(\r\n      \"회원을 영구 삭제 하시겠습니까? (복구 불가능)\"\r\n    );\r\n\r\n    if (!isConfirmed) return;\r\n    try {\r\n      const resp = await axiosApi.post(\"/admin/withdrawDelete\", memberNoList);\r\n      const data = resp.data;\r\n\r\n      if (resp.status == 200) {\r\n        console.log(data);\r\n        alert(data, \"명 삭제되었습니다.\");\r\n\r\n        setSelectedMembers([]);\r\n        fetchWithdrawMember();\r\n        return;\r\n      }\r\n\r\n      alert(\"삭제 실패했습니다.\");\r\n    } catch (err) {\r\n      console.error(\"회원 삭제하기 에러 : \", err);\r\n    }\r\n  };\r\n\r\n  // 복구 버튼 클릭 시 회원 복구\r\n  const handleClickRestore = async (memberNoList) => {\r\n    const isConfirmed = window.confirm(\"해당 회원을 복구하시겠습니까?\");\r\n\r\n    if (!isConfirmed) return;\r\n\r\n    try {\r\n      const resp = await axiosApi.post(\"/admin/withdrawRestore\", memberNoList);\r\n      const data = resp.data;\r\n\r\n      if (resp.status == 200) {\r\n        console.log(data);\r\n        alert(\"복구되었습니다.\");\r\n\r\n        setSelectedMembers([]);\r\n        fetchWithdrawMember();\r\n\r\n        return;\r\n      }\r\n\r\n      alert(\"복구 실패\");\r\n    } catch (err) {\r\n      console.error(\"회원 복구하기 에러 : \", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWithdrawMember();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"admin-management-container\">\r\n      <div className=\"management-content\">\r\n        {/* Sidebar */}\r\n        <AdminSidebar />\r\n        <div className=\"content\">\r\n          {/* Main Content */}\r\n          <main className=\"admin-main\">\r\n            <div className=\"admin-header\">\r\n              <h1 className=\"admin-title\">회원 탈퇴 및 삭제</h1>\r\n            </div>\r\n\r\n            {/* Search Section */}\r\n            <div className=\"admin-search-section\">\r\n              <div className=\"admin-search-container\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"검색할 회원 입력\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"admin-search-input\"\r\n                />\r\n                <button className=\"admin-search-button\">\r\n                  <Search className=\"admin-search-icon\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Member List Section */}\r\n            <div className=\"member-list-section\">\r\n              <div className=\"admin-section-header\">\r\n                <h2 className=\"admin-section-title\">탈퇴 회원 정보</h2>\r\n                {/* 체크박스로 선택한 회원 삭제/복구 */}\r\n                <div className=\"button-group\">\r\n                  <button\r\n                    className=\"action-button delete-button\"\r\n                    disabled={selectedMembers.length === 0}\r\n                    onClick={() => handleClickDelete(selectedMembers)}\r\n                  >\r\n                    선택 회원 삭제\r\n                  </button>\r\n                  <button\r\n                    className=\"action-button restore-button\"\r\n                    disabled={selectedMembers.length === 0}\r\n                    onClick={() => handleClickRestore(selectedMembers)}\r\n                  >\r\n                    선택 회원 복구\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"member-list-container\">\r\n                <div className=\"member-list-header\">\r\n                  <div className=\"header-row\">\r\n                    <div className=\"header-cell checkbox-cell\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={\r\n                          selectedMembers.length === withdrawnMembers.length &&\r\n                          withdrawnMembers.length > 0\r\n                        }\r\n                        onChange={handleSelectAll}\r\n                        className=\"member-checkbox\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"header-cell\">아이디</div>\r\n                    <div className=\"header-cell\">이름</div>\r\n                    <div className=\"header-cell\">닉네임</div>\r\n                    <div className=\"header-cell\">탈퇴시간</div>\r\n                    <div className=\"header-cell action-cell\">삭제</div>\r\n                    <div className=\"header-cell action-cell\">복구</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"member-list-body\">\r\n                  {filteredMembers?.length > 0 ? (\r\n                    filteredMembers.map((member) => (\r\n                      <div key={member.id} className=\"member-row\">\r\n                        <div className=\"member-cell checkbox-cell\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={selectedMembers.includes(member.memberNo)}\r\n                            onChange={() =>\r\n                              handleCheckboxChange(member.memberNo)\r\n                            }\r\n                            className=\"member-checkbox\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"member-cell\">{member.id}</div>\r\n                        <div className=\"member-cell\">{member.name}</div>\r\n                        <div className=\"member-cell\">{member.nickname}</div>\r\n                        <div className=\"member-cell\">{member.withdrawDate}</div>\r\n                        <div className=\"member-cell action-cell\">\r\n                          <button\r\n                            className=\"action-button delete-button\"\r\n                            onClick={() => handleClickDelete([member.memberNo])}\r\n                          >\r\n                            삭제\r\n                          </button>\r\n                        </div>\r\n                        <div className=\"member-cell action-cell\">\r\n                          <button\r\n                            className=\"action-button restore-button\"\r\n                            onClick={() =>\r\n                              handleClickRestore([member.memberNo])\r\n                            }\r\n                          >\r\n                            복구\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <h2 style={{ textAlign: \"center\", marginTop: \"100px\" }}>\r\n                      탈퇴한 회원이 없습니다.\r\n                    </h2>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDeleteMember;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminMain.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminNotificationContext.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":5,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":5,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\nconst AdminNotificationContext = createContext();\r\n\r\nexport function useAdminNotification() {\r\n  return useContext(AdminNotificationContext);\r\n}\r\n\r\nexport function AdminNotificationProvider({ children }) {\r\n  const [hasNewReport, setHasNewReport] = useState(false);\r\n  const [hasNewBooth, setHasNewBooth] = useState(false);\r\n  const [hasNewInquiry, setHasNewInquiry] = useState(false);\r\n\r\n  console.log(\"새로운 방식 AdminNotificationProvider 렌더링!\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"새로운 방식 useEffect 실행!\");\r\n\r\n    // 네이티브 WebSocket 사용 (SockJS 없이)\r\n    let ws = null;\r\n\r\n    const connectWebSocket = () => {\r\n      try {\r\n        console.log(\r\n          \"네이티브 WebSocket 연결 시도: ws://localhost:8080/ws/websocket\"\r\n        );\r\n\r\n        // 직접 WebSocket 연결 (SockJS 우회)\r\n        ws = new WebSocket(\"ws://localhost:8080/ws/websocket\");\r\n\r\n        ws.onopen = function (event) {\r\n          console.log(\"네이티브 WebSocket 연결 성공!\", event);\r\n\r\n          // STOMP CONNECT 프레임 수동 전송\r\n          const connectFrame = \"CONNECT\\naccept-version:1.0,1.1,2.0\\n\\n\\x00\";\r\n          ws.send(connectFrame);\r\n        };\r\n\r\n        ws.onmessage = function (event) {\r\n          console.log(\"WebSocket 메시지 받음:\", event.data);\r\n\r\n          if (event.data.includes(\"CONNECTED\")) {\r\n            // 구독 프레임 전송\r\n            const subscribeFrame =\r\n              \"SUBSCRIBE\\nid:sub-0\\ndestination:/topic/admin-alerts\\n\\n\\x00\";\r\n            ws.send(subscribeFrame);\r\n            console.log(\"/topic/admin-alerts 구독 요청 전송\");\r\n            return;\r\n          }\r\n          if (event.data.includes(\"/topic/admin-alerts\")) {\r\n            let isBooth = false;\r\n            try {\r\n              const alert = JSON.parse(event.data.split(\"\\n\").pop());\r\n              if (alert.message?.includes(\"부스\")) isBooth = true;\r\n            } catch {\r\n              if (event.data.includes(\"부스\")) isBooth = true;\r\n            }\r\n            if (isBooth) setHasNewBooth(true);\r\n            // 기존 신고 처리도 유지\r\n            try {\r\n              const alert = JSON.parse(event.data.split(\"\\n\").pop());\r\n              if (alert.message?.includes(\"신고\")) setHasNewReport(true);\r\n              if (alert.message?.includes(\"문의\")) setHasNewInquiry(true);\r\n            } catch {\r\n              if (event.data.includes(\"신고\")) setHasNewReport(true);\r\n              if (event.data.includes(\"문의\")) setHasNewInquiry(true);\r\n            }\r\n          }\r\n        };\r\n\r\n        ws.onclose = function (event) {\r\n          console.log(\"WebSocket 연결 종료:\", event);\r\n\r\n          // 5초 후 재연결 시도\r\n          setTimeout(() => {\r\n            console.log(\"WebSocket 재연결 시도...\");\r\n            connectWebSocket();\r\n          }, 5000);\r\n        };\r\n\r\n        ws.onerror = function (error) {\r\n          console.error(\"WebSocket 에러:\", error);\r\n        };\r\n      } catch (error) {\r\n        console.error(\"WebSocket 생성 에러:\", error);\r\n      }\r\n    };\r\n\r\n    // 연결 시작\r\n    connectWebSocket();\r\n\r\n    // 클린업\r\n    return () => {\r\n      console.log(\"🧹 WebSocket 정리 중...\");\r\n      if (ws) {\r\n        ws.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <AdminNotificationContext.Provider\r\n      value={{\r\n        hasNewReport,\r\n        setHasNewReport,\r\n        hasNewBooth,\r\n        setHasNewBooth,\r\n        hasNewInquiry,\r\n        setHasNewInquiry,\r\n      }}\r\n    >\r\n      {children}\r\n    </AdminNotificationContext.Provider>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\AdminSideBar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\BoothList.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBoothList'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [contentId, fetchBoothList]","fix":{"range":[663,674],"text":"[contentId, fetchBoothList]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\r\nimport axiosApi from \"../api/axiosAPI\";\r\nimport \"./BoothList.css\";\r\n\r\nexport default function BoothList({ contentId }) {\r\n  const [boothList, setBoothList] = useState([]);\r\n\r\n  const fetchBoothList = async () => {\r\n    try {\r\n      const resp = await axiosApi.get(\"/festival/detail/BoothList\", {\r\n        params: {\r\n          contentId: contentId,\r\n        },\r\n      });\r\n\r\n      const data = resp.data;\r\n      if (resp.status == 200) {\r\n        setBoothList(data);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"축제 부스 리스트 소환 중 에러 발생 : \", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchBoothList();\r\n  }, [contentId]);\r\n\r\n  return (\r\n    <section className=\"detail-booth-section\">\r\n      {boothList != null && boothList.length > 0 && (\r\n        <>\r\n          <h3 className=\"section-title\">푸드트럭 & 플리마켓</h3>\r\n          <div className=\"booth-cards-container\">\r\n            {boothList.map((booth, index) => (\r\n              <div key={index} className=\"booth-card\">\r\n                <div className=\"booth-image-container\">\r\n                  <img\r\n                    src={booth.boothImg != null ? booth.boothImg : \"/logo.png\"}\r\n                    alt=\"대표사진\"\r\n                    className=\"booth-main-image\"\r\n                  />\r\n                </div>\r\n                <div className=\"booth-content\">\r\n                  <h4 className=\"booth-title\">{booth.applicantCompany}</h4>\r\n                  <p className=\"booth-description\">{booth.products}</p>\r\n                  <p className=\"booth-date\">\r\n                    {booth.boothStartDate}~{booth.boothEndDate}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\DetailWeatherAPI.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\EVChargeApi.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'evChargeList' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"evChargeList"},"fix":{"range":[162,174],"text":""},"desc":"Remove unused variable 'evChargeList'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\r\n\r\nconst EVChargeApi = ({ metroCode, cityCode }) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [evChargeList, setEvChargeList] = useState([]);\r\n  console.log(\"metroCode:\", metroCode);\r\n  console.log(\"cityCode:\", cityCode);\r\n\r\n  useEffect(() => {\r\n    const fetchEvCharge = async () => {\r\n      try {\r\n        const serviceKey = import.meta.env.VITE_EVCHARGE_API;\r\n\r\n        const url = `/kepco-api/openapi/v1/EVcharge.do?metroCd=11&cityCd=26&apiKey=${serviceKey}&returnType=json`;\r\n\r\n        const response = await fetch(url);\r\n        const respData = await response.json();\r\n        const items = respData?.data;\r\n\r\n        if (!items || !Array.isArray(items)) return;\r\n\r\n        const mapped = items.map((item) => ({\r\n          metro: item.metro,\r\n          city: item.city,\r\n          stnPlace: item.stnPlace,\r\n          stnAddr: item.stnAddr,\r\n          rapidCnt: item.rapidCnt,\r\n          slowCnt: item.slowCnt,\r\n          carType: item.carType,\r\n        }));\r\n\r\n        setEvChargeList(mapped);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error(\"충전소 정보 로드 실패:\", error);\r\n      }\r\n    };\r\n\r\n    fetchEvCharge();\r\n  }, [metroCode, cityCode]);\r\n\r\n  if (isLoading) {\r\n    return <h3>전기차 충전소 API 로딩중...</h3>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <KakaoMap center={{ lat: festival.mapy, lng: festival.mapx }} /> */}\r\n      <h1>하이하이 여기까지 잘왔어~</h1>\r\n\r\n      {/* <div className=\"festivals-grid\">\r\n        {evChargeList.map((charge) => (\r\n          <div>{charge.stnPlace}</div>\r\n        ))}\r\n      </div> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EVChargeApi;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\FestivalDetail.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchFestivalDetail', 'fetchFestivalImg', and 'fetchFestivals'. Either include them or remove the dependency array.","line":297,"column":6,"nodeType":"ArrayExpression","endLine":297,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [contentId, fetchFestivalDetail, fetchFestivalImg, fetchFestivals]","fix":{"range":[9049,9060],"text":"[contentId, fetchFestivalDetail, fetchFestivalImg, fetchFestivals]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  Calendar,\r\n  Phone,\r\n  Star,\r\n  ChevronRight,\r\n  MapPin,\r\n  Section,\r\n} from \"lucide-react\";\r\nimport \"./FestivalDetail.css\";\r\n\r\n// 모달 관련\r\nimport { X } from \"lucide-react\";\r\n\r\n// 슬라이더\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Navigation, Pagination } from \"swiper/modules\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/navigation\";\r\nimport \"swiper/css/pagination\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport PublicCarPark from \"./MapApi\";\r\nimport StayModal from \"./StayModal\";\r\nimport DetailWeather from \"./DetailWeatherAPI\";\r\nimport LikeButton from \"./LikeButton\";\r\nimport useAuthStore from \"../store/useAuthStore\";\r\nimport BoothList from \"./BoothList\";\r\n\r\n// 축제 상태 진행\r\nconst getFestivalStatus = (start, end) => {\r\n  const now = new Date();\r\n  const startDate = new Date(\r\n    `${start.slice(0, 4)}-${start.slice(4, 6)}-${start.slice(6, 8)}`\r\n  );\r\n  const endDate = new Date(\r\n    `${end.slice(0, 4)}-${end.slice(4, 6)}-${end.slice(6, 8)}`\r\n  );\r\n\r\n  if (now < startDate) return \"예정\";\r\n  else if (now > endDate) return \"종료\";\r\n  else return \"진행중\";\r\n};\r\n\r\n// 축제 디테일 페이지 시작\r\nconst FestivalDetail = () => {\r\n  const [festival, setFestival] = useState([]);\r\n  const [festivalDetail, setFestivalDetail] = useState([]);\r\n  const [festivalImg, setFestivalImg] = useState([]);\r\n  const [listFestival, setListFestival] = useState([]);\r\n  const [posterImg, setPosterImg] = useState([]);\r\n  const [listStay, setListStay] = useState([]);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [eventState, setEventState] = useState(\"\");\r\n  const { contentId } = useParams();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // 현재 로그인 상태인지 확인하기 위함\r\n  const { member } = useAuthStore();\r\n\r\n  // 숙소 관련 모달창 열기\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedStay, setSelectedStay] = useState(null);\r\n\r\n  // 지도 마커 클릭 시 정보 받아오기\r\n  const [selectedMarkerInfo, setSelectedMarkerInfo] = useState(null);\r\n\r\n  const handleMarkerClick = (markerData) => {\r\n    setSelectedMarkerInfo(markerData);\r\n    console.log(\"markerData : \", markerData);\r\n  };\r\n\r\n  // 슬라이더\r\n  const FestivalSwiper = () => {\r\n    return (\r\n      <Swiper\r\n        slidesPerView={3} // 기본 3장씩\r\n        spaceBetween={30}\r\n        loop={false} // 반복\r\n        navigation={false} // 양 사이드 화살표\r\n        pagination={{ clickable: true }}\r\n        modules={[Navigation, Pagination]}\r\n        className=\"mySwiper\"\r\n      /*       breakpoints={{\r\n    320: { slidesPerView: 1 },\r\n    640: { slidesPerView: 2 },\r\n    1024: { slidesPerView: 3 },\r\n  }} */\r\n      >\r\n        {festivalImg.map((img, idx) => (\r\n          <SwiperSlide key={idx}>\r\n            <img src={img.originimgurl} alt={`slide-${idx}`} />\r\n          </SwiperSlide>\r\n        ))}\r\n      </Swiper>\r\n    );\r\n  };\r\n\r\n  // 축제 정보 불러오기\r\n  const fetchFestivals = async () => {\r\n    try {\r\n      const serviceKey = import.meta.env.VITE_TOURAPI_KEY;\r\n\r\n      const url = `https://apis.data.go.kr/B551011/KorService2/detailCommon2?serviceKey=${serviceKey}&MobileOS=ETC&MobileApp=Festive&_type=json&contentId=${contentId}`;\r\n\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      const item = data?.response?.body?.items?.item;\r\n\r\n      if (!item) return;\r\n      setFestival(item[0]);\r\n    } catch (error) {\r\n      console.error(\"축제 정보 로드 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // 축제 소개 정보 불러오기\r\n  const fetchFestivalDetail = async () => {\r\n    try {\r\n      const serviceKey = import.meta.env.VITE_TOURAPI_KEY;\r\n\r\n      const url = `https://apis.data.go.kr/B551011/KorService2/detailIntro2?serviceKey=${serviceKey}&MobileApp=festive&MobileOS=ETC&_type=json&contentId=${contentId}&contentTypeId=15`;\r\n\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      const item = data?.response?.body?.items?.item;\r\n\r\n      if (!item) return;\r\n      setFestivalDetail(item[0]);\r\n      setEventState(\r\n        getFestivalStatus(item[0].eventstartdate, item[0].eventenddate)\r\n      );\r\n      console.log(eventState);\r\n    } catch (error) {\r\n      console.error(\"축제 소개 정보 로드 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // 축제 이미지 정보 불러오기\r\n  const fetchFestivalImg = async () => {\r\n    try {\r\n      const serviceKey = import.meta.env.VITE_TOURAPI_KEY;\r\n\r\n      const url = `https://apis.data.go.kr/B551011/KorService2/detailImage2?serviceKey=${serviceKey}&MobileApp=Festive&MobileOS=ETC&_type=json&contentId=${contentId}&imageYN=Y`;\r\n\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      const items = data?.response?.body?.items?.item;\r\n      if (!items || !Array.isArray(items)) return;\r\n\r\n      const mapped = items.map((item) => {\r\n        return {\r\n          contentid: item.contentid,\r\n          originimgurl: item.originimgurl,\r\n          imgname: item.imgname,\r\n          smallimageurl: item.smallimageurl,\r\n        };\r\n      });\r\n\r\n      // 축제 포스터\r\n      const poster = mapped.find((img) => img.imgname.includes(\"포스터\"));\r\n      let subImgs;\r\n      if (poster != null) {\r\n        subImgs = mapped.filter((img) => img !== poster);\r\n      } else {\r\n        subImgs = mapped;\r\n      }\r\n\r\n      setPosterImg(poster);\r\n      setFestivalImg(subImgs);\r\n      // console.log(festivalImg);\r\n    } catch (error) {\r\n      console.error(\"축제 이미지 정보 로드 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // 축제 리스트 (추천 축제를 위한 리스트)\r\n  const fetchFestivalList = async () => {\r\n    try {\r\n      const today = new Date();\r\n      const yyyyMMdd = today.toISOString().slice(0, 10).replace(/-/g, \"\");\r\n      const serviceKey = import.meta.env.VITE_TOURAPI_KEY;\r\n\r\n      const url = `https://apis.data.go.kr/B551011/KorService2/searchFestival2?serviceKey=${serviceKey}&MobileOS=ETC&MobileApp=Festive&_type=json&eventStartDate=${yyyyMMdd}&arrange=C&numOfRows=50&pageNo=1`;\r\n\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      const items = data?.response?.body?.items?.item;\r\n\r\n      if (!items || !Array.isArray(items)) return;\r\n\r\n      const mapped = items.map((item) => {\r\n        const start = item.eventstartdate;\r\n        const end = item.eventenddate;\r\n        return {\r\n          id: item.contentid,\r\n          title: item.title,\r\n          location: item.addr1 || \"장소 미정\",\r\n          date: `${start?.replace(\r\n            /(\\d{4})(\\d{2})(\\d{2})/,\r\n            \"$1.$2.$3\"\r\n          )} - ${end?.replace(/(\\d{4})(\\d{2})(\\d{2})/, \"$1.$2.$3\")}`,\r\n          image: item.firstimage || \"../../logo.png\",\r\n          startDate: start,\r\n          status: getFestivalStatus(start, end),\r\n        };\r\n      });\r\n\r\n      // 랜덤 셔플 후 3개 선택\r\n      const shuffled = [...mapped].sort(() => Math.random() - 0.5);\r\n      const randomThree = shuffled.slice(0, 3);\r\n      setListFestival(randomThree);\r\n    } catch (error) {\r\n      console.error(\"추천 축제 리스트 로드 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // 축제 클릭 핸들러\r\n  const handleFestivalClick = (festivalId) => {\r\n    // 실제로는 React Router로 상세페이지 이동\r\n    window.scrollTo(0, 0);\r\n    console.log(`축제 ${festivalId} 상세페이지로 이동`);\r\n    navigate(`/festival/detail/${festivalId}`);\r\n  };\r\n\r\n  // 숙박 정보\r\n  const fetchListStay = async ({ lDongRegnCd, lDongSignguCd }) => {\r\n    try {\r\n      const serviceKey = import.meta.env.VITE_TOURAPI_KEY;\r\n\r\n      const url = `https://apis.data.go.kr/B551011/KorService2/searchStay2?serviceKey=${serviceKey}&MobileApp=festive&MobileOS=ETC&pageNo=1&numOfRows=10&arrange=C&_type=json&lDongRegnCd=${lDongRegnCd}&lDongSignguCd=${lDongSignguCd}`;\r\n\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      const items = data?.response?.body?.items?.item;\r\n      if (!items || !Array.isArray(items)) return;\r\n      const mapped = items.map((item) => {\r\n        return {\r\n          id: item.contentid,\r\n          title: item.title,\r\n          addr1: item.addr1,\r\n          addr2: item.addr2,\r\n          image: item.firstimage || \"../../logo.png\",\r\n          tel: item.tel,\r\n        };\r\n      });\r\n      // 랜덤 셔플 후 3개 선택\r\n      const shuffled = [...mapped].sort(() => Math.random() - 0.5);\r\n      const randomThree = shuffled.slice(0, 3);\r\n      setListStay(randomThree);\r\n    } catch (error) {\r\n      console.error(\"숙박 정보 로드 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // handleCardClick 함수 정의\r\n  const handleCardClick = (stay) => {\r\n    setSelectedStay(stay);\r\n    setIsOpen(true);\r\n  };\r\n\r\n  // 모달 닫기 함수\r\n  const closeModal = () => {\r\n    setIsOpen(false);\r\n    setSelectedStay(null);\r\n  };\r\n\r\n  // 부스 참가 신청 페이지로 이동\r\n  const handleClickApply = (\r\n    contentId,\r\n    contentTitle,\r\n    startDate,\r\n    endDate,\r\n    category\r\n  ) => {\r\n    console.log(`부스참가신청 : ${contentId} `);\r\n    navigate(\"/booth\", {\r\n      state: {\r\n        contentId: contentId,\r\n        contentTitle: contentTitle,\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        category: category,\r\n      },\r\n    });\r\n  };\r\n\r\n  // useEffect\r\n  useEffect(() => {\r\n    fetchFestivals();\r\n    fetchFestivalImg();\r\n    fetchFestivalDetail();\r\n    fetchFestivalList();\r\n    setSelectedMarkerInfo(null);\r\n  }, [contentId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      festival != null &&\r\n      festivalDetail != null &&\r\n      festivalImg != null &&\r\n      eventState != null &&\r\n      listFestival != null &&\r\n      listStay != null\r\n    ) {\r\n      setIsLoading(false);\r\n    }\r\n  }, [\r\n    festival,\r\n    festivalDetail,\r\n    festivalImg,\r\n    eventState,\r\n    listFestival,\r\n    listStay,\r\n  ]);\r\n\r\n  // 축제 정보를 불러온 후 숙소 정보 불러오기 가능\r\n  useEffect(() => {\r\n    if (festival && festival.lDongRegnCd && festival.lDongSignguCd) {\r\n      fetchListStay({\r\n        lDongRegnCd: festival.lDongRegnCd,\r\n        lDongSignguCd: festival.lDongSignguCd,\r\n      });\r\n    }\r\n  }, [festival]);\r\n\r\n  if (isLoading) {\r\n    <h1>Loading...</h1>;\r\n  } else {\r\n    return (\r\n      <div className=\"festival-container\">\r\n        {/* thumbnail Section with Background */}\r\n        <section className=\"thumbnail-section\">\r\n          <img src={festival.firstimage}></img>\r\n        </section>\r\n        {/* Main Content */}\r\n        <main className=\"fes-detail-main-content\">\r\n          {/* Content Section */}\r\n          <div className=\"content-wrapper\">\r\n            <div className=\"festival-description\">\r\n              <div className=\"festival-title-row\">\r\n                <h1 className=\"festival-name\">{festival.title}</h1>\r\n                {member != null && (\r\n                  <div className=\"festival-apply-buttons\">\r\n                    <button\r\n                      className=\"both-apply-btn\"\r\n                      onClick={() => {\r\n                        handleClickApply(\r\n                          contentId,\r\n                          festival.title,\r\n                          festivalDetail.eventstartdate,\r\n                          festivalDetail.eventenddate,\r\n                          \"foodtruck\"\r\n                        );\r\n                      }}\r\n                    >\r\n                      🚒 푸드트럭 참가 신청\r\n                    </button>\r\n                    <button\r\n                      className=\"both-apply-btn\"\r\n                      onClick={() => {\r\n                        handleClickApply(\r\n                          contentId,\r\n                          festival.title,\r\n                          festivalDetail.eventstartdate,\r\n                          festivalDetail.eventenddate,\r\n                          \"fleamarket\"\r\n                        );\r\n                      }}\r\n                    >\r\n                      🎪 플리마켓 참가 신청\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"festival-badge\">\r\n                <span className=\"badge-button\">{eventState}</span>\r\n                <div className=\"headerweather-placeholder\">\r\n                  {festival?.mapx && festival?.mapy ? (\r\n                    <DetailWeather\r\n                      center={{ lat: festival.mapy, lon: festival.mapx }}\r\n                    />\r\n                  ) : (\r\n                    <span>날씨 정보를 불러오는 중입니다!</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"festival-date\">\r\n                <Calendar className=\"icon\" />\r\n                <span>\r\n                  {festivalDetail.eventstartdate} ~{\" \"}\r\n                  {festivalDetail.eventenddate}\r\n                </span>\r\n                <LikeButton contentId={contentId} />\r\n\r\n              </div>\r\n            </div>\r\n\r\n            {/* Festival Images */}\r\n            <div className=\"festival-slider\">\r\n              {festivalImg && festivalImg.length > 0 && <FestivalSwiper />}\r\n            </div>\r\n\r\n            {/* Festival Details 축제 상세설명*/}\r\n            <div className=\"festival-details\">\r\n              <p style={{ whiteSpace: \"pre-line\" }}>\r\n                {festival.overview?.replace(/<br\\s*\\/?>/gi, \"\\n\")}\r\n              </p>\r\n            </div>\r\n\r\n            {/* Event Poster */}\r\n            <div className=\"event-poster\">\r\n              <div className=\"poster-image\">\r\n                {posterImg && (\r\n                  <img src={posterImg.originimgurl} alt=\"포스터 이미지\" />\r\n                )}\r\n              </div>\r\n              <div className=\"festival-info-card\">\r\n                <div className=\"info-header\">\r\n                  <h3>행사일시</h3>\r\n                  <span className=\"date-range\">\r\n                    {festivalDetail.eventstartdate} ~{\" \"}\r\n                    {festivalDetail.eventenddate}\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"detail-info-item\">\r\n                  <h3>장소</h3>\r\n                  <p>\r\n                    {festival.addr1}\r\n                    {festival.addr2}\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"detail-info-item\">\r\n                  <h3>입장료</h3>\r\n                  <p style={{ whiteSpace: \"pre-line\" }}>\r\n                    {festivalDetail?.usetimefestival?.replace(\r\n                      /<br\\s*\\/?>/gi,\r\n                      \"\\n\"\r\n                    )}\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"detail-info-item\">\r\n                  <h3>개최지</h3>\r\n                  <p>\r\n                    {festivalDetail?.sponsor1}\r\n                    {festivalDetail?.sponsor2}\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"detail-info-item\">\r\n                  <h3>연락처</h3>\r\n                  <p className=\"contact\">\r\n                    <Phone className=\"phone-icon\" />\r\n                    {festivalDetail?.sponsor1tel}\r\n                  </p>\r\n                </div>\r\n\r\n                {festivalDetail?.homepage && (\r\n                  <div className=\"detail-info-item\">\r\n                    <h3>홈페이지 주소</h3>\r\n                    <p className=\"homepage\">{festivalDetail.homepage}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Map Section */}\r\n          <section className=\"map-section\">\r\n            <h3 className=\"section-title\">\r\n              <MapPin className=\"title-icon\" />\r\n              찾아가기\r\n            </h3>\r\n            <div className=\"map-container-grid\">\r\n              <div className=\"map-container\">\r\n                <PublicCarPark\r\n                  lDongRegnCd={festival.lDongRegnCd}\r\n                  lDongSignguCd={festival.lDongSignguCd}\r\n                  center={{ lat: festival.mapy, lng: festival.mapx }}\r\n                  placeName={festival.title}\r\n                  onMarkerClick={handleMarkerClick}\r\n                />\r\n              </div>\r\n\r\n              {selectedMarkerInfo ? (\r\n                <div className=\"map-container\">\r\n                  <div className=\"map-container-detail\">\r\n                    <h3>선택된 주차장</h3>\r\n                    <p>\r\n                      <strong>이름:</strong> {selectedMarkerInfo.name}\r\n                    </p>\r\n                    <p>\r\n                      <strong>도로명 주소:</strong> {selectedMarkerInfo.address}\r\n                    </p>\r\n                    <p>\r\n                      <strong>지번 주소:</strong> {selectedMarkerInfo.jibunAddr}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"map-container\">\r\n                  <div className=\"map-container-detail\">\r\n                    <h3>지도에서 주차장을 선택해주세요.</h3>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </section>\r\n\r\n          {/* Public Transportation Maps */}\r\n          {/* <section className=\"transport-section\">\r\n            <div className=\"transport-grid\">\r\n              <div className=\"transport-item\">\r\n                <h4>\r\n                  <span className=\"transport-icon\">🚌</span>\r\n                  근처 공영주차장\r\n                </h4>\r\n                <div className=\"transport-map\">\r\n                   <PublicCarPark\r\n                    lDongRegnCd={festival.lDongRegnCd}\r\n                    lDongSignguCd={festival.lDongSignguCd}\r\n                    center={{ lat: festival.mapy, lng: festival.mapx }}\r\n                  /> \r\n                </div>\r\n              </div>\r\n              <div className=\"transport-item\">\r\n                <h4>\r\n                  <span className=\"transport-icon\">🚇</span>\r\n                  근처 전기차충전소 충전소\r\n                </h4>\r\n                 <div className=\"transport-map\">\r\n                  <EVChargeApi\r\n                    metroCode={festival.lDongRegnCd}\r\n                    cityCode={festival.lDongSignguCd}\r\n                  />\r\n                </div> \r\n              </div>\r\n            </div>\r\n          </section> */}\r\n\r\n          {/* 플리마켓 / 푸드트럭 정보 */}\r\n          <BoothList contentId={contentId} />\r\n\r\n          {/* Accommodation Section */}\r\n          <section className=\"accommodation-section\">\r\n            <h3 className=\"section-title\">주변 숙박 정보</h3>\r\n            <div className=\"accommodation-grid\">\r\n              {listStay.map((stay) => (\r\n                <div\r\n                  key={stay.id}\r\n                  className=\"festival-card\"\r\n                  onClick={() => handleCardClick(stay)}\r\n                >\r\n                  <div className=\"festival-image-container\">\r\n                    <img\r\n                      src={stay.image}\r\n                      alt={stay.title}\r\n                      className=\"festival-image\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"festival-info\">\r\n                    <h3 className=\"festival-title\">{stay.title}</h3>\r\n                    <p className=\"festival-location\">\r\n                      <svg\r\n                        className=\"icon\"\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 20 20\"\r\n                      >\r\n                        <path\r\n                          fillRule=\"evenodd\"\r\n                          d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\"\r\n                          clipRule=\"evenodd\"\r\n                        />\r\n                      </svg>\r\n                      {stay.addr1}\r\n                      {stay.addr2}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </section>\r\n\r\n          {/* Modal 컴포넌트 사용 */}\r\n          <StayModal\r\n            isOpen={isOpen}\r\n            selectedStay={selectedStay}\r\n            onClose={closeModal}\r\n          />\r\n\r\n          {/* Other Festivals */}\r\n          <section className=\"other-festivals\">\r\n            <h3 className=\"section-title\">다른 축제도 둘러보세요!</h3>\r\n            <div className=\"festivals-grid\">\r\n              {listFestival.map((festival) => (\r\n                <div\r\n                  key={festival.id}\r\n                  className=\"festival-card\"\r\n                  onClick={() => handleFestivalClick(festival.id)}\r\n                >\r\n                  <div className=\"festival-image-container\">\r\n                    <img\r\n                      src={festival.image}\r\n                      alt={festival.title}\r\n                      className=\"festival-image\"\r\n                    />\r\n                    <div\r\n                      className={`festival-status ${festival.status === \"진행중\" ? \"active\" : \"upcoming\"\r\n                        }`}\r\n                    >\r\n                      {festival.status}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"festival-info\">\r\n                    <h3 className=\"festival-title\">{festival.title}</h3>\r\n                    <p className=\"festival-location\">\r\n                      <svg\r\n                        className=\"icon\"\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 20 20\"\r\n                      >\r\n                        <path\r\n                          fillRule=\"evenodd\"\r\n                          d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\"\r\n                          clipRule=\"evenodd\"\r\n                        />\r\n                      </svg>\r\n                      {festival.location}\r\n                    </p>\r\n                    <p className=\"festival-date\">\r\n                      <svg\r\n                        className=\"icon\"\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 20 20\"\r\n                      >\r\n                        <path\r\n                          fillRule=\"evenodd\"\r\n                          d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\"\r\n                          clipRule=\"evenodd\"\r\n                        />\r\n                      </svg>\r\n                      {festival.date}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </section>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default FestivalDetail;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\HeaderForManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\KakaoMap.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\LikeButton.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkFavorite' and 'fetchLikes'. Either include them or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [checkFavorite, contentId, fetchLikes]","fix":{"range":[1612,1623],"text":"[checkFavorite, contentId, fetchLikes]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\r\nimport \"./LikeButton.css\";\r\nimport axiosApi from \"../api/axiosAPI\";\r\nimport useAuthStore from \"../store/useAuthStore\";\r\n\r\nconst LikeButton = ({ contentId }) => {\r\n  const [isLiked, setIsLiked] = useState(false);\r\n  const [isfavorite, setIsfavorite] = useState(false);\r\n  const [likeCount, setLikeCount] = useState(0);\r\n\r\n  const { member } = useAuthStore();\r\n\r\n  // 좋아요 수 DB에서 조회해오기\r\n  const fetchLikes = async () => {\r\n    try {\r\n      const resp = await axiosApi.get(\"/festival/detail/likes\", {\r\n        params: {\r\n          contentId: contentId,\r\n        },\r\n      });\r\n\r\n      setLikeCount(resp.data);\r\n    } catch (err) {\r\n      console.error(\"좋아요 수 조회 실패:\", err);\r\n    }\r\n  };\r\n\r\n  // 축제 찜하기\r\n  const checkFavorite = async () => {\r\n    try {\r\n      // 로그인 상태일 경우에만 기존에 찜해두었던 축제인지 확인)\r\n      if (member != null) {\r\n        const resp = await axiosApi.get(\"/festival/detail/favorites\", {\r\n          params: {\r\n            contentId: contentId,\r\n          },\r\n        });\r\n\r\n        if (resp.status === 200) {\r\n          const checkFavoriteStatus = resp.data;\r\n          setIsfavorite(checkFavoriteStatus); // true or false\r\n          console.log(\"checkFavoriteStatus : \", checkFavoriteStatus);\r\n        } else if (resp.status === 401) {\r\n          console.log(\"로그인 필요\");\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error(\"찜 여부 확인 실패\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedLikes = JSON.parse(localStorage.getItem(\"likes\")) || [];\r\n    setIsLiked(storedLikes.includes(contentId));\r\n\r\n    fetchLikes();\r\n    checkFavorite();\r\n  }, [contentId]);\r\n\r\n  // 좋아요 눌렀을 때 토글\r\n  const handleClickLike = async () => {\r\n    try {\r\n      const storedLikes = JSON.parse(localStorage.getItem(\"likes\")) || [];\r\n\r\n      // 서버에 현재 상태 넘기고 성공 시에만 상태 변경 및 로컬스토리지 업데이트\r\n      const resp = await axiosApi.post(\"/festival/detail/likes\", {\r\n        currLike: isLiked,\r\n        contentId: contentId,\r\n      });\r\n\r\n      if (resp.status === 200) {\r\n        // 토글 상태 변경\r\n        const newLikeStatus = !isLiked;\r\n        setIsLiked(newLikeStatus);\r\n\r\n        if (newLikeStatus) {\r\n          // 좋아요 눌린 상태면 localStorage에 추가\r\n          if (!storedLikes.includes(contentId)) {\r\n            storedLikes.push(contentId);\r\n          }\r\n          localStorage.setItem(\"likes\", JSON.stringify(storedLikes));\r\n        } else {\r\n          // 좋아요 해제면 localStorage에서 제거\r\n          const updated = storedLikes.filter(\r\n            (id) => String(id) !== String(contentId)\r\n          );\r\n          localStorage.setItem(\"likes\", JSON.stringify(updated));\r\n        }\r\n        fetchLikes();\r\n        console.log(\"좋아요 반영 성공 : \", newLikeStatus);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"좋아요 반영 중 에러 발생 : \", error);\r\n    }\r\n  };\r\n\r\n  // 찜하기 눌렀을 때\r\n  const handleClickFavorite = async () => {\r\n    console.log(\"isfavorite : \", isfavorite);\r\n    try {\r\n      const resp = await axiosApi.post(\"/festival/detail/favorites\", {\r\n        currFavorite: isfavorite,\r\n        contentId: contentId,\r\n      });\r\n\r\n      if (resp.status === 200) {\r\n        setIsfavorite(!isfavorite);\r\n        console.log(\"찜목록 반영 성공\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"찜하기 반영 중 에러 발생 : \", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"like-container\">\r\n      {/* 좋아요 */}\r\n      <div className=\"like\">\r\n        <button\r\n          onClick={handleClickLike}\r\n          className={`heart-button ${isLiked ? \"liked\" : \"\"}`}\r\n        >\r\n          <img\r\n            src={isLiked ? \"/heart-solid.png\" : \"/heart-regular.png\"}\r\n            alt={isLiked ? \"좋아요\" : \"좋아요 안함\"}\r\n            className=\"heart-image\"\r\n          />\r\n\r\n          {/* 클릭 애니메이션 효과 */}\r\n          {/* {isLiked && (\r\n          <div className=\"particles\">\r\n            {[...Array(8)].map((_, i) => (\r\n              <div\r\n                key={i}\r\n                className=\"particle\"\r\n                style={{\r\n                  left: `${50 + Math.cos((i * 45 * Math.PI) / 180) * 35}%`,\r\n                  top: `${50 + Math.sin((i * 45 * Math.PI) / 180) * 35}%`,\r\n                  animationDelay: `${i * 0.1}s`,\r\n                }}\r\n              />\r\n            ))}\r\n          </div>\r\n        )} */}\r\n        </button>\r\n        {likeCount > 0 && <span>{likeCount}</span>}\r\n      </div>\r\n      {/* 찜하기 */}\r\n      <div className=\"favorite\">\r\n        {member != null && (\r\n          <button onClick={handleClickFavorite} className=\"heart-button\">\r\n            <img\r\n              src={isfavorite ? \"/favorite-solid.png\" : \"/favorite-regular.png\"}\r\n              alt={isfavorite ? \"찜하기\" : \"찜 안함\"}\r\n              className=\"heart-image\"\r\n            />\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LikeButton;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\MapApi.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPublicCarPark'. Either include it or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [areaCode, fetchPublicCarPark]","fix":{"range":[2753,2763],"text":"[areaCode, fetchPublicCarPark]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  CustomOverlayMap,\r\n  Map,\r\n  MapMarker,\r\n  useKakaoLoader,\r\n} from \"react-kakao-maps-sdk\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\n// 거리 계산\r\nconst getDistanceFromLatLonInMeter = (lat1, lon1, lat2, lon2) => {\r\n  const R = 6371e3;\r\n  const rad = Math.PI / 180;\r\n  const dLat = (lat2 - lat1) * rad;\r\n  const dLon = (lon2 - lon1) * rad;\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(lat1 * rad) *\r\n      Math.cos(lat2 * rad) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c;\r\n  return d;\r\n};\r\n\r\nexport default function PublicCarParkWithMap({\r\n  lDongRegnCd,\r\n  lDongSignguCd,\r\n  center,\r\n  placeName,\r\n  onMarkerClick,\r\n}) {\r\n  const key = import.meta.env.VITE_KAKAO_MAP_API_KEY;\r\n  const [loading, error] = useKakaoLoader({\r\n    appkey: key,\r\n    libraries: [\"services\", \"clusterer\"],\r\n  });\r\n\r\n  const [isReady, setIsReady] = useState(false);\r\n  const [mapInstance, setMapInstance] = useState(null);\r\n  const retryCount = useRef(0);\r\n  const maxRetries = 3;\r\n  const radius = 1000; // 1km\r\n  const [info, setInfo] = useState(null);\r\n\r\n  // 주차장 관련 state\r\n  const [listCarPark, setListCarPark] = useState([]);\r\n  const [isParkingLoading, setIsParkingLoading] = useState(true);\r\n  const areaCode = String(lDongRegnCd) + String(lDongSignguCd);\r\n\r\n  // 공영주차장 데이터 가져오기\r\n  const fetchPublicCarPark = async () => {\r\n    try {\r\n      const field = encodeURIComponent(\"지역코드::EQ\");\r\n      const serviceKey = import.meta.env.VITE_PUBLIC_CARPARK_API;\r\n\r\n      const url = `/carpark-api/api/15050093/v1/uddi:d19c8e21-4445-43fe-b2a6-865dff832e08?page=1&perPage=1000&returnType=json&cond[${field}]=${areaCode}&serviceKey=${serviceKey}`;\r\n\r\n      const response = await fetch(url);\r\n      const respData = await response.json();\r\n      const items = respData?.data;\r\n      console.log(\"조회된 공영 주차장 수 : \", respData.matchCount);\r\n      if (!items || !Array.isArray(items)) {\r\n        setListCarPark([]);\r\n        setIsParkingLoading(false);\r\n        return;\r\n      }\r\n\r\n      const mapped = items.map((item) => ({\r\n        name: item[\"주차장명\"],\r\n        address: item[\"주차장도로명주소\"],\r\n        jibunAddr: item[\"주차장지번주소\"],\r\n        public: item[\"주차장구분\"],\r\n        mapx: item[\"경도\"],\r\n        mapy: item[\"위도\"],\r\n      }));\r\n\r\n      const list = mapped.filter(\r\n        (carpark) =>\r\n          typeof carpark.public === \"string\" && carpark.public.includes(\"공영\")\r\n      );\r\n\r\n      setListCarPark(list);\r\n      setIsParkingLoading(false);\r\n    } catch (error) {\r\n      console.error(\"주차장 정보 로드 실패:\", error);\r\n      setListCarPark([]);\r\n      setIsParkingLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPublicCarPark();\r\n  }, [areaCode]);\r\n\r\n  useEffect(() => {\r\n    let timeoutId;\r\n\r\n    if (!loading && !error) {\r\n      // SDK 로딩 완료 후 더 안전한 지연시간 설정\r\n      timeoutId = setTimeout(() => {\r\n        setIsReady(true);\r\n      }, 500);\r\n    }\r\n\r\n    return () => {\r\n      if (timeoutId) clearTimeout(timeoutId);\r\n    };\r\n  }, [loading, error]);\r\n\r\n  useEffect(() => {\r\n    // 맵 인스턴스가 생성되면 크기 재조정\r\n    if (mapInstance) {\r\n      const timer = setTimeout(() => {\r\n        mapInstance.relayout();\r\n      }, 100);\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [mapInstance]);\r\n\r\n  // 마커 클릭 핸들러\r\n  const handleMarkerClick = (index, marker) => {\r\n    setInfo(index);\r\n\r\n    // A 컴포넌트로 데이터 전달\r\n    const markerData = {\r\n      name: marker.name,\r\n      address: marker.address,\r\n      jibunAddr: marker.jibunAddr,\r\n    };\r\n\r\n    // 부모 컴포넌트로 데이터 전달\r\n    if (onMarkerClick) {\r\n      onMarkerClick(markerData);\r\n    }\r\n  };\r\n\r\n  /*   console.log(\r\n    \"지도 로딩 상태:\",\r\n    loading,\r\n    \"준비 상태:\",\r\n    isReady,\r\n    \"재시도 횟수:\",\r\n    retryCount.current,\r\n    \"주차장 데이터:\",\r\n    listCarPark.length\r\n  ); */\r\n\r\n  if (error) {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"395px\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          backgroundColor: \"#f5f5f5\",\r\n          borderRadius: \"8px\",\r\n          color: \"#666\",\r\n        }}\r\n      >\r\n        지도 로딩 실패: {error.message}\r\n        <button\r\n          onClick={() => window.location.reload()}\r\n          style={{ marginLeft: \"10px\", padding: \"5px 10px\" }}\r\n        >\r\n          새로고침\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isReady) {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"395px\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          backgroundColor: \"#f5f5f5\",\r\n          borderRadius: \"8px\",\r\n          color: \"#666\",\r\n        }}\r\n      >\r\n        지도 로딩 중...\r\n        {retryCount.current > 0 &&\r\n          ` (재시도 중: ${retryCount.current}/${maxRetries})`}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\r\n      <Map\r\n        center={center}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          borderRadius: \"8px\",\r\n        }}\r\n        level={3} // 기본 줌 레벨 설정\r\n        onCreate={(map) => setMapInstance(map)}\r\n      >\r\n        {/* 메인 장소 마커 */}\r\n        <MapMarker position={center} />\r\n        <CustomOverlayMap position={center} yAnchor={2.2}>\r\n          <div\r\n            style={{\r\n              padding: \"6px 10px\",\r\n              background: \"white\",\r\n              borderRadius: \"8px\",\r\n              boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.2)\",\r\n              color: \"#333\",\r\n              fontWeight: \"500\",\r\n              fontSize: \"14px\",\r\n              textAlign: \"center\",\r\n              whiteSpace: \"nowrap\",\r\n            }}\r\n          >\r\n            {placeName}\r\n          </div>\r\n        </CustomOverlayMap>\r\n\r\n        {/* 공영주차장 마커들 (있을 경우에만) */}\r\n        {listCarPark.length > 0 && (\r\n          <div>\r\n            {listCarPark.map((marker, index) => {\r\n              const distance = getDistanceFromLatLonInMeter(\r\n                center.lat,\r\n                center.lng,\r\n                marker.mapy, // 위도\r\n                marker.mapx // 경도\r\n              );\r\n\r\n              if (distance <= radius) {\r\n                return (\r\n                  <MapMarker\r\n                    key={index}\r\n                    position={{ lat: marker.mapy, lng: marker.mapx }}\r\n                    image={{\r\n                      src: \"../../carPark.png\",\r\n                      size: { width: 24, height: 24 },\r\n                    }}\r\n                    title={marker.name}\r\n                    onClick={() => handleMarkerClick(index, marker)}\r\n                  >\r\n                    {info === index && (\r\n                      <div style={{ margin: \"0 2px\", fontSize: \"13px\" }}>\r\n                        {marker.name} <br />\r\n                        <a\r\n                          href={`https://map.kakao.com/link/map/${marker.name},${marker.mapy},${marker.mapx}`}\r\n                          style={{\r\n                            color: \"#333\",\r\n                            fontWeight: \"500\",\r\n                            fontSize: \"12px\",\r\n                            textAlign: \"center\",\r\n                            whiteSpace: \"nowrap\",\r\n                            textDecoration: \"none\",\r\n                          }}\r\n                          target=\"_blank\"\r\n                          rel=\"noreferrer\"\r\n                        >\r\n                          큰지도보기\r\n                        </a>{\" \"}\r\n                        <a\r\n                          href={`https://map.kakao.com/link/to/${marker.name},${marker.mapy},${marker.mapx}`}\r\n                          style={{\r\n                            color: \"#333\",\r\n                            fontWeight: \"500\",\r\n                            fontSize: \"12px\",\r\n                            textAlign: \"center\",\r\n                            whiteSpace: \"nowrap\",\r\n                            textDecoration: \"none\",\r\n                          }}\r\n                          target=\"_blank\"\r\n                          rel=\"noreferrer\"\r\n                        >\r\n                          길찾기\r\n                        </a>\r\n                      </div>\r\n                    )}\r\n                  </MapMarker>\r\n                );\r\n              }\r\n              return null;\r\n            })}\r\n          </div>\r\n        )}\r\n      </Map>\r\n\r\n      {/* 주차장 정보 로딩 상태 표시 */}\r\n      {isParkingLoading && (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"10px\",\r\n            right: \"10px\",\r\n            background: \"rgba(255, 255, 255, 0.9)\",\r\n            padding: \"8px 12px\",\r\n            borderRadius: \"6px\",\r\n            fontSize: \"12px\",\r\n            color: \"#666\",\r\n            boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\r\n          }}\r\n        >\r\n          주차장 정보 로딩 중...\r\n        </div>\r\n      )}\r\n\r\n      {/* 주차장이 없을 때 안내 메시지 */}\r\n      {!isParkingLoading && listCarPark.length === 0 && (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"10px\",\r\n            right: \"10px\",\r\n            background: \"rgba(255, 255, 255, 0.9)\",\r\n            padding: \"8px 12px\",\r\n            borderRadius: \"6px\",\r\n            fontSize: \"12px\",\r\n            color: \"#666\",\r\n            boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\r\n          }}\r\n        >\r\n          주변에 공영주차장이 없습니다\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\Pagination.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":19,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":19,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faAnglesLeft,\r\n  faAnglesRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Pagination.css\";\r\n\r\n/**\r\n * 페이지네이션 로직을 관리하는 커스텀 훅\r\n *\r\n * @param {Object} options\r\n * @param {number} options.totalItems - 전체 아이템 수\r\n * @param {number} [options.pageSize=10] - 페이지당 표시할 아이템 수\r\n * @param {number} [options.initialPage=1] - 초기 페이지 번호\r\n */\r\nexport const usePagination = ({\r\n  totalItems,\r\n  pageSize = 10,\r\n  initialPage = 1,\r\n}) => {\r\n  const [currentPage, setCurrentPage] = useState(initialPage);\r\n  const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n  const goToPage = useCallback(\r\n    (page) => {\r\n      if (page < 1 || page > totalPages) return;\r\n      setCurrentPage(page);\r\n\r\n      setTimeout(() => {\r\n        const list = document.querySelector(\".paginated-list\");\r\n        if (list) {\r\n          list.scrollIntoView({ behavior: \"auto\", block: \"start\" });\r\n        }\r\n      }, 0);\r\n    },\r\n    [totalPages]\r\n  );\r\n\r\n  const currentItems = useCallback(\r\n    (items) => {\r\n      const startIndex = (currentPage - 1) * pageSize;\r\n      return items.slice(startIndex, startIndex + pageSize);\r\n    },\r\n    [currentPage, pageSize]\r\n  );\r\n\r\n  return {\r\n    currentPage,\r\n    totalPages,\r\n    goToPage,\r\n    currentItems,\r\n    pageSize,\r\n  };\r\n};\r\n\r\n/**\r\n * 페이지네이션 컴포넌트\r\n *\r\n * @param {Object} props\r\n * @param {number} props.currentPage - 현재 페이지 번호\r\n * @param {number} props.totalPages - 전체 페이지 수\r\n * @param {Function} props.onPageChange - 페이지 변경 시 호출될 함수\r\n * @param {string} [props.className=\"\"] - 추가할 CSS 클래스명\r\n * @param {boolean} [props.showFirstLast=true] - 첫 페이지/마지막 페이지 버튼 표시 여부\r\n * @param {number} [props.maxVisiblePages=5] - 한 번에 표시할 페이지 버튼의 최대 개수\r\n *\r\n * @example\r\n * // 기본 사용법\r\n * <Pagination\r\n *   currentPage={currentPage}\r\n *   totalPages={totalPages}\r\n *   onPageChange={(page) => setCurrentPage(page)}\r\n * />\r\n *\r\n * // 커스텀 스타일과 옵션을 적용한 사용법\r\n * <Pagination\r\n *   currentPage={currentPage}\r\n *   totalPages={totalPages}\r\n *   onPageChange={handlePageChange}\r\n *   className=\"custom-pagination\"\r\n *   showFirstLast={false}\r\n *   maxVisiblePages={7}\r\n * />\r\n */\r\nfunction Pagination({\r\n  currentPage,\r\n  totalPages,\r\n  onPageChange,\r\n  className = \"\",\r\n  showFirstLast = true,\r\n  maxVisiblePages = 5,\r\n}) {\r\n  /**\r\n   * 현재 페이지를 중심으로 표시할 페이지 번호들을 계산\r\n   *\r\n   * 예시:\r\n   * - 전체 페이지가 10페이지이고 현재 페이지가 5페이지인 경우\r\n   * - maxVisiblePages가 5인 경우\r\n   * - 결과: [3, 4, 5, 6, 7]\r\n   *\r\n   * 특수한 경우 처리:\r\n   * 1. 현재 페이지가 처음/끝에 가까운 경우 시작/끝 페이지를 조정\r\n   * 2. 전체 페이지 수가 maxVisiblePages보다 작은 경우 모든 페이지를 표시\r\n   *\r\n   * @returns {number[]} 화면에 표시할 페이지 번호 배열\r\n   */\r\n  const getPageNumbers = () => {\r\n    const pageNumbers = [];\r\n    // 시작 페이지 계산: 현재 페이지를 중심으로 좌우로 페이지를 표시\r\n    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));\r\n    // 끝 페이지 계산: 시작 페이지부터 최대 표시 개수만큼 표시\r\n    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\r\n\r\n    // 끝 페이지가 최대 표시 개수보다 작은 경우, 시작 페이지를 조정\r\n    if (endPage - startPage + 1 < maxVisiblePages) {\r\n      startPage = Math.max(1, endPage - maxVisiblePages + 1);\r\n    }\r\n\r\n    // 페이지 번호 배열 생성\r\n    for (let i = startPage; i <= endPage; i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n\r\n    return pageNumbers;\r\n  };\r\n\r\n  return (\r\n    <div className={`pagination-container ${className}`.trim()}>\r\n      {/* 첫 페이지로 이동하는 버튼 */}\r\n      {showFirstLast && (\r\n        <button\r\n          type=\"button\"\r\n          className=\"pagination-btn nav\"\r\n          onClick={() => onPageChange(1)}\r\n          disabled={currentPage === 1}\r\n          aria-label=\"첫 페이지로 이동\"\r\n        >\r\n          <FontAwesomeIcon icon={faAnglesLeft} />\r\n        </button>\r\n      )}\r\n\r\n      {/* 이전 페이지로 이동하는 버튼 */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"pagination-btn nav\"\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n        disabled={currentPage === 1}\r\n        aria-label=\"이전 페이지로 이동\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleLeft} />\r\n      </button>\r\n\r\n      {/* 페이지 번호 버튼들 */}\r\n      {getPageNumbers().map((pageNum) => (\r\n        <button\r\n          type=\"button\"\r\n          key={pageNum}\r\n          className={`pagination-btn${currentPage === pageNum ? \" active\" : \"\"\r\n            }`}\r\n          onClick={() => onPageChange(pageNum)}\r\n          aria-label={`${pageNum} 페이지로 이동`}\r\n          aria-current={currentPage === pageNum ? \"page\" : undefined}\r\n        >\r\n          {pageNum}\r\n        </button>\r\n      ))}\r\n\r\n      {/* 다음 페이지로 이동하는 버튼 */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"pagination-btn nav\"\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n        disabled={currentPage === totalPages}\r\n        aria-label=\"다음 페이지로 이동\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleRight} />\r\n      </button>\r\n\r\n      {/* 마지막 페이지로 이동하는 버튼 */}\r\n      {showFirstLast && (\r\n        <button\r\n          type=\"button\"\r\n          className=\"pagination-btn nav\"\r\n          onClick={() => onPageChange(totalPages)}\r\n          disabled={currentPage === totalPages}\r\n          aria-label=\"마지막 페이지로 이동\"\r\n        >\r\n          <FontAwesomeIcon icon={faAnglesRight} />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\mcomponents\\StayModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\booth\\AISideMenu.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\booth\\Booth.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'startDate' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":869,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":869,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"startDate"},"fix":{"range":[27667,27678],"text":""},"desc":"Remove unused variable 'startDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'endDate' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":869,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":869,"endColumn":54,"suggestions":[{"messageId":"removeVar","data":{"varName":"endDate"},"fix":{"range":[27678,27687],"text":""},"desc":"Remove unused variable 'endDate'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport \"./Booth.css\";\r\nimport AISideMenu from \"./AISideMenu\";\r\nimport Title from \"./Title\";\r\nimport \"./AISideMenu.css\";\r\nimport \"../monthFestive/Title.css\";\r\nimport axios from \"axios\";\r\nimport useAuthStore from \"../../store/useAuthStore\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n// 투어 API 연동 함수 (LocalFestive.jsx 방식 fetch 기반)\r\nasync function fetchFestivals({ keyword, region, startDate, endDate }) {\r\n  const formatDate = (dateStr) => (dateStr ? dateStr.replaceAll(\"-\", \"\") : \"\");\r\n  const serviceKey = import.meta.env.VITE_TOURAPI_KEY;\r\n  const params = new URLSearchParams({\r\n    MobileOS: \"WEB\",\r\n    MobileApp: \"Festive\",\r\n    _type: \"json\",\r\n    arrange: \"A\",\r\n    numOfRows: \"100\",\r\n    pageNo: \"1\",\r\n  });\r\n  if (startDate) params.append(\"eventStartDate\", formatDate(startDate));\r\n  if (endDate) params.append(\"eventEndDate\", formatDate(endDate));\r\n  if (region) params.append(\"areaCode\", region); // region은 areaCode로 전달\r\n  if (keyword) params.append(\"keyword\", keyword);\r\n  const url = `https://apis.data.go.kr/B551011/KorService2/searchFestival2?serviceKey=${serviceKey}&${params.toString()}`;\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const items = data?.response?.body?.items?.item;\r\n    if (!items) return [];\r\n    // 종료된 축제 제외\r\n    const filtered = Array.isArray(items)\r\n      ? items.filter((item) => {\r\n          const start = item.eventstartdate;\r\n          const end = item.eventenddate;\r\n          if (getFestivalStatus(start, end) === \"종료\") return false;\r\n          return true;\r\n        })\r\n      : [items];\r\n    return filtered.map((item) => {\r\n      const start = item.eventstartdate;\r\n      const end = item.eventenddate;\r\n      return {\r\n        contentId: item.contentid,\r\n        title: item.title,\r\n        eventStartDate: start\r\n          ? `${start.slice(0, 4)}-${start.slice(4, 6)}-${start.slice(6, 8)}`\r\n          : \"\",\r\n        eventEndDate: end\r\n          ? `${end.slice(0, 4)}-${end.slice(4, 6)}-${end.slice(6, 8)}`\r\n          : \"\",\r\n        region: item.areacode || region || \"\",\r\n        image: item.firstimage || \"/logo.png\",\r\n        location: item.addr1 || \"장소 미정\",\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error(\"축제 검색 실패:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// getFestivalStatus 함수도 LocalFestive.jsx와 동일하게 추가\r\nfunction getFestivalStatus(start, end) {\r\n  if (!start || !end) return \"예정\";\r\n  const now = new Date();\r\n  const startDate = new Date(\r\n    `${start.slice(0, 4)}-${start.slice(4, 6)}-${start.slice(6, 8)}`\r\n  );\r\n  const endDate = new Date(\r\n    `${end.slice(0, 4)}-${end.slice(4, 6)}-${end.slice(6, 8)}`\r\n  );\r\n  if (now < startDate) return \"예정\";\r\n  else if (now > endDate) return \"종료\";\r\n  else return \"진행중\";\r\n}\r\n\r\n// 축제 검색 모달 컴포넌트\r\nfunction FestivalSearchModal({ open, onClose, onSelect, areaOptions }) {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [region, setRegion] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\r\n    new Date().toISOString().slice(0, 10)\r\n  );\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // 실시간 검색 (입력값이 바뀔 때마다 자동으로 목록 갱신)\r\n  React.useEffect(() => {\r\n    let ignore = false;\r\n    async function fetchList() {\r\n      setLoading(true);\r\n      try {\r\n        let festivals = await fetchFestivals({\r\n          keyword: \"\", // TourAPI는 keyword 미지원이므로 빈값 전달\r\n          region,\r\n          startDate,\r\n          endDate,\r\n        });\r\n        // 축제명(query)로 프론트에서 필터링\r\n        if (query) {\r\n          const lowerQuery = query.toLowerCase();\r\n          festivals = festivals.filter(\r\n            (f) => f.title && f.title.toLowerCase().includes(lowerQuery)\r\n          );\r\n        }\r\n        if (!ignore) setResults(festivals);\r\n      } catch {\r\n        if (!ignore) setResults([]);\r\n      }\r\n      if (!ignore) setLoading(false);\r\n    }\r\n    if (open) fetchList();\r\n    return () => {\r\n      ignore = true;\r\n    };\r\n  }, [query, region, startDate, endDate, open]);\r\n\r\n  if (!open) return null;\r\n  const handleBackdropClick = (e) => {\r\n    if (e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className=\"modal-backdrop\"\r\n      style={{\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        background: \"rgba(0,0,0,0.3)\",\r\n        zIndex: 1000,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n      onClick={handleBackdropClick}\r\n    >\r\n      <div\r\n        className=\"modal\"\r\n        style={{\r\n          background: \"#fff\",\r\n          padding: 24,\r\n          borderRadius: 8,\r\n          width: 500,\r\n          maxWidth: \"90vw\",\r\n          position: \"relative\",\r\n          boxSizing: \"border-box\",\r\n        }}\r\n      >\r\n        <button\r\n          onClick={onClose}\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 10,\r\n            right: 10,\r\n            border: \"none\",\r\n            background: \"none\",\r\n            fontSize: 20,\r\n            cursor: \"pointer\",\r\n          }}\r\n          aria-label=\"닫기\"\r\n        >\r\n          ×\r\n        </button>\r\n        <h3 style={{ marginBottom: 12 }}>축제 검색</h3>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            gap: 8,\r\n            marginBottom: 8,\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", gap: 8 }}>\r\n            <input\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              placeholder=\"축제명\"\r\n              style={{ flex: 2, padding: 4, minWidth: 120 }}\r\n            />\r\n            <select\r\n              className=\"search-input location-select\"\r\n              value={region}\r\n              onChange={(e) => setRegion(e.target.value)}\r\n            >\r\n              <option value=\"\">전체 지역</option>\r\n              {areaOptions.map((area) => (\r\n                <option key={area.areaCode} value={area.areaCode}>\r\n                  {area.areaName}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          {/* 날짜 입력을 한 줄에 배치 */}\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              gap: 12,\r\n              marginTop: 8,\r\n            }}\r\n          >\r\n            <input\r\n              id=\"searchStartDate\"\r\n              type=\"date\"\r\n              className=\"search-input date-input\"\r\n              value={startDate}\r\n              onChange={(e) => setStartDate(e.target.value)}\r\n              placeholder=\"시작일\"\r\n              style={{ minWidth: 120 }}\r\n            />\r\n            <span style={{ fontWeight: \"bold\", fontSize: 18, margin: \"0 4px\" }}>\r\n              ~\r\n            </span>\r\n            <input\r\n              id=\"searchEndDate\"\r\n              type=\"date\"\r\n              className=\"search-input date-input\"\r\n              value={endDate}\r\n              onChange={(e) => setEndDate(e.target.value)}\r\n              placeholder=\"종료일\"\r\n              style={{ minWidth: 120 }}\r\n            />\r\n          </div>\r\n        </div>\r\n        {loading ? (\r\n          <div>로딩중...</div>\r\n        ) : (\r\n          <ul\r\n            style={{\r\n              marginTop: 16,\r\n              maxHeight: 180,\r\n              overflowY: \"auto\",\r\n              padding: 0,\r\n            }}\r\n          >\r\n            {results.map((festival) => (\r\n              <li\r\n                key={festival.contentId}\r\n                onClick={() => {\r\n                  onSelect({\r\n                    title: festival.title,\r\n                    contentId: festival.contentId,\r\n                  });\r\n                  onClose();\r\n                }}\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  padding: \"6px 0\",\r\n                  borderBottom: \"1px solid #eee\",\r\n                }}\r\n              >\r\n                <b>{festival.title}</b>\r\n                <div style={{ fontSize: 12, color: \"#888\" }}>\r\n                  {festival.region} | {festival.eventStartDate} ~{\" \"}\r\n                  {festival.eventEndDate}\r\n                </div>\r\n              </li>\r\n            ))}\r\n            {results.length === 0 && (\r\n              <li style={{ color: \"#aaa\", padding: \"6px 0\" }}>\r\n                검색 결과가 없습니다.\r\n              </li>\r\n            )}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 플리마켓 신청 폼\r\nconst FleaMarketForm = ({ areaOptions, contentId, contentTitle }) => {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [festivalName, setFestivalName] = useState(contentTitle || \"\");\r\n  const [showFestivalModal, setShowFestivalModal] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [shop, setShop] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [item, setItem] = useState(\"\");\r\n  const [desc, setDesc] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  // 상태 추가\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [license, setLicense] = useState(\"\");\r\n  const [formContentId, setFormContentId] = useState(contentId || \"\");\r\n  const { member } = useAuthStore();\r\n  const memberNo = member?.memberNo;\r\n  // const [applyContentId, setApplyContentId] = useState(contentId || \"\");\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      !festivalName ||\r\n      !name ||\r\n      !shop ||\r\n      !phone ||\r\n      !item ||\r\n      !startDate ||\r\n      !endDate ||\r\n      !selectedFile\r\n    ) {\r\n      alert(\"모든 필수 항목을 입력/선택해 주세요.\");\r\n      return;\r\n    }\r\n    if (!memberNo) {\r\n      alert(\"로그인 후 신청 가능합니다.\");\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"memberNo\", memberNo); // 로그인 사용자 번호 추가\r\n      formData.append(\"applicantName\", name);\r\n      formData.append(\"applicantCompany\", shop); // 플리마켓: shop, 푸드트럭: truck\r\n      formData.append(\"boothTel\", phone);\r\n      formData.append(\"products\", item); // 플리마켓: item, 푸드트럭: menu\r\n      formData.append(\"boothStartDate\", startDate);\r\n      formData.append(\"boothEndDate\", endDate);\r\n      formData.append(\"contentId\", formContentId);\r\n      formData.append(\"contentTitle\", festivalName);\r\n      formData.append(\"boothType\", 1); // 플리마켓: 1로 전송\r\n      formData.append(\"image\", selectedFile);\r\n      // 영업허가증, 트럭크기 등은 formData에 추가하지 않음\r\n      // axios.post 직전: formData 값 모두 출력\r\n      for (let [key, value] of formData.entries()) {\r\n        console.log(key, value);\r\n      }\r\n      await axios.post(\"/api/booth/request\", formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n      alert(\"신청이 완료되었습니다!\");\r\n      setFestivalName(\"\");\r\n      setName(\"\");\r\n      setShop(\"\");\r\n      setPhone(\"\");\r\n      setItem(\"\");\r\n      setDesc(\"\");\r\n      setSelectedFile(null);\r\n    } catch {\r\n      alert(\"신청에 실패했습니다.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"booth-form-container\">\r\n      <h2 className=\"booth-form-title\">플리마켓 신청</h2>\r\n\r\n      <div className=\"booth-form-fields\">\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            축제명 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <div style={{ display: \"flex\", gap: 8 }}>\r\n            <input\r\n              type=\"text\"\r\n              className=\"booth-form-input\"\r\n              placeholder=\"축제를 선택하세요\"\r\n              value={festivalName}\r\n              readOnly\r\n              style={{ flex: 1 }}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setShowFestivalModal(true)}\r\n              style={{ padding: \"0 12px\" }}\r\n            >\r\n              축제 검색\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"booth-form-field\" style={{ display: \"none\" }}>\r\n          <label className=\"booth-form-label\">\r\n            축제 ID(contentId) <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"booth-form-input\"\r\n            value={formContentId}\r\n            disabled\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            시작 날짜 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            className=\"booth-form-input\"\r\n            value={startDate}\r\n            onChange={(e) => setStartDate(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            끝 날짜 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            className=\"booth-form-input\"\r\n            value={endDate}\r\n            onChange={(e) => setEndDate(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            신청자 성함 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\"성함을 입력해주세요\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            상호명 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\"상호명을 입력해주세요\"\r\n            value={shop}\r\n            onChange={(e) => setShop(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            휴대 전화 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"tel\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\" - 는 제외하고 작성해 주세요 \"\r\n            value={phone}\r\n            onChange={(e) => setPhone(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            판매 품목 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\"판매할 품목을 입력해주세요\"\r\n            value={item}\r\n            onChange={(e) => setItem(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            상품소개 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <textarea\r\n            rows={4}\r\n            className=\"booth-form-textarea\"\r\n            placeholder=\"상품에 대한 상세한 소개를 입력해주세요\"\r\n            value={desc}\r\n            onChange={(e) => setDesc(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            대표이미지 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <div className=\"booth-file-upload\">\r\n            <input\r\n              type=\"file\"\r\n              id=\"fleamarket-file\"\r\n              className=\"booth-file-input\"\r\n              onChange={handleFileChange}\r\n              accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\r\n            />\r\n            <label htmlFor=\"fleamarket-file\" className=\"booth-file-label\">\r\n              <div className=\"booth-file-upload-icon\">+</div>\r\n              <p className=\"booth-file-upload-text\">\r\n                {selectedFile ? selectedFile.name : \"파일을 첨부해주세요\"}\r\n              </p>\r\n            </label>{\" \"}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            영업허가증 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\"영업허가증 번호를 입력해주세요\"\r\n            value={license}\r\n            onChange={(e) => setLicense(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">기타의견</label>\r\n          <textarea\r\n            rows={3}\r\n            className=\"booth-form-textarea\"\r\n            placeholder=\"기타 의견이나 요청사항을 입력해주세요\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <FestivalSearchModal\r\n        open={showFestivalModal}\r\n        onClose={() => setShowFestivalModal(false)}\r\n        onSelect={({ title, contentId }) => {\r\n          setFestivalName(title);\r\n          setFormContentId(contentId);\r\n        }}\r\n        areaOptions={areaOptions}\r\n      />\r\n      <div className=\"booth-submit-section\">\r\n        <button\r\n          className=\"booth-submit-button\"\r\n          onClick={handleSubmit}\r\n          disabled={loading}\r\n        >\r\n          {loading ? \"신청 중...\" : \"신청하기\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 푸드트럭 신청 폼\r\nconst FoodTruckForm = ({ areaOptions, contentId, contentTitle }) => {\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [festivalName, setFestivalName] = useState(contentTitle || \"\");\r\n  const [showFestivalModal, setShowFestivalModal] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [truck, setTruck] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [license, setLicense] = useState(\"\");\r\n  const [menu, setMenu] = useState(\"\");\r\n  const [size, setSize] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  // 날짜 상태 추가\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  // FoodTruckForm 등에서 contentId 상태 추가\r\n  const [truckContentId, setTruckContentId] = useState(contentId || \"\");\r\n  const { member } = useAuthStore();\r\n  const memberNo = member?.memberNo;\r\n  // const [applyContentId, setApplyContentId] = useState(contentId || \"\");\r\n\r\n  const handleFileChange = (event) => {\r\n    const files = Array.from(event.target.files);\r\n    setSelectedFiles(files);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    // startDate, endDate가 이 컴포넌트의 상태임을 명확히 사용\r\n    const boothStartDate = startDate;\r\n    const boothEndDate = endDate;\r\n    if (\r\n      !festivalName ||\r\n      !name ||\r\n      !truck ||\r\n      !phone ||\r\n      !menu ||\r\n      !boothStartDate ||\r\n      !boothEndDate ||\r\n      !license ||\r\n      selectedFiles.length === 0\r\n    ) {\r\n      alert(\"모든 필수 항목을 입력/선택해 주세요.\");\r\n      return;\r\n    }\r\n    if (!memberNo) {\r\n      alert(\"로그인 후 신청 가능합니다.\");\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"memberNo\", memberNo); // 로그인 사용자 번호 추가\r\n      formData.append(\"applicantName\", name);\r\n      formData.append(\"applicantCompany\", truck); // 푸드트럭명은 applicantCompany로 보냄\r\n      formData.append(\"boothTel\", phone);\r\n      formData.append(\"products\", menu); // 메뉴 종류를 products로 보냄\r\n      formData.append(\"boothStartDate\", boothStartDate);\r\n      formData.append(\"boothEndDate\", boothEndDate);\r\n      formData.append(\"contentId\", truckContentId);\r\n      formData.append(\"contentTitle\", festivalName);\r\n      formData.append(\"boothType\", 2); // 푸드트럭: 2로 전송\r\n      formData.append(\"image\", selectedFiles[0]);\r\n      // 영업허가증, 트럭크기 등은 formData에 추가하지 않음\r\n      // axios.post 직전: formData 값 모두 출력\r\n      for (let [key, value] of formData.entries()) {\r\n        console.log(key, value);\r\n      }\r\n      await axios.post(\"/api/booth/request\", formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n      alert(\"신청이 완료되었습니다!\");\r\n      setFestivalName(\"\");\r\n      setName(\"\");\r\n      setTruck(\"\");\r\n      setPhone(\"\");\r\n      setLicense(\"\");\r\n      setMenu(\"\");\r\n      setSize(\"\");\r\n      setSelectedFiles([]);\r\n      setStartDate(\"\");\r\n      setEndDate(\"\");\r\n    } catch {\r\n      alert(\"신청에 실패했습니다.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"booth-form-container\">\r\n      <h2 className=\"booth-form-title\">푸드트럭 신청</h2>\r\n\r\n      <div className=\"booth-form-fields\">\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            축제명 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <div style={{ display: \"flex\", gap: 8 }}>\r\n            <input\r\n              type=\"text\"\r\n              className=\"booth-form-input\"\r\n              placeholder=\"축제를 선택하세요\"\r\n              value={festivalName}\r\n              readOnly\r\n              style={{ flex: 1 }}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setShowFestivalModal(true)}\r\n              style={{ padding: \"0 12px\" }}\r\n            >\r\n              축제 검색\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            시작 날짜 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            className=\"booth-form-input\"\r\n            value={startDate}\r\n            onChange={(e) => setStartDate(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            끝 날짜 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            className=\"booth-form-input\"\r\n            value={endDate}\r\n            onChange={(e) => setEndDate(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            신청자 성함 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\"성함을 입력해주세요\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            푸드트럭명 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\"푸드트럭 이름을 입력해주세요\"\r\n            value={truck}\r\n            onChange={(e) => setTruck(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            휴대 전화 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"tel\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\" - 는 제외하고 작성해 주세요 \"\r\n            value={phone}\r\n            onChange={(e) => setPhone(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            영업허가증 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\"영업허가증 번호를 입력해주세요\"\r\n            value={license}\r\n            onChange={(e) => setLicense(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            메뉴 종류 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <select\r\n            className=\"booth-form-select\"\r\n            value={menu}\r\n            onChange={(e) => setMenu(e.target.value)}\r\n          >\r\n            <option value=\"\">메뉴 종류를 선택해주세요</option>\r\n            <option value=\"한식\">한식</option>\r\n            <option value=\"중식\">중식</option>\r\n            <option value=\"일식\">일식</option>\r\n            <option value=\"양식\">양식</option>\r\n            <option value=\"분식\">분식</option>\r\n            <option value=\"디저트\">디저트</option>\r\n            <option value=\"음료\">음료</option>\r\n            <option value=\"기타\">기타</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            트럭 크기 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <select\r\n            className=\"booth-form-select\"\r\n            value={size}\r\n            onChange={(e) => setSize(e.target.value)}\r\n          >\r\n            <option value=\"\">트럭 크기를 선택해주세요</option>\r\n            <option value=\"소형\">소형 (1톤 이하)</option>\r\n            <option value=\"중형\">중형 (1톤 ~ 2.5톤)</option>\r\n            <option value=\"대형\">대형 (2.5톤 이상)</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">영업허가증</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"booth-form-input\"\r\n            placeholder=\"영업허가증 번호를 입력해주세요\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">\r\n            파일 첨부 <span style={{ color: \"red\" }}>*</span>\r\n          </label>\r\n          <div className=\"booth-file-upload\">\r\n            <input\r\n              type=\"file\"\r\n              id=\"foodtruck-file\"\r\n              className=\"booth-file-input\"\r\n              onChange={handleFileChange}\r\n              accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\r\n              multiple\r\n            />\r\n            <label htmlFor=\"foodtruck-file\" className=\"booth-file-label\">\r\n              <div className=\"booth-file-upload-icon\">+</div>\r\n              <p className=\"booth-file-upload-text\">\r\n                {selectedFiles.length > 0\r\n                  ? `${selectedFiles.length}개 파일 선택됨`\r\n                  : \"사업자등록증, 영업허가증 및 대표이미지를 첨부해주세요\"}\r\n              </p>\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"booth-form-field\">\r\n          <label className=\"booth-form-label\">기타의견</label>\r\n          <textarea\r\n            rows={3}\r\n            className=\"booth-form-textarea\"\r\n            placeholder=\"기타 의견이나 요청사항을 입력해주세요\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <FestivalSearchModal\r\n        open={showFestivalModal}\r\n        onClose={() => setShowFestivalModal(false)}\r\n        onSelect={({ title, contentId }) => {\r\n          setFestivalName(title);\r\n          setTruckContentId(contentId);\r\n        }}\r\n        areaOptions={areaOptions}\r\n      />\r\n      <div className=\"booth-submit-section\">\r\n        <button\r\n          className=\"booth-submit-button\"\r\n          onClick={handleSubmit}\r\n          disabled={loading}\r\n        >\r\n          {loading ? \"신청 중...\" : \"신청하기\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 메인 컴포넌트\r\nconst Booth = () => {\r\n  const [activeTab, setActiveTab] = useState(\"fleamarket\");\r\n  const [areaOptions, setAreaOptions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchAreas() {\r\n      try {\r\n        const axiosApi = (await import(\"../../api/axiosAPI\")).default;\r\n        const response = await axiosApi.get(\r\n          `${import.meta.env.VITE_API_URL}/area/areas`\r\n        );\r\n        setAreaOptions(response.data);\r\n      } catch {\r\n        setAreaOptions([]);\r\n      }\r\n    }\r\n    fetchAreas();\r\n  }, []);\r\n\r\n  // 신청한 축제 정보 불러오기\r\n  const location = useLocation();\r\n  const { contentId, contentTitle, startDate, endDate, category } =\r\n    location.state || {};\r\n\r\n  // category 값이 있으면 강제로 activeTab 세팅 가능\r\n  useEffect(() => {\r\n    if (category) {\r\n      setActiveTab(category); // \"fleamarket\" 또는 \"foodtruck\"\r\n    }\r\n  }, [category]);\r\n\r\n  return (\r\n    <div className=\"booth-page\">\r\n      <Title />\r\n      {/* 이미지가 들어갈 div */}\r\n      <div className=\"booth-hero-image\">\r\n        {/* 여기에 이미지를 삽입하시면 됩니다 */}\r\n      </div>\r\n      <div className=\"booth-container\">\r\n        <div className=\"booth-main-content\">\r\n          <AISideMenu activeTab={activeTab} setActiveTab={setActiveTab} />\r\n\r\n          {/* 메인 콘텐츠 */}\r\n          <div className=\"booth-form-wrapper\">\r\n            {activeTab === \"fleamarket\" ? (\r\n              <FleaMarketForm\r\n                areaOptions={areaOptions}\r\n                contentId={contentId}\r\n                contentTitle={contentTitle}\r\n              />\r\n            ) : (\r\n              <FoodTruckForm\r\n                areaOptions={areaOptions}\r\n                contentId={contentId}\r\n                contentTitle={contentTitle}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Booth;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\booth\\Title.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\mainPage\\MainPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\mainPage\\VerticalSlider.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'changeSlide'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [changeSlide]","fix":{"range":[2172,2174],"text":"[changeSlide]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { ChevronUp, ChevronDown } from \"lucide-react\";\r\nimport \"./VerticalSlider.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst VerticalSlider = () => {\r\n  const [activeSlideIndex, setActiveSlideIndex] = useState(0);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSlideClick = (path) => {\r\n    if (path && path !== \"#\") {\r\n      navigate(path);\r\n    }\r\n  };\r\n\r\n  // 축제 슬라이드 데이터\r\n  const slides = [\r\n    {\r\n      title: \"이달의 축제\",\r\n      description: \"Festive와 함께 이달의 축제를 만나보세요\",\r\n      bgColor: \"#FFB3BA\",\r\n      bgImage:\r\n        \"https://images.unsplash.com/photo-1522383225653-ed111181a951?...\",\r\n      path: \"/this-month\",\r\n    },\r\n    {\r\n      title: \"축제달력\",\r\n      description: \"한눈에 보는 전국 축제일정!\",\r\n      bgColor: \"#E6B88A\",\r\n      bgImage: \"/src/assets/calendar.png\",\r\n      path: \"/calendar\",\r\n    },\r\n    {\r\n      title: \"지역별 축제\",\r\n      description: \"지역별로 다양한 축제를 즐겨보세요\",\r\n      bgColor: \"#E8D48F\",\r\n      bgImage:\r\n        \"https://korean.visitkorea.or.kr/kfes/resources/img/2023FestivalMap.jpg\",\r\n      path: \"/festival/local\",\r\n    },\r\n    {\r\n      title: \"와글와글\",\r\n      description: \"즐거운 사람들, 생생한 현장의 이야기와 사진들!\",\r\n      bgColor: \"#9BC49B\",\r\n      bgImage: \"/src/assets/wagle.png\",\r\n      path: \"/wagle\",\r\n    },\r\n    {\r\n      title: \"AI 여행코스 추천\",\r\n      description: \"당신만을 위한 맞춤형 축제 여행 코스를 AI가 추천해드려요\",\r\n      bgColor: \"#8BB8E8\",\r\n      bgImage: \"/src/assets/AiTravel.png\",\r\n      path: \"/ai-travel\",\r\n    },\r\n    {\r\n      title: \"부스 참가신청\",\r\n      description: \"축제를 함께할 플리마켓·푸드트럭 부스를 모집합니다!\",\r\n      bgColor: \"#C08BE8\",\r\n      bgImage: \"/src/assets/boothImg.jpg\",\r\n      path: \"/booth\",\r\n    },\r\n  ];\r\n\r\n  const changeSlide = (direction) => {\r\n    if (direction === \"up\") {\r\n      setActiveSlideIndex((prev) => (prev >= slides.length - 1 ? 0 : prev + 1));\r\n    } else if (direction === \"down\") {\r\n      setActiveSlideIndex((prev) => (prev <= 0 ? slides.length - 1 : prev - 1));\r\n    }\r\n  };\r\n\r\n  // 자동 슬라이드 (선택사항)\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      changeSlide(\"up\");\r\n    }, 5000); // 5초마다 자동 슬라이드\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"vertical-slider-container\">\r\n      {/* 왼쪽 텍스트 슬라이드 */}\r\n      <div\r\n        className=\"vertical-left-slide\"\r\n        style={{\r\n          top: `${-(slides.length - 1) * 100}%`,\r\n          transform: `translateY(${activeSlideIndex * 100}%)`,\r\n        }}\r\n      >\r\n        {slides\r\n          .slice() // 원본 배열을 변경하지 않기 위해 복사\r\n          .reverse()\r\n          .map((slide, index) => (\r\n            <div\r\n              key={index}\r\n              style={{ backgroundColor: slide.bgColor, cursor: \"pointer\" }}\r\n              onClick={() => handleSlideClick(slide.path)}\r\n            >\r\n              <h1>{slide.title}</h1>\r\n              <p>{slide.description}</p>\r\n            </div>\r\n          ))}\r\n      </div>\r\n\r\n      {/* 오른쪽 이미지 슬라이드 */}\r\n      <div\r\n        className=\"vertical-right-slide\"\r\n        style={{\r\n          transform: `translateY(${-activeSlideIndex * 100}%)`,\r\n        }}\r\n      >\r\n        {slides.map((slide, index) => (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              backgroundImage: `url('${slide.bgImage}')`,\r\n              cursor: \"pointer\",\r\n            }}\r\n            onClick={() => handleSlideClick(slide.path)}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerticalSlider;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\monthFestive\\Month-Slider.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\monthFestive\\ScrollToTop.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\monthFestive\\This-month-festive.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\monthFestive\\Title.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\scomponents\\weatherAPI\\WeatherAPI.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\store\\useAuthStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\utils\\nicknameCheck.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\aitravel\\AIChatbot.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'currentMaxDistance' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":106,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'performDistanceFiltering' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":123,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"performDistanceFiltering"},"fix":{"range":[3553,5009],"text":""},"desc":"Remove unused variable 'performDistanceFiltering'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":230,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":230,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[6200,6207],"text":""},"desc":"Remove unused variable 'index'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'member' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":286,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":286,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"member"},"fix":{"range":[7669,7677],"text":""},"desc":"Remove unused variable 'member'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":323,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":323,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":354,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":354,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[9614,9621],"text":""},"desc":"Remove unused variable 'index'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'renderDayTimeline' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":895,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":895,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"renderDayTimeline"},"fix":{"range":[26669,28361],"text":""},"desc":"Remove unused variable 'renderDayTimeline'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":1208,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":1208,"endColumn":74,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[39705,39712],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport axiosApi from \"../../api/axiosAPI\";\r\nimport \"./AIChatbot.css\";\r\nimport AItitle from \"./AItitle\";\r\nimport TravelCourseSaveModal from \"./TravelCourseSaveModal\";\r\nimport ScrollToTop from \"./ScrollToTop\";\r\nimport useAuthStore from \"../../store/useAuthStore\";\r\n\r\n// 백엔드 API 기본 URL\r\nconst API_BASE_URL = \"http://localhost:8080/api\";\r\n\r\nconst DEFAULT_RESPONSE = `안녕하세요! 한국 여행 전문 AI 어시스턴트입니다.\r\n\r\n여행하고 싶은 지역과 기간을 말씀해주시면 맞춤형 여행코스를 추천해드릴게요!\r\n\r\n 이용 방법:\r\n• \"서울 2박3일 여행계획 짜줘\" - 다양한 타입 랜덤 추천\r\n• \"부산 1박2일 관광지 위주로 추천해줘\" - 관광지 중심\r\n• \"제주도 당일치기 음식점 위주로 짜줘\" - 맛집 탐방\r\n• \"경주 2박3일 여행코스 위주로 계획해줘\" - 여행코스 중심\r\n• \"대구 1박2일 문화시설 위주로 추천\" - 문화/박물관 중심\r\n• \"인천 당일치기 레포츠 위주로 짜줘\" - 레포츠/체험 중심\r\n• \"광주 1박2일 쇼핑 위주로 계획해줘\" - 쇼핑몰/시장 중심\r\n\r\n축제 검색도 가능합니다!\r\n\r\n 주의사항:\r\n• 최대 4박5일까지만 여행 계획을 세울 수 있습니다\r\n• 지역명과 기간을 명확히 말씀해주세요`;\r\n\r\nconst HELP_RESPONSE = `제가 응답하기 어렵습니다. 이용법을 다시한번 숙지해주세요.\r\n\r\n올바른 이용 방법:\r\n• \"서울 2박3일 여행계획 짜줘\" - 다양한 타입 랜덤 추천\r\n• \"부산 1박2일 관광지 위주로 추천해줘\" - 관광지 중심\r\n• \"제주도 당일치기 음식점 위주로 짜줘\" - 맛집 탐방\r\n• \"경주 2박3일 여행코스 위주로 계획해줘\" - 여행코스 중심\r\n• \"대구 1박2일 문화시설 위주로 추천\" - 문화/박물관 중심\r\n• \"인천 당일치기 레포츠 위주로 짜줘\" - 레포츠/체험 중심\r\n• \"광주 1박2일 쇼핑 위주로 계획해줘\" - 쇼핑몰/시장 중심\r\n\r\n 축제 검색:\r\n• \"서울 축제 알려줘\" - 단순 축제 정보\r\n• \"부산 축제위주 2박3일 여행계획\" - 축제 기반 여행코스\r\n\r\n주의사항:\r\n• 최대 4박5일까지만 여행 계획을 세울 수 있습니다\r\n• 지역명과 기간을 명확히 말씀해주세요\r\n• 여행/축제 관련 요청만 처리 가능합니다`;\r\n\r\n// 두 지점 간 거리 계산 함수 (Haversine 공식)\r\nconst calculateDistance = (lat1, lng1, lat2, lng2) => {\r\n  const R = 6371; // 지구 반지름 (km)\r\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n  const dLng = ((lng2 - lng1) * Math.PI) / 180;\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos((lat1 * Math.PI) / 180) *\r\n      Math.cos((lat2 * Math.PI) / 180) *\r\n      Math.sin(dLng / 2) *\r\n      Math.sin(dLng / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c; // 거리 (km)\r\n};\r\n\r\n// 스마트 거리 필터링: 최소 보장 + 점진적 확장\r\nconst filterLocationsByDistance = (locations, initialMaxDistance = 30) => {\r\n  if (!locations || locations.length === 0) return [];\r\n\r\n  const totalDays = Math.max(...locations.map((loc) => loc.day || 1), 1);\r\n  const minPlacesPerDay = 2; // 하루에 최소 2개 장소 보장\r\n  const targetTotalPlaces = Math.max(totalDays * 3, 6); // 최소 총 6개 장소 보장\r\n\r\n  let currentMaxDistance = initialMaxDistance;\r\n  let filteredLocations = [];\r\n  let attempt = 1;\r\n\r\n  // 점진적으로 거리 제한을 늘려가며 충분한 장소 확보\r\n  while (filteredLocations.length < targetTotalPlaces && attempt <= 4) {\r\n    // Day별 분포 확인\r\n    const dayDistribution = {};\r\n    filteredLocations.forEach((loc) => {\r\n      const day = loc.day || 1;\r\n      dayDistribution[day] = (dayDistribution[day] || 0) + 1;\r\n    });\r\n\r\n    // 충분한 장소와 균형 잡힌 분포가 확보되었는지 확인\r\n    const hasMinPlaces = filteredLocations.length >= targetTotalPlaces;\r\n    const hasBalancedDistribution = Object.values(dayDistribution).every(\r\n      (count) =>\r\n        count >=\r\n        Math.min(\r\n          minPlacesPerDay,\r\n          Math.floor(filteredLocations.length / totalDays)\r\n        )\r\n    );\r\n\r\n    if (hasMinPlaces && hasBalancedDistribution) {\r\n      break;\r\n    }\r\n\r\n    // 다음 시도를 위해 거리 제한 확장\r\n    if (attempt === 1) currentMaxDistance = 50; // 30km → 50km\r\n    else if (attempt === 2) currentMaxDistance = 80; // 50km → 80km\r\n    else if (attempt === 3) currentMaxDistance = 120; // 80km → 120km\r\n\r\n    attempt++;\r\n  }\r\n\r\n  // 최종 결과가 여전히 부족하면 원본 데이터 사용\r\n  if (\r\n    filteredLocations.length <\r\n    Math.min(targetTotalPlaces, locations.length * 0.5)\r\n  ) {\r\n    return locations;\r\n  }\r\n\r\n  return filteredLocations;\r\n};\r\n\r\n// 실제 거리 필터링 수행 함수\r\nconst performDistanceFiltering = (locations, maxDistance) => {\r\n  // Day별로 그룹화\r\n  const dayGroups = {};\r\n  locations.forEach((location) => {\r\n    const day = location.day || 1;\r\n    if (!dayGroups[day]) {\r\n      dayGroups[day] = [];\r\n    }\r\n    dayGroups[day].push(location);\r\n  });\r\n\r\n  const filteredLocations = [];\r\n\r\n  // 각 Day별로 거리 제한 적용\r\n  Object.keys(dayGroups).forEach((day) => {\r\n    const dayLocations = dayGroups[day];\r\n\r\n    if (dayLocations.length === 0) return;\r\n    if (dayLocations.length === 1) {\r\n      filteredLocations.push(...dayLocations);\r\n      return;\r\n    }\r\n\r\n    // 좌표가 있는 장소들만 필터링\r\n    const validLocations = dayLocations.filter(\r\n      (loc) => loc.latitude && loc.longitude\r\n    );\r\n\r\n    if (validLocations.length <= 1) {\r\n      filteredLocations.push(...validLocations);\r\n      return;\r\n    }\r\n\r\n    // 첫 번째 장소를 기준점으로 설정\r\n    const baseLocation = validLocations[0];\r\n    const validGroup = [baseLocation];\r\n\r\n    // 나머지 장소들 중 거리 조건을 만족하는 것들 추가\r\n    for (let i = 1; i < validLocations.length; i++) {\r\n      const currentLocation = validLocations[i];\r\n      const distance = calculateDistance(\r\n        baseLocation.latitude,\r\n        baseLocation.longitude,\r\n        currentLocation.latitude,\r\n        currentLocation.longitude\r\n      );\r\n\r\n      if (distance <= maxDistance) {\r\n        validGroup.push(currentLocation);\r\n      }\r\n    }\r\n\r\n    filteredLocations.push(...validGroup);\r\n  });\r\n\r\n  return filteredLocations;\r\n};\r\n\r\n// Day별 색상 정의\r\nconst DAY_COLORS = {\r\n  1: \"#FF6B6B\", // 빨강\r\n  2: \"#4ECDC4\", // 청록\r\n  3: \"#9B59B6\", // 보라\r\n  4: \"#FF8C42\", // 주황\r\n  5: \"#2ECC71\", // 초록\r\n  6: \"#F39C12\", // 골드\r\n  7: \"#8E44AD\", // 진보라\r\n  8: \"#3498DB\", // 파랑\r\n  9: \"#E74C3C\", // 진빨강\r\n  10: \"#1ABC9C\", // 터키블루\r\n};\r\n\r\n// Day별 색상 가져오기 함수\r\nconst getDayColor = (day) => {\r\n  return DAY_COLORS[day] || \"#FF6B6B\";\r\n};\r\n\r\n// 사용자 메시지에서 총 일수 계산\r\nconst calculateTotalDaysFromMessage = (message) => {\r\n  if (!message) return 1;\r\n\r\n  const lowerMessage = message.toLowerCase().replace(/\\s+/g, \"\");\r\n\r\n  // 명확한 박수일 패턴 매칭\r\n  if (lowerMessage.includes(\"1박2일\")) return 2;\r\n  if (lowerMessage.includes(\"2박3일\")) return 3;\r\n  if (lowerMessage.includes(\"3박4일\")) return 4;\r\n  if (lowerMessage.includes(\"4박5일\")) return 5;\r\n  if (lowerMessage.includes(\"5박6일\")) return 6;\r\n  if (lowerMessage.includes(\"6박7일\")) return 7;\r\n\r\n  // 일수만 있는 경우\r\n  const dayMatch = message.match(/(\\d+)일/);\r\n  if (dayMatch) {\r\n    const days = parseInt(dayMatch[1]);\r\n    return days;\r\n  }\r\n\r\n  // 당일치기 패턴\r\n  if (lowerMessage.includes(\"당일\") || lowerMessage.includes(\"하루\")) {\r\n    return 1;\r\n  }\r\n\r\n  return 1; // 기본값\r\n};\r\n\r\n// 마커 HTML 생성 함수\r\nconst createMarkerContent = (day, index) => {\r\n  const color = DAY_COLORS[day] || \"#FF6B6B\";\r\n  return `\r\n    <div style=\"\r\n      background-color: ${color};\r\n      color: white;\r\n      border-radius: 50%;\r\n      width: 28px;\r\n      height: 28px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-weight: bold;\r\n      font-size: 12px;\r\n      border: 2px solid white;\r\n      box-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n    \">\r\n      D${day}\r\n    </div>\r\n  `;\r\n};\r\n\r\n// ✅ 모든 TourAPI 호출과 AI 분석이 백엔드에서 안전하게 처리됩니다\r\n\r\n// React 컴포넌트\r\nconst AIChatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      role: \"assistant\",\r\n      content: DEFAULT_RESPONSE,\r\n    },\r\n  ]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [locations, setLocations] = useState([]);\r\n  const [currentStreamMessage, setCurrentStreamMessage] = useState(\"\");\r\n  const [travelInfo, setTravelInfo] = useState({\r\n    festival: {\r\n      name: \"\",\r\n      period: \"\",\r\n      location: \"\",\r\n      image: \"\",\r\n      overview: \"\",\r\n      tel: \"\",\r\n      homepage: \"\",\r\n    },\r\n    courses: [],\r\n    transportation: { nearestStation: \"\", recommendedMode: \"\" },\r\n  });\r\n\r\n  // 🔄 여행코스 저장 관련 state\r\n  const [isSaveModalOpen, setIsSaveModalOpen] = useState(false);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [canSaveCourse, setCanSaveCourse] = useState(false);\r\n\r\n  // 🔐 로그인 상태 관리\r\n  const { isLoggedIn, member } = useAuthStore();\r\n\r\n  const mapRef = useRef(null);\r\n  const chatContainerRef = useRef(null);\r\n\r\n  // 카카오맵 초기화\r\n  useEffect(() => {\r\n    const initializeMap = async () => {\r\n      try {\r\n        const mapContainer = document.getElementById(\"kakao-map\");\r\n        if (!mapContainer) {\r\n          return;\r\n        }\r\n\r\n        // 카카오맵 SDK 로딩\r\n        if (!window.kakao || !window.kakao.maps) {\r\n          await new Promise((resolve, reject) => {\r\n            const script = document.createElement(\"script\");\r\n            script.async = true;\r\n            script.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${\r\n              import.meta.env.VITE_KAKAO_MAP_API_KEY\r\n            }&autoload=false`;\r\n            script.onload = () => {\r\n              window.kakao.maps.load(resolve);\r\n            };\r\n            script.onerror = reject;\r\n            document.head.appendChild(script);\r\n          });\r\n        }\r\n\r\n        const options = {\r\n          center: new window.kakao.maps.LatLng(37.5666805, 126.9784147),\r\n          level: 3,\r\n        };\r\n\r\n        const map = new window.kakao.maps.Map(mapContainer, options);\r\n        mapRef.current = map;\r\n      } catch (error) {\r\n        // 지도 초기화 실패\r\n      }\r\n    };\r\n\r\n    initializeMap();\r\n  }, []);\r\n\r\n  // 마커 표시\r\n  useEffect(() => {\r\n    if (!mapRef.current || locations.length === 0) return;\r\n\r\n    const map = mapRef.current;\r\n\r\n    // 기존 마커 및 폴리라인 제거\r\n    if (map._markers) {\r\n      map._markers.forEach((marker) => marker.setMap(null));\r\n    }\r\n    if (map._polylines) {\r\n      map._polylines.forEach((polyline) => polyline.setMap(null));\r\n    }\r\n    map._markers = [];\r\n    map._polylines = [];\r\n\r\n    const bounds = new window.kakao.maps.LatLngBounds();\r\n\r\n    // 🎪 축제 검색인지 여행코스 검색인지 구분\r\n    const isFestivalOnly = travelInfo.requestType === \"festival_info\";\r\n\r\n    if (isFestivalOnly) {\r\n      // 🎪 축제 검색: 단순한 마커만 표시 (연결선 없음, 거리 표시 없음)\r\n      locations.forEach((location, index) => {\r\n        const lat = location.latitude || location.lat;\r\n        const lng = location.longitude || location.lng;\r\n\r\n        if (!lat || !lng) {\r\n          return;\r\n        }\r\n\r\n        const markerPosition = new window.kakao.maps.LatLng(lat, lng);\r\n\r\n        // 축제 전용 마커 (빨간색 축제 아이콘)\r\n        const festivalMarker = new window.kakao.maps.CustomOverlay({\r\n          position: markerPosition,\r\n          content: `<div style=\"\r\n            background: #FF6B6B;\r\n            color: white;\r\n            border-radius: 50%;\r\n            width: 30px;\r\n            height: 30px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-size: 16px;\r\n            font-weight: bold;\r\n            box-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n            border: 2px solid white;\r\n            cursor: pointer;\r\n          \">F</div>`,\r\n          yAnchor: 1,\r\n        });\r\n\r\n        festivalMarker.setMap(map);\r\n        map._markers.push(festivalMarker);\r\n\r\n        // 축제 인포윈도우\r\n        const imageContent = location.image\r\n          ? `<img src=\"${location.image}\" alt=\"${location.name}\" style=\"width:200px;height:120px;object-fit:cover;border-radius:8px;margin-bottom:8px;\" onerror=\"this.style.display='none'\"/>`\r\n          : \"\";\r\n\r\n        const infowindow = new window.kakao.maps.InfoWindow({\r\n          content: `<div style=\"padding:12px;font-size:13px;max-width:220px;text-align:center;line-height:1.4;\">\r\n            ${imageContent}\r\n            <div style=\"color:#FF6B6B;font-weight:bold;margin-bottom:4px;\">🎪 ${\r\n              location.category || \"축제\"\r\n            }</div>\r\n            <div style=\"color:#333;font-weight:600;font-size:14px;margin-bottom:6px;\">${\r\n              location.name\r\n            }</div>\r\n            <div style=\"color:#666;font-size:11px;\">${\r\n              location.description || \"\"\r\n            }</div>\r\n          </div>`,\r\n        });\r\n\r\n        // 클릭 이벤트\r\n        window.kakao.maps.event.addListener(festivalMarker, \"click\", () => {\r\n          if (map._currentInfoWindow) {\r\n            map._currentInfoWindow.close();\r\n          }\r\n          infowindow.open(map, festivalMarker);\r\n          map._currentInfoWindow = infowindow;\r\n        });\r\n\r\n        bounds.extend(markerPosition);\r\n      });\r\n    } else {\r\n      // Day별로 그룹화\r\n      const dayGroups = {};\r\n      locations.forEach((location) => {\r\n        if (!dayGroups[location.day]) {\r\n          dayGroups[location.day] = [];\r\n        }\r\n        dayGroups[location.day].push(location);\r\n      });\r\n\r\n      // 각 Day별로 마커 생성 및 연결선 그리기\r\n      Object.keys(dayGroups).forEach((day) => {\r\n        const dayLocations = dayGroups[day];\r\n        const dayColor = DAY_COLORS[parseInt(day)] || \"#FF6B6B\";\r\n        const polylinePath = [];\r\n\r\n        dayLocations.forEach((location, index) => {\r\n          const lat = location.latitude || location.lat;\r\n          const lng = location.longitude || location.lng;\r\n\r\n          if (!lat || !lng) {\r\n            return;\r\n          }\r\n          const markerPosition = new window.kakao.maps.LatLng(lat, lng);\r\n\r\n          // 여행지 마커 (Day별 색상과 번호)\r\n          const travelMarker = new window.kakao.maps.CustomOverlay({\r\n            position: markerPosition,\r\n            content: createMarkerContent(location.day, index + 1),\r\n            yAnchor: 1,\r\n          });\r\n\r\n          travelMarker.setMap(map);\r\n          map._markers.push(travelMarker);\r\n\r\n          // 장소명 라벨 추가 (마커 위에)\r\n          const labelPosition = new window.kakao.maps.LatLng(\r\n            lat + 0.001, // 마커보다 약간 위에 위치\r\n            lng\r\n          );\r\n\r\n          const labelOverlay = new window.kakao.maps.CustomOverlay({\r\n            position: labelPosition,\r\n            content: `<div style=\"\r\n              background: rgba(255,255,255,0.95);\r\n              border: 1px solid ${dayColor};\r\n              border-radius: 8px;\r\n              padding: 4px 8px;\r\n              font-size: 11px;\r\n              font-weight: bold;\r\n              color: #333;\r\n              box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n              text-align: center;\r\n              white-space: nowrap;\r\n              max-width: 150px;\r\n              overflow: hidden;\r\n              text-overflow: ellipsis;\r\n            \">${location.name}</div>`,\r\n            yAnchor: 1,\r\n          });\r\n\r\n          labelOverlay.setMap(map);\r\n          map._markers.push(labelOverlay);\r\n\r\n          // 여행지 인포윈도우\r\n          const imageContent = location.image\r\n            ? `<img src=\"${location.image}\" alt=\"${location.name}\" style=\"width:200px;height:120px;object-fit:cover;border-radius:8px;margin-bottom:8px;\" onerror=\"this.style.display='none'\"/>`\r\n            : \"\";\r\n\r\n          const infowindow = new window.kakao.maps.InfoWindow({\r\n            content: `<div style=\"padding:12px;font-size:13px;max-width:220px;text-align:center;line-height:1.4;\">\r\n              ${imageContent}\r\n              <div style=\"color:${dayColor};font-weight:bold;margin-bottom:4px;\">Day ${\r\n              location.day\r\n            }</div>\r\n              <div style=\"color:#333;font-weight:600;font-size:14px;margin-bottom:6px;\">${\r\n                location.name\r\n              }</div>\r\n              <span style=\"background:${dayColor};color:white;padding:2px 6px;border-radius:12px;font-size:10px;\">${\r\n              location.category || \"관광지\"\r\n            }</span>\r\n            </div>`,\r\n          });\r\n\r\n          // 클릭 이벤트\r\n          window.kakao.maps.event.addListener(travelMarker, \"click\", () => {\r\n            if (map._currentInfoWindow) {\r\n              map._currentInfoWindow.close();\r\n            }\r\n            infowindow.open(map, travelMarker);\r\n            map._currentInfoWindow = infowindow;\r\n          });\r\n\r\n          // 폴리라인 경로에 추가\r\n          polylinePath.push(markerPosition);\r\n          bounds.extend(markerPosition);\r\n        });\r\n\r\n        // 같은 Day끼리 연결선 그리기\r\n        if (polylinePath.length > 1) {\r\n          const polyline = new window.kakao.maps.Polyline({\r\n            path: polylinePath,\r\n            strokeWeight: 3,\r\n            strokeColor: dayColor,\r\n            strokeOpacity: 0.8,\r\n            strokeStyle: \"solid\",\r\n          });\r\n\r\n          polyline.setMap(map);\r\n          map._polylines.push(polyline);\r\n\r\n          // 각 선분마다 거리 표기 추가\r\n          for (let i = 0; i < polylinePath.length - 1; i++) {\r\n            const startPos = polylinePath[i];\r\n            const endPos = polylinePath[i + 1];\r\n\r\n            // 거리 계산 (km)\r\n            const distance = calculateDistance(\r\n              startPos.getLat(),\r\n              startPos.getLng(),\r\n              endPos.getLat(),\r\n              endPos.getLng()\r\n            );\r\n\r\n            // 선분 중간 지점 계산\r\n            const midLat = (startPos.getLat() + endPos.getLat()) / 2;\r\n            const midLng = (startPos.getLng() + endPos.getLng()) / 2;\r\n            const midPosition = new window.kakao.maps.LatLng(midLat, midLng);\r\n\r\n            // 거리 라벨 표시\r\n            const distanceOverlay = new window.kakao.maps.CustomOverlay({\r\n              position: midPosition,\r\n              content: `<div style=\"\r\n                background: ${dayColor};\r\n                color: white;\r\n                border-radius: 12px;\r\n                padding: 3px 8px;\r\n                font-size: 10px;\r\n                font-weight: bold;\r\n                box-shadow: 0 1px 3px rgba(0,0,0,0.3);\r\n                text-align: center;\r\n                white-space: nowrap;\r\n              \">${distance.toFixed(1)}km</div>`,\r\n              yAnchor: 0.5,\r\n            });\r\n\r\n            distanceOverlay.setMap(map);\r\n            map._markers.push(distanceOverlay);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // 지도 범위 조정\r\n    if (locations.length > 0) {\r\n      map.setBounds(bounds);\r\n    }\r\n  }, [locations, travelInfo.requestType]);\r\n\r\n  // 스크롤 자동 조정\r\n  useEffect(() => {\r\n    if (chatContainerRef.current) {\r\n      const scrollToBottom = () => {\r\n        chatContainerRef.current.scrollTop =\r\n          chatContainerRef.current.scrollHeight;\r\n      };\r\n      setTimeout(scrollToBottom, 100);\r\n    }\r\n  }, [messages, currentStreamMessage]);\r\n\r\n  // 🎯 AI 응답을 사용자 친화적으로 정리하는 함수\r\n  const cleanAIResponseForUser = (content) => {\r\n    if (!content) return content;\r\n\r\n    return (\r\n      content\r\n        // @location, @day 태그 완전 제거\r\n        .replace(/@location:\\s*\\[\\d+\\.\\d+\\s*,\\s*\\d+\\.\\d+\\]\\s*@day:\\d+/g, \"\")\r\n        .replace(/@location:\\s*@day:\\d+/g, \"\")\r\n        .replace(/@location:/g, \"\")\r\n        .replace(/@day:\\d+/g, \"\")\r\n\r\n        // 위치정보 관련 텍스트 제거\r\n        .replace(/위치정보:\\s*/g, \"\")\r\n\r\n        // 불필요한 기술적 문구 제거\r\n        .replace(/\\(유명 관광지 보완\\)/g, \"\")\r\n        .replace(/\\(TourAPI 데이터 기반\\)/g, \"\")\r\n        .replace(/TourAPI 우선 \\+ AI 보완 방식으로/g, \"\")\r\n\r\n        // Day 형식 정리 (Day 1, Day 2 등을 더 예쁘게)\r\n        .replace(/Day (\\d+)/g, \"📅 $1일차\")\r\n\r\n        // 시간 형식 정리 (오전/오후 강조)\r\n        .replace(/오전 (\\d+):(\\d+)/g, \"🌅 오전 $1:$2\")\r\n        .replace(/오후 (\\d+):(\\d+)/g, \"🌆 오후 $1:$2\")\r\n\r\n        // 연속된 줄바꿈 정리 (3개 이상을 2개로)\r\n        .replace(/\\n{3,}/g, \"\\n\\n\")\r\n        // 줄바꿈은 보존하고 공백과 탭만 정리\r\n        .replace(/[ \\t]+/g, \" \")\r\n        .trim()\r\n    );\r\n  };\r\n\r\n  // 🛡️ 보안 강화된 메시지 전송 처리 - 백엔드 중심 (TourAPI 서비스키 보호)\r\n  const handleSendMessage = async () => {\r\n    if (!inputMessage.trim()) return;\r\n\r\n    const userMessage = inputMessage.trim();\r\n    setMessages((prev) => [...prev, { role: \"user\", content: userMessage }]);\r\n    setInputMessage(\"\");\r\n    setLoading(true);\r\n    setCurrentStreamMessage(\"\");\r\n\r\n    try {\r\n      // 🎯 백엔드에 원본 메시지만 전달 - 모든 TourAPI 처리를 백엔드가 안전하게 담당\r\n      const response = await axios.post(\r\n        `${API_BASE_URL}/ai/chat`,\r\n        { message: userMessage },\r\n        {\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n        }\r\n      );\r\n\r\n      if (response.status !== 200) {\r\n        throw new Error(`서버 오류: ${response.status}`);\r\n      }\r\n\r\n      const data = response.data;\r\n\r\n      //  애매한 요청인지 확인\r\n      if (\r\n        data.requestType === \"unclear_request\" ||\r\n        data.requestType === \"invalid_request\"\r\n      ) {\r\n        // 이용법 안내 메시지 표시\r\n        setMessages((prev) => [\r\n          ...prev,\r\n          {\r\n            role: \"assistant\",\r\n            content: HELP_RESPONSE,\r\n          },\r\n        ]);\r\n        setCurrentStreamMessage(\"\");\r\n        setLoading(false);\r\n\r\n        // travelInfo 초기화\r\n        setTravelInfo({\r\n          requestType: \"help_shown\",\r\n          festivals: [],\r\n          courses: [],\r\n          transportation: { nearestStation: \"\", recommendedMode: \"\" },\r\n        });\r\n        setLocations([]);\r\n        setCanSaveCourse(false);\r\n        return;\r\n      }\r\n\r\n      const content = data.content || \"죄송합니다. 응답을 생성할 수 없습니다.\";\r\n\r\n      // 🎨 사용자 친화적으로 응답 정리\r\n      const cleanContent = cleanAIResponseForUser(content);\r\n\r\n      // 스트리밍 시뮬레이션\r\n      let displayedResponse = \"\";\r\n      const chunks = cleanContent.match(/.{1,50}/g) || [cleanContent];\r\n\r\n      for (const chunk of chunks) {\r\n        displayedResponse += chunk;\r\n        setCurrentStreamMessage(removeEmojisFromText(displayedResponse));\r\n        await new Promise((resolve) => setTimeout(resolve, 30)); // 더 빠르게\r\n      }\r\n\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        {\r\n          role: \"assistant\",\r\n          content: cleanContent,\r\n        },\r\n      ]);\r\n\r\n      setCurrentStreamMessage(\"\");\r\n\r\n      // 🗺️ 카카오맵 위치 설정 (백엔드 locations 사용)\r\n      if (data.locations && data.locations.length > 0) {\r\n        // 🎯 30km 거리 제한 적용 - Day별 그룹 내 장소들이 30km 이내가 되도록 필터링\r\n        const filteredLocations = filterLocationsByDistance(data.locations, 30);\r\n\r\n        // 🎯 백엔드에서 이미 day별로 분배된 데이터를 거리 필터링 후 사용\r\n        setTimeout(() => {\r\n          setLocations(filteredLocations);\r\n        }, 500);\r\n      } else {\r\n        setLocations([]);\r\n      }\r\n\r\n      // 🎯 백엔드에서 완성된 축제 정보 사용\r\n      const finalFestivals = data.festivals || [];\r\n\r\n      // 🚫 거부된 요청인지 확인\r\n      const isRejectedRequest = data.requestType === \"rejected\";\r\n\r\n      // 🎯 필터링된 locations를 사용하여 travelInfo 설정\r\n      const finalLocations =\r\n        data.locations && data.locations.length > 0\r\n          ? filterLocationsByDistance(data.locations, 30)\r\n          : [];\r\n\r\n      setTravelInfo({\r\n        requestType: data.requestType,\r\n        festivals: finalFestivals,\r\n        travelCourse: data.travelCourse,\r\n        mainSpot: data.travelCourse\r\n          ? {\r\n              name: data.travelCourse.title || \"AI 추천 여행\",\r\n              location: \"한국관광공사 TourAPI 검증 지역\",\r\n              overview: \"백엔드에서 안전하게 처리된 실제 관광 정보입니다.\",\r\n            }\r\n          : null,\r\n        courses: finalLocations,\r\n        transportation: {\r\n          nearestStation: \"대중교통 이용 가능\",\r\n          recommendedMode: \"AI 최적 경로 분석 완료\",\r\n        },\r\n        isRejected: isRejectedRequest, // 거부 상태 추가\r\n        // 저장용 추가 정보\r\n        regionName: data.regionName,\r\n        areaCode: data.areaCode,\r\n        totalDays:\r\n          data.travelCourse?.totalDays ||\r\n          calculateTotalDaysFromMessage(userMessage),\r\n        originalMessage: userMessage,\r\n        courseDescription: data.courseDescription, // AI가 생성한 day별 코스 설명\r\n      });\r\n\r\n      // 🎯 여행코스 저장 가능 여부 확인 (여행 계획 요청만 저장 가능)\r\n      const hasFilteredLocations = finalLocations && finalLocations.length > 0;\r\n      const isTravelRecommendation =\r\n        data.requestType &&\r\n        (data.requestType === \"travel_only\" ||\r\n          data.requestType === \"festival_travel\");\r\n\r\n      setCanSaveCourse(hasFilteredLocations && isTravelRecommendation);\r\n    } catch (error) {\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        {\r\n          role: \"assistant\",\r\n          content: `죄송합니다. ${\r\n            error.message || \"응답 생성 중 오류가 발생했습니다.\"\r\n          } 다시 시도해주세요.`,\r\n        },\r\n      ]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  // 🔐 로그인 체크 후 저장 모달 열기\r\n  const handleSaveButtonClick = () => {\r\n    if (!isLoggedIn) {\r\n      alert(\"로그인이 필요한 서비스입니다.\\n먼저 로그인해주세요!\");\r\n      return;\r\n    }\r\n    setIsSaveModalOpen(true);\r\n  };\r\n\r\n  // 🔄 여행코스 저장 기능\r\n  const handleSaveTravelCourse = async (saveData) => {\r\n    setIsSaving(true);\r\n\r\n    try {\r\n      // 🔐 axiosApi 사용으로 자동 인증 처리\r\n      const response = await axiosApi.post(\"/api/travel-course/save\", saveData);\r\n      const result = response.data;\r\n\r\n      if (response.status !== 200) {\r\n        throw new Error(result.message || \"저장에 실패했습니다.\");\r\n      }\r\n\r\n      if (result.success) {\r\n        alert(\r\n          ` ${\r\n            saveData.isShared === \"Y\" ? \"공유\" : \"개인\"\r\n          } 여행코스가 성공적으로 저장되었습니다!`\r\n        );\r\n        setIsSaveModalOpen(false);\r\n      } else {\r\n        throw new Error(result.message || \"저장에 실패했습니다.\");\r\n      }\r\n    } catch (error) {\r\n      // axiosApi가 자동으로 401 에러 처리를 하므로 간단한 에러 메시지만 표시\r\n      if (error.response?.status === 401) {\r\n        alert(\"로그인이 필요한 서비스입니다.\\n다시 로그인해주세요!\");\r\n      } else {\r\n        alert(`저장 실패: ${error.response?.data?.message || error.message}`);\r\n      }\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  // 프론트엔드 이모지 제거 함수\r\n  const removeEmojisFromText = (text) => {\r\n    if (!text) return text;\r\n\r\n    return (\r\n      text\r\n        // 이모지 제거\r\n        .replace(/[\\u{1F600}-\\u{1F64F}]/gu, \"\") // 감정 표현\r\n        .replace(/[\\u{1F300}-\\u{1F5FF}]/gu, \"\") // 기타 심볼\r\n        .replace(/[\\u{1F680}-\\u{1F6FF}]/gu, \"\") // 교통/지도\r\n        .replace(/[\\u{1F700}-\\u{1F77F}]/gu, \"\") // 연금술 심볼\r\n        .replace(/[\\u{1F780}-\\u{1F7FF}]/gu, \"\") // 기하학적 모양\r\n        .replace(/[\\u{1F800}-\\u{1F8FF}]/gu, \"\") // 화살표\r\n        .replace(/[\\u{2600}-\\u{26FF}]/gu, \"\") // 기타 심볼\r\n        .replace(/[\\u{2700}-\\u{27BF}]/gu, \"\") // 단위 기호\r\n\r\n        // 자주 사용되는 이모지들 직접 제거\r\n        .replace(/🎯|🗺️|📝|⏰|🎨|📋|📍|🏛️|🔒/g, \"\")\r\n        .replace(/⚠️|🚨|✅|❌|🤖|🌐|🎭|🔄|💡/g, \"\")\r\n        .replace(/📊|🎪|🌟|💫|⭐|🏷️|📌|🔍/g, \"\")\r\n        .replace(/✨|🌈|🎉|🎊|🎈|🎁|🎀/g, \"\")\r\n\r\n        // 화살표 및 기타 특수 기호 제거\r\n        .replace(/→|←|↑|↓|▶|◀|▲|▼/g, \"\")\r\n        .replace(/●|○|■|□|◆|◇|★|☆/g, \"\")\r\n        .replace(/♥|♡|♠|♣|♦|♧|※|◎/g, \"\")\r\n\r\n        // 마크다운 스타일 기호 제거\r\n        .replace(/\\*\\*/g, \"\")\r\n        .replace(/\\*/g, \"\")\r\n        .replace(/###|##|#/g, \"\")\r\n        .replace(/---/g, \"\")\r\n        .replace(/___/g, \"\")\r\n        .replace(/```/g, \"\")\r\n        .replace(/`/g, \"\")\r\n\r\n        // 괄호 안의 특수문자들 제거\r\n        .replace(/\\[[^\\]]*\\]/g, \"\") // [내용] 형태 제거\r\n\r\n        // 여러 공백을 하나로 정리 (줄바꿈은 보존)\r\n        .replace(/[ \\t]+/g, \" \") // 공백과 탭만 정리, 줄바꿈은 보존\r\n        .trim()\r\n    );\r\n  };\r\n\r\n  // AI 응답 텍스트 처리 함수 (이모지 제거 포함)\r\n  const formatAIResponse = (content) => {\r\n    if (!content) return [];\r\n\r\n    // 이모지 제거\r\n    const cleanContent = removeEmojisFromText(content);\r\n\r\n    return cleanContent.split(\"\\n\").map((line, index) => {\r\n      // 빈 줄 처리\r\n      if (!line.trim()) {\r\n        return <br key={index} />;\r\n      }\r\n\r\n      const trimmedLine = line.trim();\r\n\r\n      // 모든 텍스트를 기본 스타일로 표시 (줄바꿈만 처리)\r\n      return <p key={index}>{trimmedLine}</p>;\r\n    });\r\n  };\r\n\r\n  //Day별 타임라인 렌더링 함수\r\n  const renderDayTimeline = (day, dayLocations) => {\r\n    return (\r\n      <div key={`day-${day}`} style={{ marginBottom: \"30px\" }}>\r\n        <h4\r\n          style={{\r\n            color: getDayColor(day),\r\n            borderBottom: `2px solid ${getDayColor(day)}`,\r\n            paddingBottom: \"10px\",\r\n            marginBottom: \"15px\",\r\n          }}\r\n        >\r\n          Day {day}\r\n        </h4>\r\n        {dayLocations.map((location, index) => (\r\n          <div\r\n            key={`${day}-${index}`}\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              marginBottom: \"15px\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                background: getDayColor(day),\r\n                color: \"white\",\r\n                borderRadius: \"50%\",\r\n                width: \"24px\",\r\n                height: \"24px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                fontSize: \"12px\",\r\n                fontWeight: \"bold\",\r\n                marginRight: \"10px\",\r\n                flexShrink: 0,\r\n              }}\r\n            >\r\n              {index + 1}\r\n            </div>\r\n            <div style={{ flex: 1 }}>\r\n              <div style={{ fontSize: \"14px\", fontWeight: \"bold\" }}>\r\n                {location.name}\r\n              </div>\r\n              {location.time && (\r\n                <div\r\n                  style={{ fontSize: \"12px\", color: \"#666\", marginTop: \"2px\" }}\r\n                >\r\n                  {location.time}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AItitle currentPage=\"AI 여행코스 추천\" showLocation={true} />\r\n      <div className=\"ai-chatbot-container\">\r\n        <div className=\"ai-chatbot-chat-map-container\">\r\n          <div className=\"ai-chatbot-chat-section\">\r\n            <div className=\"ai-chatbot-chat-messages\" ref={chatContainerRef}>\r\n              {messages.map((message, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`ai-chatbot-message ${\r\n                    message.role === \"user\" ? \"user\" : \"assistant\"\r\n                  }`}\r\n                >\r\n                  <div className=\"ai-chatbot-message-content\">\r\n                    {message.role === \"assistant\"\r\n                      ? formatAIResponse(message.content)\r\n                      : message.content\r\n                          .split(\"\\n\")\r\n                          .map((line, i) => <p key={i}>{line}</p>)}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              {currentStreamMessage && (\r\n                <div className=\"ai-chatbot-message assistant\">\r\n                  <div className=\"ai-chatbot-message-content\">\r\n                    {formatAIResponse(currentStreamMessage)}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {loading && !currentStreamMessage && (\r\n                <div className=\"ai-chatbot-message assistant\">\r\n                  <div className=\"ai-chatbot-message-content loading\">\r\n                    여행 계획을 생성하는중...\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"ai-chatbot-chat-input\">\r\n              <textarea\r\n                value={inputMessage}\r\n                onChange={(e) => setInputMessage(e.target.value)}\r\n                onKeyPress={handleKeyPress}\r\n                placeholder=\"여행 계획을 입력해주세요...\"\r\n                disabled={loading}\r\n              />\r\n              <button onClick={handleSendMessage} disabled={loading}>\r\n                전송\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"ai-chatbot-map-section\">\r\n            {/* 카카오맵만 전체 너비로 표시 */}\r\n            <div\r\n              id=\"kakao-map\"\r\n              className=\"ai-chatbot-kakao-map\"\r\n              style={{\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                borderRadius: \"8px\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* 🎯 새로운 여행 정보 요약 섹션 - requestType에 따른 조건부 표시 */}\r\n        {!loading &&\r\n          !currentStreamMessage &&\r\n          travelInfo.requestType &&\r\n          travelInfo.requestType !== \"general_chat\" &&\r\n          travelInfo.requestType !== \"help_shown\" &&\r\n          travelInfo.requestType !== \"unclear_request\" &&\r\n          !travelInfo.isRejected && (\r\n            <div className=\"ai-chatbot-travel-summary\">\r\n              <div className=\"ai-chatbot-travel-info-grid\">\r\n                {/* 축제 정보 섹션 - festival_info일 때만 표시 */}\r\n                {travelInfo.requestType === \"festival_info\" &&\r\n                  travelInfo.festivals &&\r\n                  travelInfo.festivals.length > 0 && (\r\n                    <div className=\"ai-chatbot-festival-info\">\r\n                      <h3>축제 정보</h3>\r\n                      {/* 가로 카드형 배치 */}\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          gap: \"20px\",\r\n                          overflowX: \"auto\",\r\n                          paddingBottom: \"10px\",\r\n                        }}\r\n                      >\r\n                        {travelInfo.festivals.map((festival, index) => (\r\n                          <div\r\n                            key={index}\r\n                            className=\"ai-chatbot-festival-card\"\r\n                            style={{\r\n                              minWidth: \"300px\",\r\n                              maxWidth: \"350px\",\r\n                              flex: \"0 0 auto\",\r\n                              background: \"white\",\r\n                              borderRadius: \"12px\",\r\n                              boxShadow: \"0 4px 6px rgba(0,0,0,0.1)\",\r\n                              overflow: \"hidden\",\r\n                              cursor: \"pointer\",\r\n                              transition: \"transform 0.2s ease\",\r\n                            }}\r\n                            onClick={() => {\r\n                              // 🎪 축제 클릭 시 해당 마커로 이동\r\n                              if (\r\n                                mapRef.current &&\r\n                                festival.mapY &&\r\n                                festival.mapX\r\n                              ) {\r\n                                const moveLatLon = new window.kakao.maps.LatLng(\r\n                                  parseFloat(festival.mapY),\r\n                                  parseFloat(festival.mapX)\r\n                                );\r\n                                mapRef.current.setCenter(moveLatLon);\r\n                                mapRef.current.setLevel(3);\r\n                              }\r\n                            }}\r\n                            onMouseEnter={(e) => {\r\n                              e.currentTarget.style.transform =\r\n                                \"translateY(-4px)\";\r\n                            }}\r\n                            onMouseLeave={(e) => {\r\n                              e.currentTarget.style.transform = \"translateY(0)\";\r\n                            }}\r\n                          >\r\n                            {festival.image && (\r\n                              <div className=\"ai-chatbot-festival-image-container\">\r\n                                <img\r\n                                  src={festival.image}\r\n                                  alt={festival.name}\r\n                                  style={{\r\n                                    width: \"100%\",\r\n                                    height: \"200px\",\r\n                                    objectFit: \"cover\",\r\n                                  }}\r\n                                  onError={(e) => {\r\n                                    e.target.parentElement.style.display =\r\n                                      \"none\";\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                            )}\r\n                            <div style={{ padding: \"16px\" }}>\r\n                              <h4\r\n                                style={{\r\n                                  margin: \"0 0 12px 0\",\r\n                                  fontSize: \"16px\",\r\n                                  color: \"#1e40af\",\r\n                                  fontWeight: \"600\",\r\n                                  lineHeight: \"1.3\",\r\n                                }}\r\n                              >\r\n                                {festival.name}\r\n                              </h4>\r\n                              <p\r\n                                style={{\r\n                                  margin: \"6px 0\",\r\n                                  color: \"#64748b\",\r\n                                  fontSize: \"13px\",\r\n                                }}\r\n                              >\r\n                                <strong style={{ color: \"#374151\" }}>\r\n                                  기간:\r\n                                </strong>{\" \"}\r\n                                {festival.period}\r\n                              </p>\r\n                              <p\r\n                                style={{\r\n                                  margin: \"6px 0\",\r\n                                  color: \"#64748b\",\r\n                                  fontSize: \"13px\",\r\n                                }}\r\n                              >\r\n                                <strong style={{ color: \"#374151\" }}>\r\n                                  장소:\r\n                                </strong>{\" \"}\r\n                                {festival.location}\r\n                              </p>\r\n                              {festival.tel && festival.tel !== \"정보 없음\" && (\r\n                                <p\r\n                                  style={{\r\n                                    margin: \"6px 0\",\r\n                                    color: \"#64748b\",\r\n                                    fontSize: \"13px\",\r\n                                  }}\r\n                                >\r\n                                  <strong style={{ color: \"#374151\" }}>\r\n                                    연락처:\r\n                                  </strong>{\" \"}\r\n                                  {festival.tel}\r\n                                </p>\r\n                              )}\r\n                              {festival.description && (\r\n                                <p\r\n                                  style={{\r\n                                    margin: \"12px 0 0 0\",\r\n                                    lineHeight: \"1.5\",\r\n                                    color: \"#4b5563\",\r\n                                    fontSize: \"13px\",\r\n                                  }}\r\n                                >\r\n                                  {festival.description}\r\n                                </p>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                {/* 🗺️ 여행지 갤러리 - 축제 정보 검색이 아닐 때만 표시 */}\r\n                {travelInfo.requestType !== \"festival_info\" &&\r\n                  locations.length > 0 && (\r\n                    <div className=\"ai-chatbot-gallery-info\">\r\n                      <h3>여행지 갤러리</h3>\r\n\r\n                      {/* 가로 스크롤 한 줄 배치 - 카카오맵 마커 수만큼만 표시 */}\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          gap: \"20px\",\r\n                          overflowX: \"auto\",\r\n                          paddingBottom: \"20px\",\r\n                        }}\r\n                      >\r\n                        {(() => {\r\n                          const dayGroups = {};\r\n                          locations.forEach((location) => {\r\n                            if (!dayGroups[location.day]) {\r\n                              dayGroups[location.day] = [];\r\n                            }\r\n                            dayGroups[location.day].push(location);\r\n                          });\r\n\r\n                          // Day별로 최대 4개씩만 가져와서 한 줄로 배치\r\n                          const allDisplayLocations = [];\r\n                          Object.keys(dayGroups)\r\n                            .sort((a, b) => parseInt(a) - parseInt(b))\r\n                            .forEach((day) => {\r\n                              const dayLocations = dayGroups[day].slice(0, 4);\r\n                              dayLocations.forEach((location, index) => {\r\n                                allDisplayLocations.push({\r\n                                  ...location,\r\n                                  day: parseInt(day),\r\n                                  dayIndex: index + 1,\r\n                                });\r\n                              });\r\n                            });\r\n\r\n                          return allDisplayLocations.map((location, index) => (\r\n                            <div\r\n                              key={`${location.day}-${location.dayIndex}`}\r\n                              style={{\r\n                                minWidth: \"300px\",\r\n                                maxWidth: \"320px\",\r\n                                flex: \"0 0 auto\",\r\n                                background: \"white\",\r\n                                borderRadius: \"12px\",\r\n                                padding: \"16px\",\r\n                                boxShadow: \"0 4px 6px rgba(0,0,0,0.1)\",\r\n                                cursor: \"pointer\",\r\n                                transition: \"transform 0.2s ease\",\r\n                                border: `2px solid ${getDayColor(\r\n                                  location.day\r\n                                )}20`,\r\n                              }}\r\n                              onClick={() => {\r\n                                // 클릭 시 해당 마커로 이동\r\n                                if (\r\n                                  mapRef.current &&\r\n                                  location.latitude &&\r\n                                  location.longitude\r\n                                ) {\r\n                                  const moveLatLon =\r\n                                    new window.kakao.maps.LatLng(\r\n                                      location.latitude,\r\n                                      location.longitude\r\n                                    );\r\n                                  mapRef.current.setCenter(moveLatLon);\r\n                                  mapRef.current.setLevel(3);\r\n                                }\r\n                              }}\r\n                              onMouseEnter={(e) => {\r\n                                e.currentTarget.style.transform =\r\n                                  \"translateY(-4px)\";\r\n                              }}\r\n                              onMouseLeave={(e) => {\r\n                                e.currentTarget.style.transform =\r\n                                  \"translateY(0)\";\r\n                              }}\r\n                            >\r\n                              {/* Day 표시 */}\r\n                              <div\r\n                                style={{\r\n                                  display: \"flex\",\r\n                                  alignItems: \"center\",\r\n                                  justifyContent: \"center\",\r\n                                  marginBottom: \"12px\",\r\n                                }}\r\n                              >\r\n                                <span\r\n                                  style={{\r\n                                    background: getDayColor(location.day),\r\n                                    color: \"white\",\r\n                                    padding: \"4px 12px\",\r\n                                    borderRadius: \"20px\",\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"600\",\r\n                                  }}\r\n                                >\r\n                                  Day {location.day} - {location.dayIndex}\r\n                                </span>\r\n                              </div>\r\n\r\n                              <div\r\n                                style={{\r\n                                  fontSize: \"14px\",\r\n                                  fontWeight: \"600\",\r\n                                  color: \"#333\",\r\n                                  marginBottom: \"12px\",\r\n                                  textAlign: \"center\",\r\n                                  lineHeight: \"1.3\",\r\n                                }}\r\n                              >\r\n                                {location.name}\r\n                              </div>\r\n\r\n                              {location.category && (\r\n                                <div\r\n                                  style={{\r\n                                    textAlign: \"center\",\r\n                                    marginBottom: \"12px\",\r\n                                  }}\r\n                                >\r\n                                  <span\r\n                                    style={{\r\n                                      background: \"#f3f4f6\",\r\n                                      color: \"#374151\",\r\n                                      padding: \"4px 8px\",\r\n                                      borderRadius: \"8px\",\r\n                                      fontSize: \"11px\",\r\n                                      fontWeight: \"500\",\r\n                                    }}\r\n                                  >\r\n                                    {location.category}\r\n                                  </span>\r\n                                </div>\r\n                              )}\r\n\r\n                              {location.image && location.image.trim() ? (\r\n                                <div style={{ position: \"relative\" }}>\r\n                                  <img\r\n                                    src={location.image}\r\n                                    alt={location.name}\r\n                                    style={{\r\n                                      width: \"100%\",\r\n                                      height: \"120px\",\r\n                                      objectFit: \"cover\",\r\n                                      borderRadius: \"8px\",\r\n                                      marginBottom: \"12px\",\r\n                                    }}\r\n                                    onError={(e) => {\r\n                                      e.target.style.display = \"none\";\r\n                                      const fallback =\r\n                                        e.target.parentElement\r\n                                          .nextElementSibling;\r\n                                      if (fallback)\r\n                                        fallback.style.display = \"flex\";\r\n                                    }}\r\n                                  />\r\n                                </div>\r\n                              ) : null}\r\n\r\n                              {/* 이미지 없거나 로드 실패시 fallback */}\r\n                              <div\r\n                                className=\"image-fallback\"\r\n                                style={{\r\n                                  width: \"100%\",\r\n                                  height: \"120px\",\r\n                                  background: \"#f8f9fa\",\r\n                                  borderRadius: \"8px\",\r\n                                  display:\r\n                                    !location.image || !location.image.trim()\r\n                                      ? \"flex\"\r\n                                      : \"none\",\r\n                                  alignItems: \"center\",\r\n                                  justifyContent: \"center\",\r\n                                  flexDirection: \"column\",\r\n                                  border: \"1px solid #e9ecef\",\r\n                                  marginBottom: \"12px\",\r\n                                }}\r\n                              >\r\n                                <img\r\n                                  src=\"/logo.png\"\r\n                                  alt=\"Festive Logo\"\r\n                                  style={{\r\n                                    width: \"50px\",\r\n                                    height: \"50px\",\r\n                                    objectFit: \"contain\",\r\n                                    marginBottom: \"6px\",\r\n                                    opacity: 0.7,\r\n                                  }}\r\n                                />\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: \"11px\",\r\n                                    color: \"#6c757d\",\r\n                                    fontWeight: \"500\",\r\n                                  }}\r\n                                >\r\n                                  {location.category || \"관광지\"}\r\n                                </div>\r\n                              </div>\r\n\r\n                              {/* 추가 정보 표시 */}\r\n                              {location.description && (\r\n                                <div\r\n                                  style={{\r\n                                    fontSize: \"12px\",\r\n                                    color: \"#6b7280\",\r\n                                    lineHeight: \"1.4\",\r\n                                    textAlign: \"center\",\r\n                                  }}\r\n                                >\r\n                                  {location.description.length > 60\r\n                                    ? location.description.substring(0, 60) +\r\n                                      \"...\"\r\n                                    : location.description}\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          ));\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                {/* 추천 코스 정보 - festival_travel 또는 travel_only일 때만 표시 */}\r\n                {(() => {\r\n                  const typeCheck =\r\n                    travelInfo.requestType === \"festival_travel\" ||\r\n                    travelInfo.requestType === \"travel_only\";\r\n                  const dataCheck =\r\n                    locations.length > 0 || travelInfo.travelCourse;\r\n\r\n                  return typeCheck && dataCheck;\r\n                })() && (\r\n                  <div className=\"ai-chatbot-course-info\">\r\n                    <h3>추천 코스</h3>\r\n                    <div className=\"ai-chatbot-course-content\">\r\n                      <h4 style={{ color: \"#1e40af\", marginBottom: \"15px\" }}>\r\n                        {travelInfo.travelCourse?.title || \"AI 추천 여행코스\"}\r\n                      </h4>\r\n\r\n                      {(() => {\r\n                        // 🎯 locations가 있으면 locations 사용, 없으면 travelCourse.dailySchedule 사용\r\n                        if (locations.length > 0) {\r\n                          // 기존 locations 데이터를 Day별로 그룹화\r\n                          const dayGroups = {};\r\n                          locations.forEach((location) => {\r\n                            if (!dayGroups[location.day]) {\r\n                              dayGroups[location.day] = [];\r\n                            }\r\n                            dayGroups[location.day].push(location);\r\n                          });\r\n\r\n                          return Object.keys(dayGroups)\r\n                            .sort((a, b) => parseInt(a) - parseInt(b))\r\n                            .map((day) => (\r\n                              <div key={day} style={{ marginBottom: \"25px\" }}>\r\n                                <h5\r\n                                  style={{\r\n                                    color: getDayColor(parseInt(day)),\r\n                                    fontWeight: \"bold\",\r\n                                    fontSize: \"16px\",\r\n                                    marginBottom: \"10px\",\r\n                                    borderBottom: `2px solid ${getDayColor(\r\n                                      parseInt(day)\r\n                                    )}`,\r\n                                    paddingBottom: \"5px\",\r\n                                  }}\r\n                                >\r\n                                  Day {day}\r\n                                </h5>\r\n\r\n                                <ul\r\n                                  style={{\r\n                                    marginLeft: \"0\",\r\n                                    paddingLeft: \"16px\",\r\n                                  }}\r\n                                >\r\n                                  {/* 🎯 카카오맵과 동일하게 Day별로 최대 4개까지만 표시 */}\r\n                                  {dayGroups[day]\r\n                                    .slice(0, 4)\r\n                                    .map((location, index) => (\r\n                                      <li\r\n                                        key={index}\r\n                                        style={{ marginBottom: \"10px\" }}\r\n                                      >\r\n                                        <span\r\n                                          style={{\r\n                                            color: getDayColor(parseInt(day)),\r\n                                            fontWeight: \"bold\",\r\n                                          }}\r\n                                        >\r\n                                          {index + 1}.\r\n                                        </span>{\" \"}\r\n                                        <strong style={{ color: \"#374151\" }}>\r\n                                          {location.name}\r\n                                        </strong>\r\n                                        {location.category && (\r\n                                          <span\r\n                                            style={{\r\n                                              marginLeft: \"8px\",\r\n                                              background: getDayColor(\r\n                                                parseInt(day)\r\n                                              ),\r\n                                              color: \"white\",\r\n                                              padding: \"2px 6px\",\r\n                                              borderRadius: \"8px\",\r\n                                              fontSize: \"10px\",\r\n                                            }}\r\n                                          >\r\n                                            {location.category}\r\n                                          </span>\r\n                                        )}\r\n                                        {location.description &&\r\n                                          location.description !==\r\n                                            location.name && (\r\n                                            <p\r\n                                              style={{\r\n                                                marginLeft: \"20px\",\r\n                                                fontSize: \"12px\",\r\n                                                color: \"#64748b\",\r\n                                                marginTop: \"2px\",\r\n                                              }}\r\n                                            >\r\n                                              {location.description}\r\n                                            </p>\r\n                                          )}\r\n                                      </li>\r\n                                    ))}\r\n                                </ul>\r\n                              </div>\r\n                            ));\r\n                        } else if (travelInfo.travelCourse?.dailySchedule) {\r\n                          // travelCourse의 dailySchedule 사용\r\n                          return travelInfo.travelCourse.dailySchedule.map(\r\n                            (daySchedule, index) => (\r\n                              <div\r\n                                key={index + 1}\r\n                                style={{ marginBottom: \"25px\" }}\r\n                              >\r\n                                <h5\r\n                                  style={{\r\n                                    color: getDayColor(index + 1),\r\n                                    fontWeight: \"bold\",\r\n                                    fontSize: \"16px\",\r\n                                    marginBottom: \"10px\",\r\n                                    borderBottom: `2px solid ${getDayColor(\r\n                                      index + 1\r\n                                    )}`,\r\n                                    paddingBottom: \"5px\",\r\n                                  }}\r\n                                >\r\n                                  Day {index + 1}\r\n                                </h5>\r\n\r\n                                <ul\r\n                                  style={{\r\n                                    marginLeft: \"0\",\r\n                                    paddingLeft: \"16px\",\r\n                                  }}\r\n                                >\r\n                                  {daySchedule.places?.map(\r\n                                    (place, placeIndex) => (\r\n                                      <li\r\n                                        key={placeIndex}\r\n                                        style={{ marginBottom: \"10px\" }}\r\n                                      >\r\n                                        <span\r\n                                          style={{\r\n                                            color: getDayColor(index + 1),\r\n                                            fontWeight: \"bold\",\r\n                                          }}\r\n                                        >\r\n                                          {placeIndex + 1}.\r\n                                        </span>{\" \"}\r\n                                        <strong style={{ color: \"#374151\" }}>\r\n                                          {place.name}\r\n                                        </strong>\r\n                                        {place.category && (\r\n                                          <span\r\n                                            style={{\r\n                                              marginLeft: \"8px\",\r\n                                              background: getDayColor(\r\n                                                index + 1\r\n                                              ),\r\n                                              color: \"white\",\r\n                                              padding: \"2px 6px\",\r\n                                              borderRadius: \"8px\",\r\n                                              fontSize: \"10px\",\r\n                                            }}\r\n                                          >\r\n                                            {place.category}\r\n                                          </span>\r\n                                        )}\r\n                                        {place.address && (\r\n                                          <p\r\n                                            style={{\r\n                                              marginLeft: \"20px\",\r\n                                              fontSize: \"12px\",\r\n                                              color: \"#64748b\",\r\n                                              marginTop: \"2px\",\r\n                                            }}\r\n                                          >\r\n                                            {place.address}\r\n                                          </p>\r\n                                        )}\r\n                                      </li>\r\n                                    )\r\n                                  )}\r\n                                </ul>\r\n                              </div>\r\n                            )\r\n                          );\r\n                        } else {\r\n                          // 둘 다 없으면 기본 메시지\r\n                          return (\r\n                            <div\r\n                              style={{\r\n                                textAlign: \"center\",\r\n                                padding: \"20px\",\r\n                                color: \"#64748b\",\r\n                              }}\r\n                            >\r\n                              <p>여행 코스 정보를 불러오는 중입니다...</p>\r\n                            </div>\r\n                          );\r\n                        }\r\n                      })()}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* 교통 안내 - 여행코스가 있고 데이터가 있을 때만 표시 */}\r\n                {travelInfo.travelCourse &&\r\n                  travelInfo.transportation &&\r\n                  travelInfo.requestType !== \"no_data\" && (\r\n                    <div className=\"ai-chatbot-transportation-info\">\r\n                      <h3>교통 안내</h3>\r\n                      {travelInfo.transportation.nearestStation && (\r\n                        <p>\r\n                          <strong>가장 가까운 역:</strong>{\" \"}\r\n                          {travelInfo.transportation.nearestStation}\r\n                        </p>\r\n                      )}\r\n                      {travelInfo.transportation.recommendedMode && (\r\n                        <p>\r\n                          <strong>추천 이동수단:</strong>{\" \"}\r\n                          {travelInfo.transportation.recommendedMode}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n              </div>\r\n\r\n              {/* 🔄 여행코스 저장 및 취소 버튼 - 추천 여행코스일 때만 표시 */}\r\n              {canSaveCourse && !travelInfo.isRejected && (\r\n                <div className=\"ai-chatbot-button-group\">\r\n                  {isLoggedIn && (\r\n                    <button\r\n                      className=\"ai-chatbot-action-btn save-btn\"\r\n                      onClick={handleSaveButtonClick}\r\n                      disabled={isSaving}\r\n                    >\r\n                      저장\r\n                    </button>\r\n                  )}\r\n                  <button\r\n                    className=\"ai-chatbot-action-btn cancel-btn\"\r\n                    onClick={() => window.location.reload()}\r\n                  >\r\n                    새로고침\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n        {/* 🔄 여행코스 저장 모달 */}\r\n        {isSaveModalOpen && (\r\n          <TravelCourseSaveModal\r\n            isOpen={isSaveModalOpen}\r\n            onClose={() => setIsSaveModalOpen(false)}\r\n            onSave={handleSaveTravelCourse}\r\n            travelData={{\r\n              locations: locations,\r\n              regionName: travelInfo.regionName,\r\n              areaCode: travelInfo.areaCode,\r\n              totalDays: travelInfo.totalDays || 1,\r\n              requestType: travelInfo.requestType || \"travel_only\",\r\n              thumbnailImage: locations.length > 0 ? locations[0].image : null,\r\n              courseDescription: travelInfo.courseDescription, // AI가 생성한 day별 코스 설명\r\n            }}\r\n            loading={isSaving}\r\n          />\r\n        )}\r\n\r\n        {/* ScrollToTop 버튼 */}\r\n        <ScrollToTop />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AIChatbot;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\aitravel\\AISideMenu.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\aitravel\\AITravelCourse.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"useCallback"},"fix":{"range":[35,48],"text":""},"desc":"Remove unused variable 'useCallback'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'faArrowUp' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"faArrowUp"},"fix":{"range":[133,195],"text":""},"desc":"Remove unused variable 'faArrowUp'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":121,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[4789,4796],"text":""},"desc":"Remove unused variable 'index'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleScroll'. Either include it or remove the dependency array.","line":210,"column":6,"nodeType":"ArrayExpression","endLine":216,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [activeMenu, shareVisibleCount, myTravelVisibleCount, sharedCourses, myTravelCourses, handleScroll]","fix":{"range":[7815,7931],"text":"[activeMenu, shareVisibleCount, myTravelVisibleCount, sharedCourses, myTravelCourses, handleScroll]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport axiosApi from \"../../api/axiosAPI\";\r\nimport \"./AITravelCourse.css\";\r\nimport AItitle from \"./AItitle\";\r\nimport ScrollToTop from \"./ScrollToTop\";\r\nimport AISideMenu from \"./AISideMenu\";\r\nimport useAuthStore from \"../../store/useAuthStore\";\r\nimport image9 from \"../../assets/temp/image 9.png\";\r\nimport image10 from \"../../assets/temp/image 10.png\";\r\nimport image11 from \"../../assets/temp/image 11.png\";\r\nimport image12 from \"../../assets/temp/image 12.png\";\r\nimport image13 from \"../../assets/temp/image 13.png\";\r\nimport logo from \"../../assets/festiveLogo.png\";\r\n\r\nconst AITravelCourse = () => {\r\n  const [activeMenu, setActiveMenu] = useState(\"share\");\r\n  const [shareVisibleCount, setShareVisibleCount] = useState(6);\r\n  const [myTravelVisibleCount, setMyTravelVisibleCount] = useState(6);\r\n  const [sharedCourses, setSharedCourses] = useState([]);\r\n  const [myTravelCourses, setMyTravelCourses] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const { member, isLoggedIn } = useAuthStore(); // 현재 로그인한 사용자 정보\r\n\r\n  useEffect(() => {\r\n    const fetchTravelCourses = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // 🔐 1. 공유 코스는 항상 가져오기 (로그인 상관없이)\r\n        let sharedItems = [];\r\n        try {\r\n          const sharedResponse = await axiosApi.get(\r\n            \"/api/travel-course/shared-courses\"\r\n          );\r\n          const sharedData = sharedResponse.data;\r\n          sharedItems = sharedData.success ? sharedData.courses : [];\r\n          console.log(\"✅ 공유 코스 로드 성공:\", sharedItems.length);\r\n        } catch (error) {\r\n          console.error(\"❌ 공유 코스 로드 실패:\", error);\r\n          sharedItems = [];\r\n        }\r\n\r\n        // 🔐 2. 내 여행코스는 로그인된 상태에서만 가져오기\r\n        let myItems = [];\r\n        if (isLoggedIn && member) {\r\n          try {\r\n            const myResponse = await axiosApi.get(\r\n              \"/api/travel-course/my-courses\"\r\n            );\r\n            const myData = myResponse.data;\r\n            myItems = myData.success ? myData.courses : [];\r\n            console.log(\"✅ 내 여행코스 로드 성공:\", myItems.length);\r\n          } catch (error) {\r\n            console.error(\"❌ 내 여행코스 로드 실패:\", error);\r\n            myItems = [];\r\n          }\r\n        } else {\r\n          console.log(\"🔐 로그인 안됨: 내 여행코스 스킵\");\r\n        }\r\n\r\n        // 공유 코스 데이터 매핑\r\n        const mappedSharedCourses = sharedItems.map((course, index) => ({\r\n          id: course.courseNo,\r\n          title: removeEmojis(course.courseTitle),\r\n          date: course.createdDate\r\n            ? (() => {\r\n                try {\r\n                  let dateObj;\r\n                  // 배열 형태의 날짜 처리 [year, month, day, hour, minute, second]\r\n                  if (Array.isArray(course.createdDate)) {\r\n                    const [year, month, day, hour, minute, second] =\r\n                      course.createdDate;\r\n                    // JavaScript Date는 month가 0부터 시작하므로 -1\r\n                    dateObj = new Date(\r\n                      year,\r\n                      month - 1,\r\n                      day,\r\n                      hour || 0,\r\n                      minute || 0,\r\n                      second || 0\r\n                    );\r\n                  } else {\r\n                    // 문자열 형태의 날짜 처리\r\n                    dateObj = new Date(course.createdDate);\r\n                  }\r\n\r\n                  if (isNaN(dateObj.getTime())) {\r\n                    return \"날짜 미정\";\r\n                  }\r\n                  return dateObj\r\n                    .toLocaleDateString(\"ko-KR\", {\r\n                      year: \"numeric\",\r\n                      month: \"2-digit\",\r\n                      day: \"2-digit\",\r\n                    })\r\n                    .replace(/\\./g, \".\");\r\n                } catch (error) {\r\n                  console.error(\"날짜 변환 오류:\", error);\r\n                  return \"날짜 미정\";\r\n                }\r\n              })()\r\n            : \"날짜 미정\",\r\n          // 공유 코스는 올린 사람 정보 표시 (nickname 우선, 없으면 name 사용)\r\n          memberNickname:\r\n            course.memberNickname || course.memberName || \"알 수 없음\",\r\n          memberProfileImage: course.memberProfileImage || logo,\r\n          location: course.regionName || \"지역 미정\", // 개인 코스용 (호환성)\r\n          image:\r\n            course.thumbnailImage ||\r\n            [image9, image10, image11, image12, image13][index % 5],\r\n          totalDays: course.totalDays,\r\n          requestType: course.requestType,\r\n        }));\r\n\r\n        // 내 여행코스 데이터 매핑 (백엔드에서 제공하는 작성자 정보 우선 사용)\r\n        const mappedMyTravelCourses = myItems.map((course, index) => ({\r\n          id: course.courseNo,\r\n          title: removeEmojis(course.courseTitle),\r\n          date: course.createdDate\r\n            ? (() => {\r\n                try {\r\n                  let dateObj;\r\n                  // 배열 형태의 날짜 처리 [year, month, day, hour, minute, second]\r\n                  if (Array.isArray(course.createdDate)) {\r\n                    const [year, month, day, hour, minute, second] =\r\n                      course.createdDate;\r\n                    // JavaScript Date는 month가 0부터 시작하므로 -1\r\n                    dateObj = new Date(\r\n                      year,\r\n                      month - 1,\r\n                      day,\r\n                      hour || 0,\r\n                      minute || 0,\r\n                      second || 0\r\n                    );\r\n                  } else {\r\n                    // 문자열 형태의 날짜 처리\r\n                    dateObj = new Date(course.createdDate);\r\n                  }\r\n\r\n                  if (isNaN(dateObj.getTime())) {\r\n                    return \"날짜 미정\";\r\n                  }\r\n                  return dateObj\r\n                    .toLocaleDateString(\"ko-KR\", {\r\n                      year: \"numeric\",\r\n                      month: \"2-digit\",\r\n                      day: \"2-digit\",\r\n                    })\r\n                    .replace(/\\./g, \".\");\r\n                } catch (error) {\r\n                  console.error(\"날짜 변환 오류:\", error);\r\n                  return \"날짜 미정\";\r\n                }\r\n              })()\r\n            : \"날짜 미정\",\r\n          // 백엔드에서 제공하는 작성자 정보를 우선 사용 (nickname → name → 현재 사용자 정보 순)\r\n          memberNickname:\r\n            course.memberNickname ||\r\n            course.memberName ||\r\n            member?.nickname ||\r\n            \"내 계정\",\r\n          memberProfileImage:\r\n            course.memberProfileImage || member?.profileImage || logo,\r\n          location: course.regionName || \"지역 미정\",\r\n          image: course.thumbnailImage || logo,\r\n          totalDays: course.totalDays,\r\n          requestType: course.requestType,\r\n          isShared: course.isShared || \"N\", // 공유 상태 추가\r\n        }));\r\n\r\n        setSharedCourses(mappedSharedCourses);\r\n        setMyTravelCourses(mappedMyTravelCourses);\r\n      } catch (error) {\r\n        console.error(\"🚨 전체 데이터 로딩 중 예상치 못한 오류:\", error);\r\n        // 오류가 발생해도 빈 배열로 초기화해서 UI가 표시되도록 함\r\n        setSharedCourses([]);\r\n        setMyTravelCourses([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTravelCourses();\r\n  }, [member, isLoggedIn]);\r\n\r\n  // 스크롤 이벤트 핸들러\r\n  const handleScroll = () => {\r\n    if (\r\n      window.innerHeight + window.scrollY >=\r\n      document.documentElement.scrollHeight - 100\r\n    ) {\r\n      if (activeMenu === \"share\") {\r\n        setShareVisibleCount((prev) => prev + 6);\r\n      } else {\r\n        setMyTravelVisibleCount((prev) => prev + 6);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 스크롤 이벤트 리스너 등록\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, [\r\n    activeMenu,\r\n    shareVisibleCount,\r\n    myTravelVisibleCount,\r\n    sharedCourses,\r\n    myTravelCourses,\r\n  ]);\r\n\r\n  // 텍스트에서 이모지 제거하는 함수\r\n  const removeEmojis = (text) => {\r\n    if (!text) return text;\r\n    return text\r\n      .replace(\r\n        /[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]|[\\u{2600}-\\u{26FF}]|[\\u{2700}-\\u{27BF}]/gu,\r\n        \"\"\r\n      )\r\n      .trim();\r\n  };\r\n\r\n  const handleMenuClick = (menu) => {\r\n    // 🔐 \"나만의 여행코스\" 메뉴 클릭 시 로그인 체크\r\n    if (menu === \"myTravel\" && (!isLoggedIn || !member)) {\r\n      alert(\r\n        \"로그인이 필요한 서비스입니다.\\n로그인 후 나만의 여행코스를 확인해보세요!\"\r\n      );\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n    setActiveMenu(menu);\r\n  };\r\n\r\n  const handleCourseClick = (courseId) => {\r\n    navigate(`/course/${courseId}`);\r\n  };\r\n\r\n  // 🔐 AI 추천받으러 가기 버튼 클릭 핸들러\r\n  const handleRecommendationClick = () => {\r\n    if (!isLoggedIn || !member) {\r\n      alert(\r\n        \"로그인이 필요한 서비스입니다.\\n로그인 후 AI 여행 추천을 받아보세요!\"\r\n      );\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n    navigate(\"/ai-travel/chat\");\r\n  };\r\n\r\n  // 공유 상태 변경 함수\r\n  const handleShareToggle = async (courseId, currentIsShared) => {\r\n    try {\r\n      const baseUrl =\r\n        import.meta.env.VITE_API_BASE_URL || \"http://localhost:8080\";\r\n      const newIsShared = currentIsShared === \"Y\" ? \"N\" : \"Y\";\r\n\r\n      const response = await axios.patch(\r\n        `${baseUrl}/api/travel-course/${courseId}/share-status?isShared=${newIsShared}`,\r\n        {},\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      const data = response.data;\r\n\r\n      if (data.success) {\r\n        // 현재 코스 정보 미리 가져오기 (상태 업데이트 전)\r\n        const currentCourse = myTravelCourses.find(\r\n          (course) => course.id === courseId\r\n        );\r\n\r\n        // 나만의 여행코스 상태 업데이트\r\n        setMyTravelCourses((prev) =>\r\n          prev.map((course) =>\r\n            course.id === courseId\r\n              ? { ...course, isShared: newIsShared }\r\n              : course\r\n          )\r\n        );\r\n\r\n        // 공유 상태에 따른 공유된 여행코스 목록 업데이트\r\n        if (newIsShared === \"Y\") {\r\n          // 공유하기: 공유된 여행코스 목록에 추가\r\n          if (currentCourse) {\r\n            setSharedCourses((prev) => [\r\n              {\r\n                ...currentCourse,\r\n                isShared: \"Y\",\r\n              },\r\n              ...prev,\r\n            ]);\r\n          }\r\n        } else {\r\n          // 공유취소: 공유된 여행코스 목록에서 제거\r\n          setSharedCourses((prev) =>\r\n            prev.filter((course) => course.id !== courseId)\r\n          );\r\n        }\r\n\r\n        alert(data.message);\r\n      } else {\r\n        alert(data.message || \"공유 상태 변경에 실패했습니다.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"공유 상태 변경 오류:\", error);\r\n      alert(\"공유 상태 변경 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 여행코스 삭제 함수\r\n  const handleDeleteCourse = async (courseId, courseTitle) => {\r\n    if (\r\n      !confirm(\r\n        `\"${courseTitle}\" 여행코스를 삭제하시겠습니까?\\n삭제된 여행코스는 복구할 수 없습니다.`\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const baseUrl =\r\n        import.meta.env.VITE_API_BASE_URL || \"http://localhost:8080\";\r\n\r\n      const response = await axios.delete(\r\n        `${baseUrl}/api/travel-course/${courseId}`,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      const data = response.data;\r\n\r\n      if (data.success) {\r\n        // 나만의 여행코스에서 제거\r\n        setMyTravelCourses((prev) =>\r\n          prev.filter((course) => course.id !== courseId)\r\n        );\r\n\r\n        // 공유된 여행코스에서도 제거 (만약 공유 중이었다면)\r\n        setSharedCourses((prev) =>\r\n          prev.filter((course) => course.id !== courseId)\r\n        );\r\n\r\n        alert(data.message);\r\n      } else {\r\n        alert(data.message || \"여행코스 삭제에 실패했습니다.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"여행코스 삭제 오류:\", error);\r\n      alert(\"여행코스 삭제 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>데이터를 불러오는 중입니다...</div>;\r\n  }\r\n\r\n  const currentCourses =\r\n    activeMenu === \"share\" ? sharedCourses : myTravelCourses;\r\n  const visibleCount =\r\n    activeMenu === \"share\" ? shareVisibleCount : myTravelVisibleCount;\r\n  const visibleCourses = currentCourses.slice(0, visibleCount);\r\n\r\n  return (\r\n    <div className=\"ai-travel-container\">\r\n      <AItitle />\r\n\r\n      {/* 메인 배너 섹션 */}\r\n      <div className=\"ai-travel__main-banner\">\r\n        <div className=\"ai-travel__banner-content\">\r\n          <h2>당신만을 위한 완벽한 여행이 시작됩니다.</h2>\r\n          <p>\r\n            더 이상 여행 계획 때문에 고민하지 마세요! 우리의\r\n            <br />\r\n            똑똑한 AI가 당신의 취향, 예산, 일정에 딱 맞는 여행 코스를\r\n            추천해드립니다.\r\n          </p>\r\n          <button\r\n            className=\"recommendation-btn\"\r\n            onClick={handleRecommendationClick}\r\n          >\r\n            추천받으러 가기 →\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"ai-travel__content-wrapper\">\r\n        <AISideMenu activeMenu={activeMenu} onMenuClick={handleMenuClick} />\r\n\r\n        <div className=\"ai-travel__main-content\">\r\n          <div className=\"ai-travel__course-section\">\r\n            <div className=\"ai-travel__section-header\">\r\n              <h2>\r\n                {activeMenu === \"share\" ? \"여행코스 공유\" : \"나만의 여행코스\"}\r\n              </h2>\r\n            </div>\r\n\r\n            {/* 빈 상태 메시지 */}\r\n            {visibleCourses.length === 0 ? (\r\n              <div className=\"ai-travel__empty-state\">\r\n                {activeMenu === \"share\" ? (\r\n                  <div className=\"ai-travel__empty-content\">\r\n                    <h3>아직 공유된 여행코스가 없습니다.</h3>\r\n                    <p>다른 사용자들이 공유한 여행코스를 기다려보세요!</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"ai-travel__empty-content\">\r\n                    <h3>현재 저장한 여행코스가 없습니다.</h3>\r\n                    <p>AI에게 여행코스를 추천받아보세요</p>\r\n                    <button\r\n                      className=\"ai-travel__empty-btn\"\r\n                      onClick={handleRecommendationClick}\r\n                    >\r\n                      AI 여행코스 추천받기\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"ai-travel__course-grid\">\r\n                {visibleCourses.map((course) => (\r\n                  <div key={course.id} className=\"ai-travel__course-card\">\r\n                    <div\r\n                      className=\"ai-travel__course-image\"\r\n                      onClick={() => handleCourseClick(course.id)}\r\n                    >\r\n                      <img src={course.image} alt={course.title} />\r\n\r\n                      {/* 나만의 여행코스에서만 공유중 태그 표시 */}\r\n                      {activeMenu === \"myTravel\" && course.isShared === \"Y\" && (\r\n                        <div className=\"ai-travel__shared-tag\">공유중</div>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div\r\n                      className=\"ai-travel__course-info\"\r\n                      onClick={() => handleCourseClick(course.id)}\r\n                    >\r\n                      <h3>{course.title}</h3>\r\n                      <p className=\"ai-travel__course-date\">{course.date}</p>\r\n                      {/* 공유 코스와 개인 코스 모두 작성자 정보 표시 */}\r\n                      <div className=\"ai-travel__course-author\">\r\n                        <img\r\n                          src={course.memberProfileImage}\r\n                          alt={course.memberNickname}\r\n                          className=\"ai-travel__author-profile\"\r\n                          onError={(e) => {\r\n                            e.target.src = logo; // 프로필 이미지 로드 실패시 로고 표시\r\n                          }}\r\n                        />\r\n                        <span className=\"ai-travel__author-nickname\">\r\n                          {course.memberNickname}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* 나만의 여행코스에서만 버튼들 표시 */}\r\n                    {activeMenu === \"myTravel\" && (\r\n                      <div className=\"ai-travel__course-actions\">\r\n                        <button\r\n                          className={`ai-travel__action-btn ${\r\n                            course.isShared === \"Y\" ? \"share-cancel\" : \"share\"\r\n                          }`}\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleShareToggle(course.id, course.isShared);\r\n                          }}\r\n                        >\r\n                          {course.isShared === \"Y\" ? \"공유취소\" : \"공유하기\"}\r\n                        </button>\r\n                        <button\r\n                          className=\"ai-travel__action-btn delete\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleDeleteCourse(course.id, course.title);\r\n                          }}\r\n                        >\r\n                          삭제\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ScrollToTop />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AITravelCourse;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\aitravel\\AItitle.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\aitravel\\ScrollToTop.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\aitravel\\TravelCourseDetail.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'mapRef' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":36,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"mapRef"},"fix":{"range":[1393,1421],"text":""},"desc":"Remove unused variable 'mapRef'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'publicError' is defined but never used.","line":61,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'selectedDay'. Either include it or remove the dependency array.","line":375,"column":6,"nodeType":"ArrayExpression","endLine":375,"endColumn":68,"suggestions":[{"desc":"Update the dependencies array to be: [loading, courseDetails, polylinePath, calculateDistance, map, selectedDay]","fix":{"range":[11360,11422],"text":"[loading, courseDetails, polylinePath, calculateDistance, map, selectedDay]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalDistance' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":511,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":511,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalDistance"},"fix":{"range":[15086,15970],"text":""},"desc":"Remove unused variable 'totalDistance'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'calculateDistance'. Either include it or remove the dependency array.","line":542,"column":6,"nodeType":"ArrayExpression","endLine":542,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [calculateDistance, getPlacesByDay, totalDays]","fix":{"range":[15941,15968],"text":"[calculateDistance, getPlacesByDay, totalDays]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":545,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":545,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[16032,16039],"text":""},"desc":"Remove unused variable 'index'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'overview' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":558,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":558,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"overview"},"fix":{"range":[16362,16372],"text":""},"desc":"Remove unused variable 'overview'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useCallback,\r\n  useRef,\r\n} from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { Map, MapMarker, Polyline, useKakaoLoader } from \"react-kakao-maps-sdk\";\r\nimport axios from \"axios\";\r\nimport axiosApi from \"../../api/axiosAPI\";\r\nimport \"./TravelCourseDetail.css\";\r\nimport logo from \"../../assets/festiveLogo.png\";\r\n\r\nconst TravelCourseDetail = () => {\r\n  const { courseId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [courseData, setCourseData] = useState(null);\r\n  const [courseDetails, setCourseDetails] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedDay, setSelectedDay] = useState(1);\r\n  const [mapCenter, setMapCenter] = useState({\r\n    lat: 37.5666805,\r\n    lng: 126.9784147,\r\n  });\r\n  const [selectedPlace, setSelectedPlace] = useState(null);\r\n  const [showSidePanel, setShowSidePanel] = useState(false);\r\n  const [placeImages, setPlaceImages] = useState([]);\r\n  const [loadingImages, setLoadingImages] = useState(false);\r\n  const [placeOverview, setPlaceOverview] = useState(\"\");\r\n  const [loadingOverview, setLoadingOverview] = useState(false);\r\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n  const [selectedDescriptionDay, setSelectedDescriptionDay] = useState(1);\r\n\r\n  const key = import.meta.env.VITE_KAKAO_MAP_API_KEY;\r\n  const mapRef = useRef(null);\r\n  const [map, setMap] = useState(null);\r\n  const [loadingMap, error] = useKakaoLoader({\r\n    appkey: key,\r\n    libraries: [\"services\"],\r\n  });\r\n\r\n  // 여행코스 데이터 가져오기\r\n  useEffect(() => {\r\n    const fetchCourseData = async () => {\r\n      try {\r\n        let response;\r\n        let data;\r\n\r\n        // 🔐 1단계: 먼저 공유된 여행코스로 시도 (인증 불필요)\r\n        try {\r\n          console.log(\"🔓 공유된 여행코스로 먼저 시도 (인증 없음)\");\r\n          response = await axios.get(`/api/travel-course/${courseId}`, {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            // withCredentials 없이 요청\r\n          });\r\n          data = response.data;\r\n          console.log(\"✅ 공유 여행코스 로드 성공\");\r\n        } catch (publicError) {\r\n          // 🔐 2단계: 공유 접근 실패시 인증이 필요한 개인 여행코스로 시도\r\n          console.log(\"🔐 공유 접근 실패, 개인 여행코스로 시도 (인증 필요)\");\r\n          try {\r\n            response = await axiosApi.get(`/api/travel-course/${courseId}`);\r\n            data = response.data;\r\n            console.log(\"✅ 개인 여행코스 로드 성공\");\r\n          } catch (privateError) {\r\n            console.error(\"❌ 개인 여행코스 접근도 실패:\", privateError);\r\n            throw new Error(\"여행코스를 찾을 수 없거나 접근 권한이 없습니다.\");\r\n          }\r\n        }\r\n\r\n        if (response.status !== 200) {\r\n          throw new Error(\"여행코스를 찾을 수 없습니다.\");\r\n        }\r\n\r\n        if (data.success) {\r\n          console.log(\"📅 받은 여행코스 데이터:\", data.course);\r\n          console.log(\"📅 createdDate 값:\", data.course?.createdDate);\r\n          setCourseData(data.course);\r\n          setCourseDetails(data.details);\r\n\r\n          // 첫 번째 장소로 지도 중심 설정\r\n          if (data.details.length > 0) {\r\n            const firstPlace = data.details[0];\r\n            setMapCenter({\r\n              lat: parseFloat(firstPlace.latitude),\r\n              lng: parseFloat(firstPlace.longitude),\r\n            });\r\n          }\r\n        } else {\r\n          throw new Error(data.message || \"데이터를 불러올 수 없습니다.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"🚨 여행코스 데이터 로드 실패:\", error);\r\n        alert(\"여행코스를 불러오는데 실패했습니다.\");\r\n        navigate(\"/ai-travel\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (courseId) {\r\n      fetchCourseData();\r\n    }\r\n  }, [courseId, navigate]);\r\n\r\n  // 장소의 상세 이미지들을 가져오는 함수\r\n  const fetchPlaceImages = async (contentId) => {\r\n    if (!contentId) return [];\r\n\r\n    setLoadingImages(true);\r\n    try {\r\n      // 🖼️ 장소 이미지는 공개 API이므로 인증 없이 요청\r\n      const response = await axios.get(`/api/ai/place-images/${contentId}`, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const data = response.data;\r\n        return data.images || [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"장소 이미지 로드 실패:\", error);\r\n    } finally {\r\n      setLoadingImages(false);\r\n    }\r\n    return [];\r\n  };\r\n\r\n  // 장소의 상세 정보(overview)를 가져오는 함수\r\n  const fetchPlaceOverview = async (contentId, place) => {\r\n    if (!contentId) {\r\n      console.log(\"📝 contentId 없음, overview 스킵\");\r\n      setPlaceOverview(\"\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"📝 장소 상세 정보 요청 시작:\", contentId);\r\n    setLoadingOverview(true);\r\n    try {\r\n      // 📝 장소 상세 정보도 공개 API이므로 인증 없이 요청\r\n      const response = await axios.get(`/api/ai/place-overview/${contentId}`, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      console.log(\"📝 API 응답 상태:\", response.status);\r\n      console.log(\"📝 API 응답 데이터:\", response.data);\r\n\r\n      if (response.status === 200) {\r\n        const data = response.data;\r\n        console.log(\"📝 응답 분석:\", {\r\n          success: data.success,\r\n          overview: data.overview,\r\n          overviewLength: data.overview ? data.overview.length : 0,\r\n          overviewTrimmed: data.overview ? data.overview.trim().length : 0,\r\n        });\r\n\r\n        // overview가 존재하고 실제 내용이 있는지 확인\r\n        if (data.success && data.overview && data.overview.trim().length > 0) {\r\n          console.log(\"✅ TourAPI Overview 설정:\", data.overview.trim());\r\n          setPlaceOverview(data.overview.trim());\r\n        } else {\r\n          console.log(\"❌ TourAPI Overview 없음, AI 설명 사용\");\r\n          // TourAPI에서 overview를 가져오지 못했을 때 AI 설명 생성\r\n          const aiDescription = generateAIDescription(place);\r\n          setPlaceOverview(aiDescription);\r\n        }\r\n      } else {\r\n        console.log(\"❌ 응답 상태 오류:\", response.status);\r\n        setPlaceOverview(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ 장소 상세 정보 로드 실패:\", error);\r\n      console.error(\"❌ 에러 응답:\", error.response?.data);\r\n      setPlaceOverview(\"\");\r\n    } finally {\r\n      setLoadingOverview(false);\r\n    }\r\n  };\r\n\r\n  // 선택된 날짜의 장소들 필터링\r\n  const getPlacesByDay = useCallback(\r\n    (day) => {\r\n      return courseDetails.filter((place) => place.dayNumber === day);\r\n    },\r\n    [courseDetails]\r\n  );\r\n\r\n  // 거리 계산 함수 (하버사인 공식)\r\n  const calculateDistance = useCallback((lat1, lon1, lat2, lon2) => {\r\n    const R = 6371; // 지구 반지름 (km)\r\n    const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n    const dLon = ((lon2 - lon1) * Math.PI) / 180;\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos((lat1 * Math.PI) / 180) *\r\n        Math.cos((lat2 * Math.PI) / 180) *\r\n        Math.sin(dLon / 2) *\r\n        Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c; // km 단위\r\n  }, []);\r\n\r\n  // 선택된 날짜의 장소들 메모이제이션\r\n  const dayPlaces = useMemo(() => {\r\n    const places = getPlacesByDay(selectedDay);\r\n    console.log(\"🏠 dayPlaces 계산:\", {\r\n      selectedDay,\r\n      placesCount: places.length,\r\n      places: places.map((p) => ({\r\n        placeName: p.placeName,\r\n        latitude: p.latitude,\r\n        longitude: p.longitude,\r\n        visitOrder: p.visitOrder,\r\n      })),\r\n    });\r\n    return places;\r\n  }, [getPlacesByDay, selectedDay]);\r\n\r\n  // 폴리라인 경로 메모이제이션\r\n  const polylinePath = useMemo(() => {\r\n    const filtered = dayPlaces.filter(\r\n      (place) => place.latitude && place.longitude\r\n    );\r\n    console.log(\"🗺️ 좌표 필터링:\", {\r\n      totalPlaces: dayPlaces.length,\r\n      filteredPlaces: filtered.length,\r\n      filtered: filtered.map((p) => ({\r\n        placeName: p.placeName,\r\n        latitude: p.latitude,\r\n        longitude: p.longitude,\r\n        visitOrder: p.visitOrder,\r\n      })),\r\n    });\r\n\r\n    const sorted = filtered.sort((a, b) => a.visitOrder - b.visitOrder);\r\n    console.log(\"📋 순서 정렬:\", {\r\n      sorted: sorted.map((p) => ({\r\n        placeName: p.placeName,\r\n        visitOrder: p.visitOrder,\r\n      })),\r\n    });\r\n\r\n    const path = sorted.map((place) => ({\r\n      lat: parseFloat(place.latitude),\r\n      lng: parseFloat(place.longitude),\r\n    }));\r\n\r\n    console.log(\"📍 최종 polylinePath:\", {\r\n      pathLength: path.length,\r\n      path,\r\n    });\r\n\r\n    return path;\r\n  }, [dayPlaces]);\r\n\r\n  // 카카오맵에 거리 표시를 추가하는 useEffect\r\n  useEffect(() => {\r\n    console.log(\"🗺️ 거리 표시 useEffect 실행:\", {\r\n      loading,\r\n      courseDetailsLength: courseDetails.length,\r\n      selectedDay,\r\n      map: !!map,\r\n      kakao: !!window.kakao,\r\n      polylinePathLength: polylinePath.length,\r\n      polylinePath,\r\n    });\r\n\r\n    // 데이터가 로딩 중이면 기다림\r\n    if (loading) {\r\n      console.log(\"⏳ 데이터 로딩 중...\");\r\n      return;\r\n    }\r\n\r\n    // 코스 상세 정보가 없으면 기다림\r\n    if (courseDetails.length === 0) {\r\n      console.log(\"📋 코스 상세 정보 없음\");\r\n      return;\r\n    }\r\n\r\n    if (!map) {\r\n      console.log(\"❌ map이 없음\");\r\n      return;\r\n    }\r\n    if (!window.kakao) {\r\n      console.log(\"❌ window.kakao가 없음\");\r\n      return;\r\n    }\r\n    if (polylinePath.length <= 1) {\r\n      console.log(\"❌ polylinePath 길이가 1 이하:\", polylinePath.length);\r\n      return;\r\n    }\r\n\r\n    // 지도가 완전히 로드된 후 실행하도록 지연 추가\r\n    const timer = setTimeout(() => {\r\n      console.log(\"⏰ 지연 후 거리 표시 시작\");\r\n\r\n      // 기존 거리 표시 제거\r\n      if (map._distanceOverlays) {\r\n        map._distanceOverlays.forEach((overlay) => overlay.setMap(null));\r\n      }\r\n      map._distanceOverlays = [];\r\n\r\n      // 각 선분마다 거리 표시 추가\r\n      console.log(\"📍 거리 표시 시작:\", polylinePath.length - 1, \"개 선분\");\r\n\r\n      for (let i = 0; i < polylinePath.length - 1; i++) {\r\n        const startPos = polylinePath[i];\r\n        const endPos = polylinePath[i + 1];\r\n\r\n        console.log(`📏 선분 ${i + 1}:`, {\r\n          start: startPos,\r\n          end: endPos,\r\n        });\r\n\r\n        // 거리 계산 (km)\r\n        const distance = calculateDistance(\r\n          startPos.lat,\r\n          startPos.lng,\r\n          endPos.lat,\r\n          endPos.lng\r\n        );\r\n\r\n        console.log(`📐 계산된 거리: ${distance.toFixed(1)}km`);\r\n\r\n        // 선분 중간 지점 계산\r\n        const midLat = (startPos.lat + endPos.lat) / 2;\r\n        const midLng = (startPos.lng + endPos.lng) / 2;\r\n        const midPosition = new window.kakao.maps.LatLng(midLat, midLng);\r\n\r\n        console.log(`📌 중간 지점:`, { lat: midLat, lng: midLng });\r\n\r\n        // 거리 라벨 표시\r\n        const distanceOverlay = new window.kakao.maps.CustomOverlay({\r\n          position: midPosition,\r\n          content: `<div style=\"\r\n          background: #FF6B6B;\r\n          color: white;\r\n          border-radius: 12px;\r\n          padding: 3px 8px;\r\n          font-size: 10px;\r\n          font-weight: bold;\r\n          box-shadow: 0 1px 3px rgba(0,0,0,0.3);\r\n          text-align: center;\r\n          white-space: nowrap;\r\n        \">${distance.toFixed(1)}km</div>`,\r\n          yAnchor: 0.5,\r\n        });\r\n\r\n        console.log(`🎯 CustomOverlay 생성:`, distanceOverlay);\r\n\r\n        distanceOverlay.setMap(map);\r\n        map._distanceOverlays.push(distanceOverlay);\r\n\r\n        console.log(`✅ 거리 라벨 ${i + 1} 지도에 추가 완료`);\r\n      }\r\n\r\n      console.log(`✅ 거리 표시 완료: ${polylinePath.length - 1}개`);\r\n    }, 500); // 500ms 지연\r\n\r\n    // 컴포넌트 언마운트 시 거리 표시 정리\r\n    return () => {\r\n      clearTimeout(timer);\r\n      if (map && map._distanceOverlays) {\r\n        map._distanceOverlays.forEach((overlay) => overlay.setMap(null));\r\n        map._distanceOverlays = [];\r\n      }\r\n    };\r\n  }, [loading, courseDetails, polylinePath, calculateDistance, map]);\r\n\r\n  // areaCode 기준 지역명 반환\r\n  const getRegionByAreaCode = (areaCode) => {\r\n    if (!areaCode) return \"전국\";\r\n\r\n    const areaMap = {\r\n      1: \"서울\",\r\n      2: \"인천\",\r\n      3: \"대전\",\r\n      4: \"대구\",\r\n      5: \"광주\",\r\n      6: \"부산\",\r\n      7: \"울산\",\r\n      8: \"세종\",\r\n      31: \"경기도\",\r\n      32: \"강원도\",\r\n      33: \"충청북도\",\r\n      34: \"충청남도\",\r\n      35: \"경상북도\",\r\n      36: \"경상남도\",\r\n      37: \"전라북도\",\r\n      38: \"전라남도\",\r\n      39: \"제주도\",\r\n    };\r\n    return areaMap[areaCode] || \"전국\";\r\n  };\r\n\r\n  // place_category 기준 여행 테마 분류\r\n  const getTravelTheme = () => {\r\n    if (!courseDetails.length) return \"종합\";\r\n\r\n    // place_category 추출\r\n    const categories = courseDetails\r\n      .map((place) => place.placeCategory)\r\n      .filter(Boolean);\r\n\r\n    if (categories.length === 0) return \"종합\";\r\n\r\n    // 가장 많이 등장하는 카테고리 찾기\r\n    const categoryCount = {};\r\n    categories.forEach((category) => {\r\n      categoryCount[category] = (categoryCount[category] || 0) + 1;\r\n    });\r\n\r\n    // 가장 빈번한 카테고리 찾기\r\n    const maxCount = Math.max(...Object.values(categoryCount));\r\n    const dominantCategories = Object.keys(categoryCount).filter(\r\n      (category) => categoryCount[category] === maxCount\r\n    );\r\n\r\n    // 50% 이상을 차지하는 카테고리가 있으면 해당 테마로 설정\r\n    if (\r\n      dominantCategories.length === 1 &&\r\n      maxCount >= categories.length * 0.5\r\n    ) {\r\n      return dominantCategories[0];\r\n    }\r\n\r\n    // 여러 카테고리가 섞인 경우 종합으로 표시\r\n    return \"종합\";\r\n  };\r\n\r\n  // getRecommendedSeason 함수 제거됨\r\n\r\n  // AI 장소 설명 생성\r\n  const generateAIDescription = (place) => {\r\n    // place가 null이거나 undefined인 경우 기본 설명 반환\r\n    if (!place) {\r\n      return \"이곳은 여행 코스의 중요한 일부입니다. 특별한 경험과 추억을 만들어보세요.\\n\\n인생샷을 남기기 좋은 포토존이 있어요!\";\r\n    }\r\n\r\n    const baseDescriptions = {\r\n      관광지:\r\n        \"이곳은 많은 관광객들이 찾는 인기 관광명소입니다. 아름다운 경치와 특별한 체험을 즐길 수 있어요.\",\r\n      문화시설:\r\n        \"역사와 문화를 체험할 수 있는 소중한 공간입니다. 교육적 가치가 높은 다양한 전시와 프로그램을 만나보세요.\",\r\n      음식점:\r\n        \"지역 특색이 살아있는 맛집입니다. 현지 음식 문화를 경험할 수 있는 좋은 기회가 될 거예요.\",\r\n      숙박: \"편안한 휴식을 위한 최적의 장소입니다. 여행의 피로를 풀고 다음 일정을 준비하세요.\",\r\n      쇼핑: \"다양한 쇼핑과 구경거리가 있는 곳입니다. 여행 기념품이나 특산품을 찾아보세요.\",\r\n    };\r\n\r\n    const category = place.placeCategory || \"\";\r\n    let description = \"\";\r\n\r\n    // 카테고리별 기본 설명\r\n    if (category.includes(\"관광지\") || category.includes(\"명소\")) {\r\n      description = baseDescriptions[\"관광지\"];\r\n    } else if (\r\n      category.includes(\"문화\") ||\r\n      category.includes(\"박물관\") ||\r\n      category.includes(\"미술관\")\r\n    ) {\r\n      description = baseDescriptions[\"문화시설\"];\r\n    } else if (\r\n      category.includes(\"음식\") ||\r\n      category.includes(\"맛집\") ||\r\n      category.includes(\"식당\")\r\n    ) {\r\n      description = baseDescriptions[\"음식점\"];\r\n    } else if (category.includes(\"숙박\") || category.includes(\"호텔\")) {\r\n      description = baseDescriptions[\"숙박\"];\r\n    } else if (category.includes(\"쇼핑\") || category.includes(\"시장\")) {\r\n      description = baseDescriptions[\"쇼핑\"];\r\n    } else {\r\n      description =\r\n        \"이곳은 여행 코스의 중요한 일부입니다. 특별한 경험과 추억을 만들어보세요.\";\r\n    }\r\n\r\n    // 추가 팁\r\n    const tips = [\r\n      \"인생샷을 남기기 좋은 포토존이 있어요!\",\r\n      \"적당한 관람 시간은 1-2시간 정도입니다.\",\r\n      \"대중교통 이용 시 미리 시간을 확인해보세요.\",\r\n      \"현지인에게 추천받은 숨은 매력도 찾아보세요!\",\r\n      \"주변에 함께 둘러볼 만한 곳들도 체크해보세요.\",\r\n    ];\r\n\r\n    const randomTip = tips[Math.floor(Math.random() * tips.length)];\r\n\r\n    return `${description}\\n\\n${randomTip}`;\r\n  };\r\n\r\n  // 전체 일수 계산 (먼저 계산)\r\n  const totalDays = useMemo(() => {\r\n    if (courseData?.totalDays) {\r\n      return courseData.totalDays;\r\n    }\r\n    if (courseDetails.length === 0) {\r\n      return 1;\r\n    }\r\n    return Math.max(...courseDetails.map((d) => d.dayNumber), 1);\r\n  }, [courseData?.totalDays, courseDetails]);\r\n\r\n  // 총 거리 계산만 유지 (소요시간 계산 제거)\r\n  const totalDistance = useMemo(() => {\r\n    let totalDistance = 0;\r\n\r\n    for (let day = 1; day <= totalDays; day++) {\r\n      const dayPlaces = getPlacesByDay(day).sort(\r\n        (a, b) => a.visitOrder - b.visitOrder\r\n      );\r\n\r\n      // 각 날짜별 장소 간 거리 계산\r\n      for (let i = 0; i < dayPlaces.length - 1; i++) {\r\n        const place1 = dayPlaces[i];\r\n        const place2 = dayPlaces[i + 1];\r\n\r\n        if (\r\n          place1.latitude &&\r\n          place1.longitude &&\r\n          place2.latitude &&\r\n          place2.longitude\r\n        ) {\r\n          const distance = calculateDistance(\r\n            place1.latitude,\r\n            place1.longitude,\r\n            place2.latitude,\r\n            place2.longitude\r\n          );\r\n          totalDistance += distance;\r\n        }\r\n      }\r\n    }\r\n\r\n    return Math.round(totalDistance * 10) / 10; // 소수점 첫째자리\r\n  }, [getPlacesByDay, totalDays]);\r\n\r\n  // 장소 클릭 핸들러 수정\r\n  const handlePlaceClick = async (place, index) => {\r\n    setSelectedPlace(place);\r\n    setMapCenter({\r\n      lat: parseFloat(place.latitude),\r\n      lng: parseFloat(place.longitude),\r\n    });\r\n\r\n    // 사이드 패널 표시\r\n    setShowSidePanel(true);\r\n    setCurrentImageIndex(0); // 슬라이더 인덱스 초기화\r\n\r\n    // 병렬로 장소 이미지와 상세 정보 가져오기\r\n    if (place.contentId) {\r\n      const [images, overview] = await Promise.all([\r\n        fetchPlaceImages(place.contentId),\r\n        fetchPlaceOverview(place.contentId, place),\r\n      ]);\r\n      setPlaceImages(images);\r\n      // fetchPlaceOverview는 내부에서 setPlaceOverview를 호출하므로 추가 처리 불필요\r\n    } else {\r\n      setPlaceImages([]);\r\n      setPlaceOverview(\"\");\r\n    }\r\n  };\r\n\r\n  // 사이드 패널 닫기\r\n  const closeSidePanel = () => {\r\n    setShowSidePanel(false);\r\n    setSelectedPlace(null);\r\n    setPlaceImages([]);\r\n    setPlaceOverview(\"\");\r\n    setCurrentImageIndex(0);\r\n  };\r\n\r\n  // 모든 이미지들 (기본 이미지 + detailImage2 이미지들) 결합\r\n  const getAllImages = () => {\r\n    const images = [];\r\n\r\n    // 기본 이미지 추가\r\n    if (selectedPlace?.placeImage) {\r\n      images.push({\r\n        url: selectedPlace.placeImage,\r\n        alt: selectedPlace.placeName,\r\n        type: \"main\",\r\n      });\r\n    }\r\n\r\n    // detailImage2에서 가져온 이미지들 추가\r\n    placeImages.forEach((image, index) => {\r\n      images.push({\r\n        url: image.originImgUrl,\r\n        alt: `${selectedPlace?.placeName} ${index + 1}`,\r\n        type: \"detail\",\r\n      });\r\n    });\r\n\r\n    // 이미지가 없으면 로고 추가\r\n    if (images.length === 0) {\r\n      images.push({\r\n        url: logo,\r\n        alt: selectedPlace?.placeName || \"기본 이미지\",\r\n        type: \"default\",\r\n      });\r\n    }\r\n\r\n    return images;\r\n  };\r\n\r\n  // 슬라이더 네비게이션 함수들\r\n  const nextImage = () => {\r\n    const allImages = getAllImages();\r\n    setCurrentImageIndex((prev) => (prev + 1) % allImages.length);\r\n  };\r\n\r\n  const prevImage = () => {\r\n    const allImages = getAllImages();\r\n    setCurrentImageIndex(\r\n      (prev) => (prev - 1 + allImages.length) % allImages.length\r\n    );\r\n  };\r\n\r\n  const goToImage = (index) => {\r\n    setCurrentImageIndex(index);\r\n  };\r\n\r\n  // AI 설명을 Day별로 파싱하는 함수\r\n  const parseDescriptionByDay = (description) => {\r\n    if (!description) return {};\r\n\r\n    const lines = description.split(\"\\n\");\r\n    const dayDescriptions = {};\r\n    let currentDay = null;\r\n    let currentContent = [];\r\n\r\n    lines.forEach((line) => {\r\n      const trimmedLine = line.trim();\r\n\r\n      // Day 제목 찾기\r\n      const dayMatch = trimmedLine.match(/^Day\\s*(\\d+)/);\r\n      if (dayMatch) {\r\n        // 이전 Day 내용 저장\r\n        if (currentDay && currentContent.length > 0) {\r\n          dayDescriptions[currentDay] = currentContent.join(\"\\n\");\r\n        }\r\n\r\n        // 새로운 Day 시작\r\n        currentDay = parseInt(dayMatch[1]);\r\n        currentContent = [];\r\n      } else if (currentDay && trimmedLine) {\r\n        // 현재 Day의 내용 추가\r\n        currentContent.push(trimmedLine);\r\n      }\r\n    });\r\n\r\n    // 마지막 Day 내용 저장\r\n    if (currentDay && currentContent.length > 0) {\r\n      dayDescriptions[currentDay] = currentContent.join(\"\\n\");\r\n    }\r\n\r\n    return dayDescriptions;\r\n  };\r\n\r\n  // 텍스트에서 이모지 제거하는 함수\r\n  const removeEmojis = (text) => {\r\n    return text\r\n      .replace(\r\n        /[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]|[\\u{2600}-\\u{26FF}]|[\\u{2700}-\\u{27BF}]/gu,\r\n        \"\"\r\n      )\r\n      .trim();\r\n  };\r\n\r\n  // 선택된 Day의 설명 내용 렌더링\r\n  const renderDayDescription = (content) => {\r\n    if (!content) return null;\r\n\r\n    return content.split(\"\\n\").map((line, index) => {\r\n      if (!line.trim()) return <br key={index} />;\r\n\r\n      const trimmedLine = removeEmojis(line.trim());\r\n\r\n      // 장소 리스트 처리\r\n      if (trimmedLine.startsWith(\"- \")) {\r\n        return (\r\n          <div key={index} className=\"travel-detail-place-item\">\r\n            • {trimmedLine.substring(2)}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      // 포인트 처리 (이모지 제거)\r\n      if (trimmedLine.startsWith(\"포인트:\")) {\r\n        return (\r\n          <div key={index} className=\"travel-detail-point\">\r\n            <strong>{trimmedLine.substring(3).trim()}</strong>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      // 일반 텍스트\r\n      return <p key={index}>{trimmedLine}</p>;\r\n    });\r\n  };\r\n\r\n  // 선택된 날짜의 마커들과 경로는 상단에서 useMemo로 정의됨\r\n\r\n  if (loading || loadingMap) {\r\n    return (\r\n      <div className=\"travel-detail-loading\">\r\n        <div>여행코스 정보를 불러오는 중입니다...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"travel-detail-error\">\r\n        <div>지도를 불러올 수 없습니다.</div>\r\n        <button onClick={() => window.location.reload()}>새로고침</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"travel-detail-container\">\r\n      {/* 왼쪽 코스 정보 패널 */}\r\n      <div\r\n        className={`travel-detail-sidebar ${\r\n          showSidePanel ? \"with-side-panel\" : \"\"\r\n        }`}\r\n      >\r\n        <div className=\"travel-detail-header\">\r\n          <button\r\n            className=\"travel-detail-back-btn\"\r\n            onClick={() => navigate(\"/ai-travel\")}\r\n          >\r\n            ← 뒤로가기\r\n          </button>\r\n\r\n          <div className=\"travel-detail-course-info\">\r\n            <h1>{courseData?.courseTitle}</h1>\r\n            <div className=\"travel-detail-meta\">\r\n              <span className=\"travel-detail-region\">\r\n                {courseData?.areaCode\r\n                  ? getRegionByAreaCode(courseData.areaCode)\r\n                  : courseData?.regionName || \"전국\"}\r\n              </span>\r\n              <span className=\"travel-detail-days\">{totalDays}일 코스</span>\r\n              <span className=\"travel-detail-date\">\r\n                {courseData?.createdDate\r\n                  ? (() => {\r\n                      try {\r\n                        let dateObj;\r\n\r\n                        // 배열 형태의 날짜인지 확인 [년, 월, 일, 시, 분, 초]\r\n                        if (Array.isArray(courseData.createdDate)) {\r\n                          const [year, month, day, hour, minute, second] =\r\n                            courseData.createdDate;\r\n                          // JavaScript Date의 월은 0부터 시작하므로 1을 빼줘야 함\r\n                          dateObj = new Date(\r\n                            year,\r\n                            month - 1,\r\n                            day,\r\n                            hour,\r\n                            minute,\r\n                            second\r\n                          );\r\n                        } else {\r\n                          // 문자열 형태의 날짜인 경우\r\n                          dateObj = new Date(courseData.createdDate);\r\n                        }\r\n\r\n                        if (isNaN(dateObj.getTime())) {\r\n                          return \"날짜 미정\";\r\n                        }\r\n\r\n                        return dateObj\r\n                          .toLocaleDateString(\"ko-KR\", {\r\n                            year: \"numeric\",\r\n                            month: \"2-digit\",\r\n                            day: \"2-digit\",\r\n                          })\r\n                          .replace(/\\./g, \".\");\r\n                      } catch (error) {\r\n                        console.error(\"날짜 변환 오류:\", error);\r\n                        return \"날짜 미정\";\r\n                      }\r\n                    })()\r\n                  : \"날짜 미정\"}\r\n              </span>\r\n            </div>\r\n\r\n            {/* 작성자 정보 */}\r\n            <div className=\"travel-detail-author\">\r\n              <img\r\n                src={courseData?.memberProfileImage || logo}\r\n                alt=\"작성자\"\r\n                className=\"travel-detail-author-profile\"\r\n                onError={(e) => {\r\n                  e.target.src = logo;\r\n                }}\r\n              />\r\n              <div className=\"travel-detail-author-info\">\r\n                <h4>\r\n                  {courseData?.memberNickname ||\r\n                    courseData?.memberName ||\r\n                    \"알 수 없음\"}\r\n                </h4>\r\n                <p>작성자</p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* 코스 소개 */}\r\n            <div className=\"travel-detail-description\">\r\n              <h4>코스 소개</h4>\r\n              {courseData?.courseDescription &&\r\n              courseData.courseDescription.trim().length > 0 ? (\r\n                <div className=\"travel-detail-ai-description\">\r\n                  {(() => {\r\n                    const dayDescriptions = parseDescriptionByDay(\r\n                      courseData.courseDescription\r\n                    );\r\n                    const availableDays = Object.keys(dayDescriptions)\r\n                      .map(Number)\r\n                      .sort((a, b) => a - b);\r\n\r\n                    if (availableDays.length === 0) {\r\n                      return <p>코스 설명을 불러올 수 없습니다.</p>;\r\n                    }\r\n\r\n                    return (\r\n                      <>\r\n                        {/* Day 탭 */}\r\n                        <div className=\"travel-detail-description-tabs\">\r\n                          {availableDays.map((day) => (\r\n                            <button\r\n                              key={day}\r\n                              className={`travel-detail-description-tab ${\r\n                                selectedDescriptionDay === day ? \"active\" : \"\"\r\n                              }`}\r\n                              onClick={() => setSelectedDescriptionDay(day)}\r\n                            >\r\n                              Day {day}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n\r\n                        {/* 선택된 Day의 내용 */}\r\n                        <div className=\"travel-detail-description-content\">\r\n                          {renderDayDescription(\r\n                            dayDescriptions[selectedDescriptionDay]\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    );\r\n                  })()}\r\n                </div>\r\n              ) : (\r\n                // 기본 설명\r\n                <p>\r\n                  {courseDetails.length > 0\r\n                    ? `${\r\n                        courseData?.areaCode\r\n                          ? getRegionByAreaCode(courseData.areaCode)\r\n                          : courseData?.regionName || \"이 지역\"\r\n                      }에서 즐기는 특별한 여행코스입니다. 총 ${\r\n                        courseDetails.length\r\n                      }개의 엄선된 장소들을 통해 ${getTravelTheme()} 중심의 다채로운 경험을 만끽하실 수 있습니다. 각 장소마다 고유한 매력과 이야기가 있으니 천천히 둘러보시며 소중한 추억을 만들어보세요.`\r\n                    : \"특별히 선별된 여행코스입니다. AI가 추천하는 맞춤형 여행 경험을 통해 새로운 발견과 즐거움을 찾아보세요.\"}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 일차별 탭 */}\r\n        <div className=\"travel-detail-day-tabs\">\r\n          {Array.from({ length: totalDays }, (_, index) => index + 1).map(\r\n            (day) => (\r\n              <button\r\n                key={day}\r\n                className={`travel-detail-day-tab ${\r\n                  selectedDay === day ? \"active\" : \"\"\r\n                }`}\r\n                onClick={() => setSelectedDay(day)}\r\n              >\r\n                Day {day}\r\n              </button>\r\n            )\r\n          )}\r\n        </div>\r\n\r\n        {/* 선택된 날짜의 장소 목록 */}\r\n        <div className=\"travel-detail-places\">\r\n          {dayPlaces.length > 0 ? (\r\n            dayPlaces\r\n              .sort((a, b) => a.visitOrder - b.visitOrder)\r\n              .map((place, index) => (\r\n                <div\r\n                  key={place.detailNo}\r\n                  className=\"travel-detail-place-card\"\r\n                  onClick={() => handlePlaceClick(place, index)}\r\n                >\r\n                  <div className=\"travel-detail-place-number\">{index + 1}</div>\r\n                  <div className=\"travel-detail-place-image\">\r\n                    <img\r\n                      src={place.placeImage || logo}\r\n                      alt={place.placeName}\r\n                      onError={(e) => {\r\n                        e.target.src = logo;\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div className=\"travel-detail-place-info\">\r\n                    <h3>{place.placeName}</h3>\r\n                    <p className=\"travel-detail-place-address\">\r\n                      {place.placeAddress}\r\n                    </p>\r\n                    {place.placeTel && (\r\n                      <p className=\"travel-detail-place-tel\">\r\n                        Tel: {place.placeTel}\r\n                      </p>\r\n                    )}\r\n                    {place.placeCategory && (\r\n                      <span className=\"travel-detail-place-category\">\r\n                        {place.placeCategory}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"travel-detail-place-ai-hint\">상세</div>\r\n                </div>\r\n              ))\r\n          ) : (\r\n            <div className=\"travel-detail-no-places\">\r\n              <p>Day {selectedDay}에 등록된 장소가 없습니다.</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* 가운데 지도 */}\r\n      <div\r\n        className={`travel-detail-map-container ${\r\n          showSidePanel ? \"with-side-panel\" : \"\"\r\n        }`}\r\n      >\r\n        <Map\r\n          center={mapCenter}\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n          }}\r\n          level={8}\r\n          onCreate={(mapInstance) => {\r\n            console.log(\"🗺️ Map onCreate 호출:\", mapInstance);\r\n            setMap(mapInstance);\r\n          }}\r\n        >\r\n          {/* 선택된 날짜의 마커들 */}\r\n          {dayPlaces.map((place, index) => {\r\n            if (!place.latitude || !place.longitude) return null;\r\n\r\n            return (\r\n              <MapMarker\r\n                key={place.detailNo}\r\n                position={{\r\n                  lat: parseFloat(place.latitude),\r\n                  lng: parseFloat(place.longitude),\r\n                }}\r\n                image={{\r\n                  src: `data:image/svg+xml;base64,${btoa(`\r\n                    <svg width=\"30\" height=\"40\" viewBox=\"0 0 30 40\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <path d=\"M15 0C6.716 0 0 6.716 0 15c0 8.284 15 25 15 25s15-16.716 15-25C30 6.716 23.284 0 15 0z\" fill=\"#FF6B6B\"/>\r\n                      <circle cx=\"15\" cy=\"15\" r=\"8\" fill=\"white\"/>\r\n                      <text x=\"15\" y=\"20\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" font-weight=\"bold\" fill=\"#FF6B6B\">${\r\n                        index + 1\r\n                      }</text>\r\n                    </svg>\r\n                  `)}`,\r\n                  size: { width: 30, height: 40 },\r\n                }}\r\n                title={`${index + 1}. ${place.placeName}`}\r\n                onClick={() => {\r\n                  setMapCenter({\r\n                    lat: parseFloat(place.latitude),\r\n                    lng: parseFloat(place.longitude),\r\n                  });\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* 장소들을 연결하는 선 */}\r\n          {polylinePath.length > 1 && (\r\n            <Polyline\r\n              path={polylinePath}\r\n              strokeWeight={3}\r\n              strokeColor=\"#FF6B6B\"\r\n              strokeOpacity={0.8}\r\n              strokeStyle=\"solid\"\r\n            />\r\n          )}\r\n        </Map>\r\n      </div>\r\n\r\n      {/* 오른쪽 사이드 패널 (장소 상세 정보) */}\r\n      {showSidePanel && selectedPlace && (\r\n        <div className=\"travel-detail-place-panel\">\r\n          <div className=\"travel-detail-place-panel-header\">\r\n            <h3>상세 가이드</h3>\r\n            <button\r\n              className=\"travel-detail-place-panel-close\"\r\n              onClick={closeSidePanel}\r\n            >\r\n              ✕\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"travel-detail-place-panel-content\">\r\n            {/* 장소 이미지 슬라이더 */}\r\n            <div className=\"travel-detail-place-info-section\">\r\n              <div className=\"travel-detail-place-slider\">\r\n                {loadingImages ? (\r\n                  <div className=\"travel-detail-slider-loading\">\r\n                    <img src={logo} alt=\"로딩중\" />\r\n                    <div className=\"loading-text\">이미지를 불러오는 중...</div>\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <div className=\"travel-detail-slider-container\">\r\n                      <div\r\n                        className=\"travel-detail-slider-track\"\r\n                        style={{\r\n                          transform: `translateX(-${currentImageIndex * 100}%)`,\r\n                        }}\r\n                      >\r\n                        {getAllImages().map((image, index) => (\r\n                          <div\r\n                            key={index}\r\n                            className=\"travel-detail-slider-slide\"\r\n                          >\r\n                            <img\r\n                              src={image.url}\r\n                              alt={image.alt}\r\n                              onError={(e) => {\r\n                                e.target.src = logo;\r\n                              }}\r\n                              className=\"travel-detail-slider-image\"\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n\r\n                      {/* 슬라이더 내비게이션 버튼 */}\r\n                      {getAllImages().length > 1 && (\r\n                        <>\r\n                          <button\r\n                            className=\"travel-detail-slider-nav travel-detail-slider-nav-prev\"\r\n                            onClick={prevImage}\r\n                            aria-label=\"이전 이미지\"\r\n                          >\r\n                            ❮\r\n                          </button>\r\n                          <button\r\n                            className=\"travel-detail-slider-nav travel-detail-slider-nav-next\"\r\n                            onClick={nextImage}\r\n                            aria-label=\"다음 이미지\"\r\n                          >\r\n                            ❯\r\n                          </button>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n\r\n                    {/* 슬라이더 인디케이터 */}\r\n                    {getAllImages().length > 1 && (\r\n                      <div className=\"travel-detail-slider-indicators\">\r\n                        {getAllImages().map((_, index) => (\r\n                          <button\r\n                            key={index}\r\n                            className={`travel-detail-slider-indicator ${\r\n                              currentImageIndex === index ? \"active\" : \"\"\r\n                            }`}\r\n                            onClick={() => goToImage(index)}\r\n                            aria-label={`이미지 ${index + 1}`}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* 이미지 카운터 */}\r\n                    {getAllImages().length > 1 && (\r\n                      <div className=\"travel-detail-slider-counter\">\r\n                        {currentImageIndex + 1} / {getAllImages().length}\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"travel-detail-place-basic-info\">\r\n                <h4>{selectedPlace.placeName}</h4>\r\n                <p className=\"place-address\">{selectedPlace.placeAddress}</p>\r\n                {selectedPlace.placeTel && (\r\n                  <p className=\"place-tel\">Tel: {selectedPlace.placeTel}</p>\r\n                )}\r\n                {selectedPlace.placeCategory && (\r\n                  <span className=\"place-category\">\r\n                    {selectedPlace.placeCategory}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* 지역 정보 */}\r\n            <div className=\"travel-detail-place-description-section\">\r\n              <h5>지역 정보</h5>\r\n              <div className=\"travel-detail-ai-description-content\">\r\n                {loadingOverview ? (\r\n                  <div className=\"overview-loading\">\r\n                    <p>상세 정보를 불러오는 중...</p>\r\n                  </div>\r\n                ) : placeOverview && placeOverview.trim().length > 0 ? (\r\n                  <div className=\"overview-content\">\r\n                    {placeOverview.split(\"\\n\").map((paragraph, index) => (\r\n                      <p key={index}>{paragraph}</p>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"overview-fallback\">\r\n                    {generateAIDescription(selectedPlace)\r\n                      .split(\"\\n\\n\")\r\n                      .map((paragraph, index) => (\r\n                        <p key={index}>{paragraph}</p>\r\n                      ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* 액션 버튼들 */}\r\n            <div className=\"travel-detail-place-actions\">\r\n              <button\r\n                className=\"travel-detail-action-btn primary\"\r\n                onClick={() => {\r\n                  window.open(\r\n                    `https://map.kakao.com/link/map/${selectedPlace.placeName},${selectedPlace.latitude},${selectedPlace.longitude}`,\r\n                    \"_blank\"\r\n                  );\r\n                }}\r\n              >\r\n                카카오맵에서 보기\r\n              </button>\r\n              <button\r\n                className=\"travel-detail-action-btn secondary\"\r\n                onClick={() => {\r\n                  window.open(\r\n                    `https://map.kakao.com/link/to/${selectedPlace.placeName},${selectedPlace.latitude},${selectedPlace.longitude}`,\r\n                    \"_blank\"\r\n                  );\r\n                }}\r\n              >\r\n                길찾기\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TravelCourseDetail;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\aitravel\\TravelCourseSaveModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[267,287],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'member' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":19,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"member"},"fix":{"range":[576,584],"text":""},"desc":"Remove unused variable 'member'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport \"./TravelCourseSaveModal.css\";\r\nimport useAuthStore from \"../../store/useAuthStore\";\r\nimport logo from \"../../assets/festiveLogo.png\";\r\n\r\nconst TravelCourseSaveModal = ({\r\n  isOpen,\r\n  onClose,\r\n  onSave,\r\n  travelData,\r\n  loading = false,\r\n}) => {\r\n  const [courseTitle, setCourseTitle] = useState(\"\");\r\n  const [isShared, setIsShared] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [selectedThumbnail, setSelectedThumbnail] = useState(null);\r\n\r\n  // 🔐 로그인 상태 확인\r\n  const { isLoggedIn, member } = useAuthStore();\r\n\r\n  // 모달이 열릴 때마다 초기화\r\n  React.useEffect(() => {\r\n    if (isOpen) {\r\n      setCourseTitle(\"\");\r\n      setIsShared(false);\r\n      setIsSubmitting(false);\r\n      // 첫 번째 이미지를 기본 썸네일로 설정\r\n      if (travelData?.locations && travelData.locations.length > 0) {\r\n        const firstImageLocation = travelData.locations.find(\r\n          (loc) => loc.image && loc.image.trim()\r\n        );\r\n        setSelectedThumbnail(firstImageLocation?.image || logo);\r\n      } else {\r\n        setSelectedThumbnail(logo);\r\n      }\r\n    }\r\n  }, [isOpen, travelData]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // 🔐 모달에서도 로그인 상태 재확인\r\n    if (!isLoggedIn) {\r\n      alert(\"로그인이 필요한 서비스입니다.\\n다시 로그인해주세요!\");\r\n      onClose();\r\n      return;\r\n    }\r\n\r\n    if (!courseTitle.trim()) {\r\n      alert(\"여행코스 제목을 입력해주세요.\");\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !travelData ||\r\n      !travelData.locations ||\r\n      travelData.locations.length === 0\r\n    ) {\r\n      alert(\"저장할 여행 장소가 없습니다.\");\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      // 저장 데이터 구성\r\n      const saveData = {\r\n        courseTitle: courseTitle.trim(),\r\n        isShared: isShared ? \"Y\" : \"N\",\r\n        thumbnailImage: selectedThumbnail || logo,\r\n        regionName: travelData.regionName || \"\",\r\n        areaCode: travelData.areaCode || \"\",\r\n        totalDays: travelData.totalDays || 1,\r\n        requestType: travelData.requestType || \"travel_only\",\r\n        courseDescription: travelData.courseDescription || \"\", // AI가 생성한 day별 코스 설명\r\n        locations: travelData.locations.map((location, index) => ({\r\n          name: location.name,\r\n          address: location.address || \"\",\r\n          latitude: location.latitude,\r\n          longitude: location.longitude,\r\n          image: location.image || null,\r\n          tel: location.tel || null,\r\n          category: location.category || \"관광지\",\r\n          contentId: location.contentId || null,\r\n          contentTypeId: location.contentTypeId || null,\r\n          day: location.day || 1,\r\n          order: location.order || index + 1,\r\n        })),\r\n      };\r\n\r\n      console.log(\"여행코스 저장 데이터:\", saveData);\r\n\r\n      await onSave(saveData);\r\n    } catch (error) {\r\n      console.error(\"❌ 저장 실패:\", error);\r\n      alert(\"저장 중 오류가 발생했습니다.\");\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"modal-overlay\" onClick={onClose}>\r\n      <div className=\"save-modal\" onClick={(e) => e.stopPropagation()}>\r\n        <div className=\"save-modal__header\">\r\n          <h2>여행코스 저장</h2>\r\n          <button className=\"close-btn\" onClick={onClose}>\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"save-modal__content\">\r\n          <form onSubmit={handleSubmit}>\r\n            {/* 여행코스 미리보기 */}\r\n            <div className=\"preview-section\">\r\n              <h3>여행코스 미리보기</h3>\r\n              <div className=\"preview-info\">\r\n                <p>\r\n                  <strong>기간:</strong>{\" \"}\r\n                  {`Day${travelData?.totalDays || 1} 코스`}\r\n                </p>\r\n                <p>\r\n                  <strong>장소 수:</strong> {travelData?.locations?.length || 0}\r\n                  개\r\n                </p>\r\n              </div>\r\n\r\n              {travelData?.locations && travelData.locations.length > 0 && (\r\n                <div className=\"thumbnail-section\">\r\n                  <h4>썸네일 선택</h4>\r\n                  <div className=\"thumbnail-grid\">\r\n                    {/* 로고 이미지 */}\r\n                    <div\r\n                      className={`thumbnail-item ${\r\n                        selectedThumbnail === logo ? \"selected\" : \"\"\r\n                      }`}\r\n                      onClick={() => setSelectedThumbnail(logo)}\r\n                    >\r\n                      <img src={logo} alt=\"기본 로고\" />\r\n                      <span className=\"thumbnail-label\">기본 이미지</span>\r\n                    </div>\r\n\r\n                    {/* 여행지 이미지들 */}\r\n                    {travelData.locations\r\n                      .filter(\r\n                        (location) =>\r\n                          location.image &&\r\n                          location.image.trim() &&\r\n                          location.image !== logo\r\n                      )\r\n                      .map((location, index) => (\r\n                        <div\r\n                          key={index}\r\n                          className={`thumbnail-item ${\r\n                            selectedThumbnail === location.image\r\n                              ? \"selected\"\r\n                              : \"\"\r\n                          }`}\r\n                          onClick={() => setSelectedThumbnail(location.image)}\r\n                        >\r\n                          <img\r\n                            src={location.image}\r\n                            alt={location.name}\r\n                            onError={(e) => {\r\n                              e.target.src = logo;\r\n                            }}\r\n                          />\r\n                          <span className=\"thumbnail-label\">\r\n                            {location.name}\r\n                          </span>\r\n                        </div>\r\n                      ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {travelData?.locations && travelData.locations.length > 0 && (\r\n                <div className=\"preview-locations\">\r\n                  <h4>주요 장소들</h4>\r\n                  <div className=\"location-chips\">\r\n                    {travelData.locations.slice(0, 3).map((location, index) => (\r\n                      <span key={index} className=\"location-chip\">\r\n                        {location.name}\r\n                      </span>\r\n                    ))}\r\n                    {travelData.locations.length > 3 && (\r\n                      <span className=\"location-chip more\">\r\n                        +{travelData.locations.length - 3}개 장소\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* 제목 입력 */}\r\n            <div className=\"input-section\">\r\n              <label htmlFor=\"courseTitle\">\r\n                여행코스 제목 <span className=\"required\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"courseTitle\"\r\n                value={courseTitle}\r\n                onChange={(e) => setCourseTitle(e.target.value)}\r\n                placeholder=\"예: 부산 2박3일 맛집 투어\"\r\n                maxLength={100}\r\n                required\r\n              />\r\n              <small>{courseTitle.length}/100자</small>\r\n            </div>\r\n\r\n            {/* 공유 설정 */}\r\n            <div className=\"input-section\">\r\n              <label className=\"share-option\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={isShared}\r\n                  onChange={(e) => setIsShared(e.target.checked)}\r\n                />\r\n                <span className=\"checkmark\"></span>\r\n                <div className=\"share-text\">\r\n                  <strong>모든 사용자와 공유</strong>\r\n                  <small>\r\n                    체크하면 다른 사용자들도 이 여행코스를 볼 수 있습니다.\r\n                  </small>\r\n                </div>\r\n              </label>\r\n            </div>\r\n\r\n            {/* 버튼 영역 */}\r\n            <div className=\"button-section\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"cancel-btn\"\r\n                onClick={onClose}\r\n                disabled={isSubmitting}\r\n              >\r\n                취소\r\n              </button>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"save-btn\"\r\n                disabled={isSubmitting || !courseTitle.trim()}\r\n              >\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <span className=\"spinner\"></span>\r\n                    저장 중...\r\n                  </>\r\n                ) : (\r\n                  <>저장</>\r\n                )}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TravelCourseSaveModal;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\customerCenter\\CustomerBoard.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, searchType, searchQuery, fetchPosts]","fix":{"range":[2517,2555],"text":"[currentPage, searchType, searchQuery, fetchPosts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst CustomerBoard = ({\r\n  currentPage,\r\n  searchType,\r\n  searchQuery,\r\n  onTotalPagesChange,\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 게시글 목록 가져오기\r\n  const fetchPosts = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const params = new URLSearchParams({\r\n        page: currentPage.toString(),\r\n        size: \"7\",\r\n      });\r\n\r\n      if (searchType && searchQuery) {\r\n        params.append(\"searchType\", searchType);\r\n        params.append(\"searchKeyword\", searchQuery);\r\n      }\r\n\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/customer/boards?${params}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"게시글을 불러오는데 실패했습니다.\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      console.log(\"고객센터 데이터:\", data); // 디버깅용\r\n\r\n      // 데이터 형식 변환 (inquiryList 사용)\r\n      const formattedPosts = (data.inquiryList || []).map((post) => {\r\n        console.log(\"개별 게시글:\", post); // 디버깅용\r\n        return {\r\n          id: post.boardNo,\r\n          title: post.boardTitle,\r\n          author: post.memberNickname || \"익명\",\r\n          memberProfileImage: post.memberProfileImage,\r\n          date: post.boardCreateDate\r\n            ? new Date(post.boardCreateDate)\r\n                .toLocaleDateString(\"ko-KR\", {\r\n                  year: \"numeric\",\r\n                  month: \"2-digit\",\r\n                  day: \"2-digit\",\r\n                  hour: \"2-digit\",\r\n                  minute: \"2-digit\",\r\n                })\r\n                .replace(/\\. /g, \".\")\r\n                .replace(\".\", \".\")\r\n            : \"날짜 없음\",\r\n          likes: post.boardLikeCount || 0,\r\n          views: post.boardViewCount || 0,\r\n          status: post.inquiryStatus || \"대기중\", // 고객센터 전용 상태 정보\r\n          hasAnswer: post.hasAnswer || false, // 답변 여부\r\n        };\r\n      });\r\n\r\n      setPosts(formattedPosts);\r\n\r\n      // 총 페이지 수 업데이트\r\n      if (onTotalPagesChange) {\r\n        onTotalPagesChange(data.totalPages || 1);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"게시글 로딩 실패:\", err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPosts();\r\n  }, [currentPage, searchType, searchQuery]);\r\n\r\n  const handleItemClick = (id) => {\r\n    navigate(`/customer-center/${id}`);\r\n    setTimeout(() => window.scrollTo(0, 0), 0);\r\n  };\r\n\r\n  // 로딩 상태\r\n  if (loading) {\r\n    return (\r\n      <div className=\"customer-board-list\">\r\n        <div style={{ textAlign: \"center\", padding: \"50px\", color: \"#666\" }}>\r\n          게시글을 불러오는 중...\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 에러 상태\r\n  if (error) {\r\n    return (\r\n      <div className=\"customer-board-list\">\r\n        <div style={{ textAlign: \"center\", padding: \"50px\", color: \"#e74c3c\" }}>\r\n          {error}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 게시글이 없는 경우\r\n  if (posts.length === 0) {\r\n    return (\r\n      <div className=\"customer-board-list\">\r\n        <div style={{ textAlign: \"center\", padding: \"50px\", color: \"#666\" }}>\r\n          등록된 게시글이 없습니다.\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"customer-board-list\">\r\n      {posts.map((post) => (\r\n        <div\r\n          className=\"customer-board-item\"\r\n          key={post.id}\r\n          onClick={() => handleItemClick(post.id)}\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          <div className=\"customer-board-title\">\r\n            {post.title}\r\n            <span\r\n              className={`status-badge ${\r\n                post.hasAnswer ? \"answered\" : \"waiting\"\r\n              }`}\r\n              style={{\r\n                marginLeft: \"10px\",\r\n                padding: \"4px 8px\",\r\n                borderRadius: \"12px\",\r\n                fontSize: \"12px\",\r\n                fontWeight: \"bold\",\r\n                backgroundColor: post.hasAnswer ? \"#e8f5e8\" : \"#fff3e0\",\r\n                color: post.hasAnswer ? \"#2e7d32\" : \"#f57c00\",\r\n                border: `1px solid ${post.hasAnswer ? \"#a5d6a7\" : \"#ffcc02\"}`,\r\n              }}\r\n            >\r\n              {post.status}\r\n            </span>\r\n          </div>\r\n          <div className=\"customer-board-meta\">\r\n            <img\r\n              src={\r\n                post.memberProfileImage\r\n                  ? `http://localhost:8080${post.memberProfileImage}`\r\n                  : \"/logo.png\"\r\n              }\r\n              alt=\"프로필\"\r\n              className=\"customer-profile-img\"\r\n              style={{\r\n                width: \"28px\",\r\n                height: \"28px\",\r\n                borderRadius: \"50%\",\r\n                marginRight: \"6px\",\r\n              }}\r\n              onError={(e) => {\r\n                e.target.src = \"/logo.png\";\r\n              }}\r\n            />\r\n            <span className=\"customer-board-author\">{post.author}</span>\r\n            <span className=\"customer-board-date\">{post.date}</span>\r\n            <div className=\"customer-board-views\">\r\n              <FontAwesomeIcon icon={faEye} />\r\n              <span>{post.views}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerBoard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\customerCenter\\CustomerCenter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\customerCenter\\CustomerDetail.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPostDetail'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPostDetail, id]","fix":{"range":[2463,2467],"text":"[fetchPostDetail, id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport Title from \"./Title\";\r\nimport \"./CustomerDetail.css\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport useAuthStore from \"../../store/useAuthStore\";\r\n\r\nfunction CustomerDetail() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [post, setPost] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const { member: currentUser } = useAuthStore();\r\n\r\n  // 게시글 상세 정보 가져오기\r\n  const fetchPostDetail = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/customer/boards/${id}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"게시글을 불러오는데 실패했습니다.\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // 데이터 형식 변환 (CustomerInquiryDto 사용)\r\n      const formattedPost = {\r\n        id: data.boardNo,\r\n        memberNo: data.memberNo, // 작성자 회원번호 추가\r\n        title: data.boardTitle,\r\n        author: data.memberNickname || \"익명\",\r\n        memberProfileImage: data.memberProfileImage, // 프로필 이미지 추가\r\n        date: new Date(data.boardCreateDate)\r\n          .toLocaleDateString(\"ko-KR\", {\r\n            year: \"numeric\",\r\n            month: \"2-digit\",\r\n            day: \"2-digit\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n          })\r\n          .replace(/\\. /g, \".\")\r\n          .replace(\".\", \".\"),\r\n        content: data.boardContent,\r\n        views: data.boardViewCount,\r\n        // 고객센터 전용 정보\r\n        status: data.inquiryStatus || \"대기중\",\r\n        hasAnswer: data.hasAnswer || false,\r\n        answerContent: data.answerContent,\r\n        answerDate: data.answerDate\r\n          ? new Date(data.answerDate)\r\n            .toLocaleDateString(\"ko-KR\", {\r\n              year: \"numeric\",\r\n              month: \"2-digit\",\r\n              day: \"2-digit\",\r\n              hour: \"2-digit\",\r\n              minute: \"2-digit\",\r\n            })\r\n            .replace(/\\. /g, \".\")\r\n            .replace(\".\", \".\")\r\n            .slice(0, -1)\r\n          : null,\r\n        priority: data.priority || \"일반\",\r\n        category: data.category || \"기타\",\r\n      };\r\n\r\n      setPost(formattedPost);\r\n    } catch (err) {\r\n      console.error(\"게시글 로딩 실패:\", err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      fetchPostDetail();\r\n    }\r\n  }, [id]);\r\n\r\n  // 접근 권한 확인 (작성자 또는 관리자만 접근 가능)\r\n  const hasAccess = () => {\r\n    if (!currentUser || !post) return false;\r\n    return (\r\n      currentUser.memberNo === post.memberNo || currentUser.role === \"ADMIN\"\r\n    );\r\n  };\r\n\r\n  // 게시글 수정 핸들러\r\n  const handleEditPost = () => {\r\n    navigate(`/customer-center/edit/${id}`);\r\n  };\r\n\r\n  // 게시글 삭제 핸들러\r\n  const handleDeletePost = async () => {\r\n    if (!currentUser) {\r\n      alert(\"로그인이 필요한 서비스입니다.\");\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n\r\n    if (!window.confirm(\"문의글을 삭제하시겠습니까?\")) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/customer/boards/${id}`,\r\n        {\r\n          method: \"DELETE\",\r\n          credentials: \"include\",\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        alert(\"문의글이 삭제되었습니다.\");\r\n        navigate(\"/customer-center\");\r\n      } else {\r\n        alert(\"문의글 삭제에 실패했습니다.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"문의글 삭제 실패:\", err);\r\n      alert(\"문의글 삭제 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 로딩 상태\r\n  if (loading) {\r\n    return (\r\n      <div className=\"customer-detail-outer\">\r\n        <Title />\r\n        <div className=\"customer-detail-container\">\r\n          <div className=\"customer-detail-main\">\r\n            <div\r\n              style={{ textAlign: \"center\", padding: \"50px\", color: \"#666\" }}\r\n            >\r\n              게시글을 불러오는 중...\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 에러 상태 또는 게시글이 없는 경우\r\n  if (error || !post) {\r\n    return (\r\n      <div className=\"customer-detail-outer\">\r\n        <Title />\r\n        <div className=\"customer-detail-container\">\r\n          <div className=\"customer-detail-main\">\r\n            <div\r\n              style={{ textAlign: \"center\", padding: \"50px\", color: \"#e74c3c\" }}\r\n            >\r\n              {error || \"존재하지 않는 문의글입니다.\"}\r\n              <br />\r\n              <button\r\n                className=\"customer-detail-list-btn\"\r\n                onClick={() => navigate(\"/customer-center\")}\r\n                style={{\r\n                  marginTop: \"10px\",\r\n                  padding: \"8px 16px\",\r\n                  background: \"#60a5fa\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  borderRadius: \"4px\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                목록\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 접근 권한이 없는 경우\r\n  if (!hasAccess()) {\r\n    return (\r\n      <div className=\"customer-detail-outer\">\r\n        <Title />\r\n        <div className=\"customer-detail-container\">\r\n          <div className=\"customer-detail-main\">\r\n            <div\r\n              style={{ textAlign: \"center\", padding: \"50px\", color: \"#e74c3c\" }}\r\n            >\r\n              접근 권한이 없습니다.\r\n              <br />\r\n              <button\r\n                className=\"customer-detail-list-btn\"\r\n                onClick={() => navigate(\"/customer-center\")}\r\n                style={{\r\n                  marginTop: \"10px\",\r\n                  padding: \"8px 16px\",\r\n                  background: \"#60a5fa\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  borderRadius: \"4px\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                목록\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"customer-detail-outer\">\r\n      <Title />\r\n      <div className=\"customer-detail-container\">\r\n        <div className=\"customer-detail-main\">\r\n          <div\r\n            className=\"customer-detail-title-row\"\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              flexWrap: \"wrap\",\r\n              marginBottom: \"20px\",\r\n            }}\r\n          >\r\n            <h2\r\n              className=\"customer-detail-title\"\r\n              style={{ margin: \"0\", marginRight: \"15px\" }}\r\n            >\r\n              {post.title}\r\n            </h2>\r\n            <div\r\n              className=\"customer-detail-badges\"\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                flexWrap: \"wrap\",\r\n              }}\r\n            >\r\n              <span\r\n                className={`status-badge ${post.hasAnswer ? \"answered\" : \"waiting\"\r\n                  }`}\r\n                style={{\r\n                  padding: \"6px 12px\",\r\n                  borderRadius: \"12px\",\r\n                  fontSize: \"14px\",\r\n                  fontWeight: \"bold\",\r\n                  backgroundColor: post.hasAnswer ? \"#e8f5e8\" : \"#fff3e0\",\r\n                  color: post.hasAnswer ? \"#2e7d32\" : \"#f57c00\",\r\n                  border: `1px solid ${post.hasAnswer ? \"#a5d6a7\" : \"#ffcc02\"}`,\r\n                }}\r\n              >\r\n                {post.status}\r\n              </span>\r\n            </div>\r\n            {/* 작성자만 수정/삭제 버튼 표시 */}\r\n            {currentUser?.memberNo === post.memberNo && (\r\n              <div\r\n                className=\"customer-detail-btns\"\r\n                style={{\r\n                  marginLeft: \"auto\",\r\n                  display: \"flex\",\r\n                  gap: \"10px\",\r\n                }}\r\n              >\r\n                <button\r\n                  className=\"customer-detail-edit-btn\"\r\n                  onClick={handleEditPost}\r\n                  style={{\r\n                    padding: \"6px 12px\",\r\n                    background: \"#60a5fa\",\r\n                    color: \"white\",\r\n                    border: \"none\",\r\n                    borderRadius: \"4px\",\r\n                    cursor: \"pointer\",\r\n                    fontSize: \"14px\",\r\n                  }}\r\n                >\r\n                  수정\r\n                </button>\r\n                <button\r\n                  className=\"customer-detail-delete-btn\"\r\n                  onClick={handleDeletePost}\r\n                  style={{\r\n                    padding: \"6px 12px\",\r\n                    background: \"#e74c3c\",\r\n                    color: \"white\",\r\n                    border: \"none\",\r\n                    borderRadius: \"4px\",\r\n                    cursor: \"pointer\",\r\n                    fontSize: \"14px\",\r\n                  }}\r\n                >\r\n                  삭제\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"customer-detail-meta\">\r\n            <img\r\n              src={\r\n                post.memberProfileImage\r\n                  ? post.memberProfileImage.startsWith(\"/profile-images/\")\r\n                    ? post.memberProfileImage + \"?t=\" + Date.now()\r\n                    : post.memberProfileImage\r\n                  : \"/logo.png\"\r\n              }\r\n              alt=\"프로필\"\r\n              className=\"customer-detail-profile-img\"\r\n              onError={(e) => {\r\n                e.target.src = \"/logo.png\";\r\n              }}\r\n            />\r\n            <span className=\"customer-detail-author\">{post.author}</span>\r\n            <span className=\"customer-detail-date\">{post.date}</span>\r\n            <span className=\"customer-detail-views\">조회수 {post.views}</span>\r\n          </div>\r\n          <div className=\"customer-detail-content\">\r\n            <h3\r\n              style={{\r\n                borderBottom: \"2px solid #60a5fa\",\r\n                paddingBottom: \"10px\",\r\n                marginBottom: \"20px\",\r\n              }}\r\n            >\r\n              문의 내용\r\n            </h3>\r\n            {post.content && (\r\n              <div\r\n                style={{\r\n                  whiteSpace: \"pre-wrap\",\r\n                  lineHeight: \"1.6\",\r\n                  marginBottom: \"30px\",\r\n                }}\r\n              >\r\n                {post.content}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* 답변 섹션 */}\r\n          <div\r\n            className=\"customer-detail-answer\"\r\n            style={{\r\n              marginTop: \"40px\",\r\n              borderTop: \"1px solid #eee\",\r\n              paddingTop: \"30px\",\r\n            }}\r\n          >\r\n            <h3\r\n              style={{\r\n                borderBottom: \"2px solid #2ecc71\",\r\n                paddingBottom: \"10px\",\r\n                marginBottom: \"20px\",\r\n              }}\r\n            >\r\n              관리자 답변\r\n            </h3>\r\n            {post.hasAnswer && post.answerContent ? (\r\n              <div>\r\n                <div\r\n                  style={{\r\n                    backgroundColor: \"#f8fffe\",\r\n                    border: \"1px solid #2ecc71\",\r\n                    borderRadius: \"8px\",\r\n                    padding: \"20px\",\r\n                    marginBottom: \"10px\",\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      whiteSpace: \"pre-wrap\",\r\n                      lineHeight: \"1.6\",\r\n                      color: \"#2c3e50\",\r\n                    }}\r\n                  >\r\n                    {post.answerContent}\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    textAlign: \"right\",\r\n                    fontSize: \"14px\",\r\n                    color: \"#7f8c8d\",\r\n                  }}\r\n                >\r\n                  답변일: {post.answerDate}\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div\r\n                style={{\r\n                  backgroundColor: \"#fafafa\",\r\n                  border: \"1px solid #ddd\",\r\n                  borderRadius: \"8px\",\r\n                  padding: \"30px\",\r\n                  textAlign: \"center\",\r\n                  color: \"#7f8c8d\",\r\n                }}\r\n              >\r\n                <div style={{ fontSize: \"16px\", marginBottom: \"10px\" }}>\r\n                  📝 아직 답변이 없습니다\r\n                </div>\r\n                <div style={{ fontSize: \"14px\" }}>\r\n                  관리자가 확인 후 빠른 시일 내에 답변드리겠습니다.\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"customer-detail-actions-bar\">\r\n            <button\r\n              className=\"customer-detail-list-btn\"\r\n              onClick={() => navigate(\"/customer-center\")}\r\n            >\r\n              목록\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomerDetail;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\customerCenter\\CustomerEdit.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\customerCenter\\CustomerWrite.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\customerCenter\\Title.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\wagle\\EditPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\wagle\\GeneralBoard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\wagle\\NoticeBoard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\wagle\\Pagination.jsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":19,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":19,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faAnglesLeft,\r\n  faAnglesRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Pagination.css\";\r\n\r\n/**\r\n * 페이지네이션 로직을 관리하는 커스텀 훅\r\n *\r\n * @param {Object} options\r\n * @param {number} options.totalItems - 전체 아이템 수\r\n * @param {number} [options.pageSize=10] - 페이지당 표시할 아이템 수\r\n * @param {number} [options.initialPage=1] - 초기 페이지 번호\r\n */\r\nexport const usePagination = ({\r\n  totalItems,\r\n  pageSize = 10,\r\n  initialPage = 1,\r\n}) => {\r\n  const [currentPage, setCurrentPage] = useState(initialPage);\r\n  const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n  const goToPage = useCallback(\r\n    (page) => {\r\n      if (page < 1 || page > totalPages) return;\r\n      setCurrentPage(page);\r\n\r\n      setTimeout(() => {\r\n        const list = document.querySelector(\".paginated-list\");\r\n        if (list) {\r\n          list.scrollIntoView({ behavior: \"auto\", block: \"start\" });\r\n        }\r\n      }, 0);\r\n    },\r\n    [totalPages]\r\n  );\r\n\r\n  const currentItems = useCallback(\r\n    (items) => {\r\n      const startIndex = (currentPage - 1) * pageSize;\r\n      return items.slice(startIndex, startIndex + pageSize);\r\n    },\r\n    [currentPage, pageSize]\r\n  );\r\n\r\n  return {\r\n    currentPage,\r\n    totalPages,\r\n    goToPage,\r\n    currentItems,\r\n    pageSize,\r\n  };\r\n};\r\n\r\n/**\r\n * 페이지네이션 컴포넌트\r\n *\r\n * @param {Object} props\r\n * @param {number} props.currentPage - 현재 페이지 번호\r\n * @param {number} props.totalPages - 전체 페이지 수\r\n * @param {Function} props.onPageChange - 페이지 변경 시 호출될 함수\r\n * @param {string} [props.className=\"\"] - 추가할 CSS 클래스명\r\n * @param {boolean} [props.showFirstLast=true] - 첫 페이지/마지막 페이지 버튼 표시 여부\r\n * @param {number} [props.maxVisiblePages=5] - 한 번에 표시할 페이지 버튼의 최대 개수\r\n *\r\n * @example\r\n * // 기본 사용법\r\n * <Pagination\r\n *   currentPage={currentPage}\r\n *   totalPages={totalPages}\r\n *   onPageChange={(page) => setCurrentPage(page)}\r\n * />\r\n *\r\n * // 커스텀 스타일과 옵션을 적용한 사용법\r\n * <Pagination\r\n *   currentPage={currentPage}\r\n *   totalPages={totalPages}\r\n *   onPageChange={handlePageChange}\r\n *   className=\"custom-pagination\"\r\n *   showFirstLast={false}\r\n *   maxVisiblePages={7}\r\n * />\r\n */\r\nfunction Pagination({\r\n  currentPage,\r\n  totalPages,\r\n  onPageChange,\r\n  className = \"\",\r\n  showFirstLast = true,\r\n  maxVisiblePages = 5,\r\n}) {\r\n  /**\r\n   * 현재 페이지를 중심으로 표시할 페이지 번호들을 계산\r\n   *\r\n   * 예시:\r\n   * - 전체 페이지가 10페이지이고 현재 페이지가 5페이지인 경우\r\n   * - maxVisiblePages가 5인 경우\r\n   * - 결과: [3, 4, 5, 6, 7]\r\n   *\r\n   * 특수한 경우 처리:\r\n   * 1. 현재 페이지가 처음/끝에 가까운 경우 시작/끝 페이지를 조정\r\n   * 2. 전체 페이지 수가 maxVisiblePages보다 작은 경우 모든 페이지를 표시\r\n   *\r\n   * @returns {number[]} 화면에 표시할 페이지 번호 배열\r\n   */\r\n  const getPageNumbers = () => {\r\n    const pageNumbers = [];\r\n    // 시작 페이지 계산: 현재 페이지를 중심으로 좌우로 페이지를 표시\r\n    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));\r\n    // 끝 페이지 계산: 시작 페이지부터 최대 표시 개수만큼 표시\r\n    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\r\n\r\n    // 끝 페이지가 최대 표시 개수보다 작은 경우, 시작 페이지를 조정\r\n    if (endPage - startPage + 1 < maxVisiblePages) {\r\n      startPage = Math.max(1, endPage - maxVisiblePages + 1);\r\n    }\r\n\r\n    // 페이지 번호 배열 생성\r\n    for (let i = startPage; i <= endPage; i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n\r\n    return pageNumbers;\r\n  };\r\n\r\n  return (\r\n    <div className={`pagination-container ${className}`.trim()}>\r\n      {/* 첫 페이지로 이동하는 버튼 */}\r\n      {showFirstLast && (\r\n        <button\r\n          type=\"button\"\r\n          className=\"pagination-btn nav\"\r\n          onClick={() => onPageChange(1)}\r\n          disabled={currentPage === 1}\r\n          aria-label=\"첫 페이지로 이동\"\r\n        >\r\n          <FontAwesomeIcon icon={faAnglesLeft} />\r\n        </button>\r\n      )}\r\n\r\n      {/* 이전 페이지로 이동하는 버튼 */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"pagination-btn nav\"\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n        disabled={currentPage === 1}\r\n        aria-label=\"이전 페이지로 이동\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleLeft} />\r\n      </button>\r\n\r\n      {/* 페이지 번호 버튼들 */}\r\n      {getPageNumbers().map((pageNum) => (\r\n        <button\r\n          type=\"button\"\r\n          key={pageNum}\r\n          className={`pagination-btn${\r\n            currentPage === pageNum ? \" active\" : \"\"\r\n          }`}\r\n          onClick={() => onPageChange(pageNum)}\r\n          aria-label={`${pageNum} 페이지로 이동`}\r\n          aria-current={currentPage === pageNum ? \"page\" : undefined}\r\n        >\r\n          {pageNum}\r\n        </button>\r\n      ))}\r\n\r\n      {/* 다음 페이지로 이동하는 버튼 */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"pagination-btn nav\"\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n        disabled={currentPage === totalPages}\r\n        aria-label=\"다음 페이지로 이동\"\r\n      >\r\n        <FontAwesomeIcon icon={faAngleRight} />\r\n      </button>\r\n\r\n      {/* 마지막 페이지로 이동하는 버튼 */}\r\n      {showFirstLast && (\r\n        <button\r\n          type=\"button\"\r\n          className=\"pagination-btn nav\"\r\n          onClick={() => onPageChange(totalPages)}\r\n          disabled={currentPage === totalPages}\r\n          aria-label=\"마지막 페이지로 이동\"\r\n        >\r\n          <FontAwesomeIcon icon={faAnglesRight} />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\wagle\\Title.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\wagle\\WagleDetail.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkLikeStatus', 'fetchComments', and 'fetchPostDetail'. Either include them or remove the dependency array.","line":481,"column":6,"nodeType":"ArrayExpression","endLine":481,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [checkLikeStatus, fetchComments, fetchPostDetail, id]","fix":{"range":[14867,14871],"text":"[checkLikeStatus, fetchComments, fetchPostDetail, id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\r\nimport Title from \"./Title\";\r\nimport \"./WagleDetail.css\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTriangleExclamation,\r\n  faHeart as faHeartSolid,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faHeart as faHeartRegular } from \"@fortawesome/free-regular-svg-icons\";\r\nimport GeneralBoard from \"./GeneralBoard\";\r\nimport NoticeBoard from \"./NoticeBoard\";\r\nimport useAuthStore from \"../../store/useAuthStore\";\r\nimport { checkNicknameForSocialUser } from \"../../utils/nicknameCheck\";\r\nimport { Viewer } from \"@toast-ui/react-editor\";\r\n\r\nfunction CommentItem({\r\n  comment,\r\n  onReport,\r\n  currentUser,\r\n  onReplySubmit,\r\n  onEditComment,\r\n  onDeleteComment,\r\n}) {\r\n  const [showReplyInput, setShowReplyInput] = useState(false);\r\n  const [replyContent, setReplyContent] = useState(\"\");\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editContent, setEditContent] = useState(comment.commentContent);\r\n\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString)\r\n      .toLocaleDateString(\"ko-KR\", {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      })\r\n      .replace(/\\. /g, \".\")\r\n      .replace(\".\", \".\");\r\n  };\r\n\r\n  // 댓글 작성자 여부 확인\r\n  const isCommentAuthor = currentUser?.memberNo === comment.memberNo;\r\n\r\n  const handleReplySubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!replyContent.trim()) return;\r\n    await onReplySubmit(comment.commentNo, replyContent);\r\n    setReplyContent(\"\");\r\n    setShowReplyInput(false);\r\n  };\r\n\r\n  const handleEditSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!editContent.trim()) return;\r\n    await onEditComment(comment.commentNo, editContent);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (window.confirm(\"댓글을 삭제하시겠습니까?\")) {\r\n      await onDeleteComment(comment.commentNo);\r\n    }\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <li className=\"wagle-detail-comment-item\">\r\n      <div className=\"comment-main-row\">\r\n        <img\r\n          className=\"comment-avatar\"\r\n          src={\r\n            comment.memberProfileImage\r\n              ? `http://localhost:8080${comment.memberProfileImage}`\r\n              : \"/logo.png\"\r\n          }\r\n          alt=\"프로필\"\r\n          style={{\r\n            width: \"22px\",\r\n            height: \"22px\",\r\n            borderRadius: \"50%\",\r\n            marginRight: \"6px\",\r\n          }}\r\n          onError={(e) => {\r\n            e.target.src = \"/logo.png\";\r\n          }}\r\n        />\r\n        <span className=\"comment-author\">{comment.memberNickname}</span>\r\n        <span className=\"comment-date\">\r\n          {formatDate(comment.commentCreateDate)}\r\n        </span>\r\n        <div className=\"comment-actions\">\r\n          {isCommentAuthor && (\r\n            <>\r\n              <button\r\n                className=\"comment-btn\"\r\n                onClick={() => setIsEditing(true)}\r\n              >\r\n                수정\r\n              </button>\r\n              <button className=\"comment-btn\" onClick={handleDelete}>\r\n                삭제\r\n              </button>\r\n              <button\r\n                className=\"comment-btn\"\r\n                onClick={() => navigate(\"/mypage/mycomment\")}\r\n              >\r\n                내 댓글 목록\r\n              </button>\r\n            </>\r\n          )}\r\n          <button\r\n            className=\"comment-btn\"\r\n            onClick={() => setShowReplyInput((v) => !v)}\r\n          >\r\n            답글\r\n          </button>\r\n          <button\r\n            className=\"comment-btn report-btn\"\r\n            onClick={() =>\r\n              onReport({\r\n                type: 1, // 댓글\r\n                targetId: comment.commentNo,\r\n                targetAuthor: comment.memberNickname,\r\n                content: comment.commentContent,\r\n                targetMemberNo: comment.memberNo, // 댓글 작성자 회원번호\r\n              })\r\n            }\r\n          >\r\n            <FontAwesomeIcon\r\n              icon={faTriangleExclamation}\r\n              style={{ marginRight: 4 }}\r\n            />\r\n            신고\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {isEditing ? (\r\n        <form onSubmit={handleEditSubmit} className=\"edit-comment-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={editContent}\r\n            onChange={(e) => setEditContent(e.target.value)}\r\n            style={{ width: \"80%\", marginRight: 8 }}\r\n          />\r\n          <button type=\"submit\">저장</button>\r\n          <button type=\"button\" onClick={() => setIsEditing(false)}>\r\n            취소\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <div className=\"comment-content\">{comment.commentContent}</div>\r\n      )}\r\n      {showReplyInput && (\r\n        <form onSubmit={handleReplySubmit} className=\"reply-input-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={replyContent}\r\n            onChange={(e) => setReplyContent(e.target.value)}\r\n            placeholder=\"답글을 입력하세요\"\r\n            style={{ width: \"80%\", marginRight: 8 }}\r\n          />\r\n          <button type=\"submit\">등록</button>\r\n        </form>\r\n      )}\r\n      {comment.replies &&\r\n        comment.replies.length > 0 &&\r\n        comment.replies.map((reply) => {\r\n          // 답글 작성자 여부 확인\r\n          const isReplyAuthor = currentUser?.memberNo === reply.memberNo;\r\n\r\n          return (\r\n            <div className=\"reply-row\" key={reply.commentNo}>\r\n              <div className=\"comment-main-row\">\r\n                <img\r\n                  className=\"comment-avatar\"\r\n                  src={\r\n                    reply.memberProfileImage\r\n                      ? `http://localhost:8080${reply.memberProfileImage}`\r\n                      : \"/logo.png\"\r\n                  }\r\n                  alt=\"프로필\"\r\n                  style={{\r\n                    width: \"22px\",\r\n                    height: \"22px\",\r\n                    borderRadius: \"50%\",\r\n                    marginRight: \"6px\",\r\n                  }}\r\n                  onError={(e) => {\r\n                    e.target.src = \"/logo.png\";\r\n                  }}\r\n                />\r\n                <span className=\"comment-author\">{reply.memberNickname}</span>\r\n                <span className=\"comment-date\">\r\n                  {formatDate(reply.commentCreateDate)}\r\n                </span>\r\n                <div className=\"comment-actions\">\r\n                  {isReplyAuthor && (\r\n                    <>\r\n                      <button\r\n                        className=\"comment-btn\"\r\n                        onClick={() => {\r\n                          if (window.confirm(\"답글을 수정하시겠습니까?\")) {\r\n                            const newContent = prompt(\r\n                              \"답글 내용을 입력하세요:\",\r\n                              reply.commentContent\r\n                            );\r\n                            if (newContent && newContent.trim()) {\r\n                              onEditComment(reply.commentNo, newContent.trim());\r\n                            }\r\n                          }\r\n                        }}\r\n                      >\r\n                        수정\r\n                      </button>\r\n                      <button\r\n                        className=\"comment-btn\"\r\n                        onClick={() => {\r\n                          if (window.confirm(\"답글을 삭제하시겠습니까?\")) {\r\n                            onDeleteComment(reply.commentNo);\r\n                          }\r\n                        }}\r\n                      >\r\n                        삭제\r\n                      </button>\r\n                      <button\r\n                        className=\"comment-btn\"\r\n                        onClick={() => navigate(\"/mypage/mycomment\")}\r\n                      >\r\n                        내 댓글 목록\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                  <button\r\n                    className=\"comment-btn report-btn\"\r\n                    onClick={() =>\r\n                      onReport({\r\n                        type: 1, // 댓글\r\n                        targetId: reply.commentNo,\r\n                        targetAuthor: reply.memberNickname,\r\n                        content: reply.commentContent,\r\n                        targetMemberNo: reply.memberNo, // 답글 작성자 회원번호\r\n                      })\r\n                    }\r\n                  >\r\n                    <FontAwesomeIcon\r\n                      icon={faTriangleExclamation}\r\n                      style={{ marginRight: 4 }}\r\n                    />\r\n                    신고\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=\"comment-content\">{reply.commentContent}</div>\r\n            </div>\r\n          );\r\n        })}\r\n    </li>\r\n  );\r\n}\r\n\r\n// flat하게 댓글+답글을 한 배열로 만들어 렌더링\r\nfunction flattenComments(comments) {\r\n  const flat = [];\r\n  comments.forEach((comment) => {\r\n    flat.push({ ...comment, depth: 0 });\r\n    if (comment.replies && comment.replies.length > 0) {\r\n      comment.replies.forEach((reply) => {\r\n        flat.push({ ...reply, depth: 1 });\r\n      });\r\n    }\r\n  });\r\n  return flat;\r\n}\r\n\r\nfunction ReportModal({ isOpen, onClose, onSubmit, reportData, currentUser }) {\r\n  const [reason, setReason] = useState(\"\");\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!reason.trim()) {\r\n      alert(\"신고 사유를 입력해주세요.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const reportPayload = {\r\n        memberNo: reportData.targetMemberNo, // 신고 대상 회원번호\r\n        reporterNo: currentUser?.memberNo, // 로그인 유저 회원번호\r\n        reportReason: reason,\r\n        reportType: reportData.type, // 0: 게시글, 1: 댓글\r\n        reportBoardNo: reportData.targetId,\r\n      };\r\n\r\n      const response = await fetch(\"http://localhost:8080/api/reports\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(reportPayload),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"신고가 성공적으로 접수되었습니다.\");\r\n        onSubmit(reportPayload);\r\n      } else {\r\n        alert(\"신고 접수에 실패했습니다.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"신고 처리 중 오류:\", error);\r\n      alert(\"신고 처리 중 오류가 발생했습니다.\");\r\n    }\r\n\r\n    onClose();\r\n    setReason(\"\");\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal-content\">\r\n        <div className=\"modal-header\">\r\n          <h2>신고하기</h2>\r\n          <button className=\"modal-close\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </button>\r\n        </div>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"modal-body\">\r\n            <div className=\"form-group\">\r\n              <label>신고 대상</label>\r\n              <input\r\n                type=\"text\"\r\n                value={reportData?.targetAuthor || \"\"}\r\n                readOnly\r\n                className=\"readonly-input\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>신고 대상 내용</label>\r\n              <textarea\r\n                value={reportData?.content || \"\"}\r\n                readOnly\r\n                className=\"readonly-textarea\"\r\n                rows=\"3\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>신고 사유 *</label>\r\n              <textarea\r\n                value={reason}\r\n                onChange={(e) => setReason(e.target.value)}\r\n                placeholder=\"신고 사유를 입력해주세요...\"\r\n                required\r\n                rows=\"4\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button type=\"button\" className=\"cancel-btn\" onClick={onClose}>\r\n              취소\r\n            </button>\r\n            <button type=\"submit\" className=\"submit-btn\">\r\n              신고\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction WagleDetail() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [post, setPost] = useState(null);\r\n  const [comments, setComments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [liked, setLiked] = useState(false);\r\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\r\n  const [currentReportData, setCurrentReportData] = useState(null);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const { member } = useAuthStore();\r\n\r\n  // 게시글 상세 정보 가져오기\r\n  const fetchPostDetail = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/wagle/boards/${id}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"게시글을 불러오는데 실패했습니다.\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // 데이터 형식 변환\r\n      const formattedPost = {\r\n        id: data.boardNo,\r\n        boardTypeNo: data.boardTypeNo,\r\n        title: data.boardTitle,\r\n        author: data.memberNickname,\r\n        date: new Date(data.boardCreateDate)\r\n          .toLocaleDateString(\"ko-KR\", {\r\n            year: \"numeric\",\r\n            month: \"2-digit\",\r\n            day: \"2-digit\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n          })\r\n          .replace(/\\. /g, \".\")\r\n          .replace(\".\", \".\"),\r\n        content: data.boardContent,\r\n        views: data.boardViewCount,\r\n        likes: data.boardLikeCount,\r\n        commentCount: data.boardCommentCount,\r\n        images: data.boardImages || [],\r\n        memberNo: data.memberNo,\r\n        memberProfileImage: data.memberProfileImage,\r\n      };\r\n\r\n      setPost(formattedPost);\r\n    } catch (err) {\r\n      console.error(\"게시글 로딩 실패:\", err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 댓글 목록 가져오기\r\n  const fetchComments = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/wagle/boards/${id}/comments`\r\n      );\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setComments(data);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"댓글 로딩 실패:\", err);\r\n    }\r\n  };\r\n\r\n  // 좋아요 상태 확인\r\n  const checkLikeStatus = async () => {\r\n    if (!member) return;\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/wagle/boards/${id}/like/check`,\r\n        {\r\n          credentials: \"include\",\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setLiked(data.liked);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"좋아요 상태 확인 실패:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      fetchPostDetail();\r\n      fetchComments();\r\n      checkLikeStatus();\r\n    }\r\n  }, [id]);\r\n\r\n  // 좋아요 토글\r\n  const handleLikeToggle = async () => {\r\n    if (!member) {\r\n      alert(\"로그인이 필요한 서비스입니다.\");\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/wagle/boards/${id}/like`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          credentials: \"include\",\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setLiked(data.action === \"like\");\r\n        setPost((prev) => ({ ...prev, likes: data.likeCount }));\r\n      } else {\r\n        alert(\"좋아요 처리에 실패했습니다.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"좋아요 처리 실패:\", err);\r\n      alert(\"좋아요 처리 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 댓글 작성\r\n  const handleCommentSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!newComment.trim()) return;\r\n\r\n    // 로그인 체크\r\n    if (!member) {\r\n      alert(\"로그인이 필요한 서비스입니다.\");\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/wagle/boards/${id}/comments`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          credentials: \"include\",\r\n          body: JSON.stringify({\r\n            commentContent: newComment,\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        setNewComment(\"\");\r\n        fetchComments(); // 댓글 목록 새로고침\r\n        fetchPostDetail(); // 댓글 수 업데이트를 위해 게시글 정보도 새로고침\r\n      } else {\r\n        alert(\"댓글 작성에 실패했습니다.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"댓글 작성 실패:\", err);\r\n      alert(\"댓글 작성 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 답글 작성\r\n  const handleReplySubmit = async (parentCommentNo, replyContent) => {\r\n    if (!member) {\r\n      alert(\"로그인이 필요한 서비스입니다.\");\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n\r\n    // 닉네임 체크\r\n    const canProceed = await checkNicknameForSocialUser(navigate);\r\n    if (!canProceed) return;\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/wagle/boards/${id}/comments`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          credentials: \"include\",\r\n          body: JSON.stringify({\r\n            commentContent: replyContent,\r\n            commentParentNo: parentCommentNo,\r\n          }),\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        fetchComments();\r\n        fetchPostDetail();\r\n      } else {\r\n        alert(\"답글 작성에 실패했습니다.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"답글 작성 실패:\", err);\r\n      alert(\"답글 작성 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 댓글 수정\r\n  const handleEditComment = async (commentNo, newContent) => {\r\n    if (!member) {\r\n      alert(\"로그인이 필요한 서비스입니다.\");\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/wagle/comments/${commentNo}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          credentials: \"include\",\r\n          body: JSON.stringify({\r\n            commentContent: newContent,\r\n          }),\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        fetchComments();\r\n        fetchPostDetail();\r\n      } else {\r\n        alert(\"댓글 수정에 실패했습니다.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"댓글 수정 실패:\", err);\r\n      alert(\"댓글 수정 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 댓글 삭제\r\n  const handleDeleteComment = async (commentNo) => {\r\n    if (!member) {\r\n      alert(\"로그인이 필요한 서비스입니다.\");\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/wagle/comments/${commentNo}`,\r\n        {\r\n          method: \"DELETE\",\r\n          credentials: \"include\",\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        fetchComments();\r\n        fetchPostDetail();\r\n      } else {\r\n        alert(\"댓글 삭제에 실패했습니다.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"댓글 삭제 실패:\", err);\r\n      alert(\"댓글 삭제 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 게시글 수정\r\n  const handleEditPost = () => {\r\n    navigate(`/wagle/edit/${id}`);\r\n  };\r\n\r\n  // 게시글 삭제\r\n  const handleDeletePost = async () => {\r\n    if (!member) {\r\n      alert(\"로그인이 필요한 서비스입니다.\");\r\n      navigate(\"/signin\");\r\n      return;\r\n    }\r\n    if (!window.confirm(\"게시글을 삭제하시겠습니까?\")) {\r\n      return;\r\n    }\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/wagle/boards/${id}`,\r\n        {\r\n          method: \"DELETE\",\r\n          credentials: \"include\",\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        alert(\"게시글이 삭제되었습니다.\");\r\n        navigate(\"/wagle\");\r\n      } else {\r\n        alert(\"게시글 삭제에 실패했습니다.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"게시글 삭제 실패:\", err);\r\n      alert(\"게시글 삭제 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  // 공지사항인지 확인 (boardTypeNo가 2인 경우)\r\n  const isNotice = post?.boardTypeNo === 2;\r\n\r\n  // flat 구조로 변환\r\n  const flatComments = flattenComments(comments);\r\n\r\n  const handleReport = (reportData) => {\r\n    setCurrentReportData(reportData);\r\n    setIsReportModalOpen(true);\r\n  };\r\n\r\n  const handleReportSubmit = (reportPayload) => {\r\n    console.log(\"신고 처리 완료:\", reportPayload);\r\n    // 추가 처리 로직이 있다면 여기에 구현\r\n  };\r\n\r\n  // 로딩 상태\r\n  if (loading) {\r\n    return (\r\n      <div className=\"wagle-detail-outer\" style={{ background: \"#fff\" }}>\r\n        <Title currentPage=\"게시글 상세\" hideSubtitle={true} />\r\n        <div className=\"wagle-detail-container\">\r\n          <div className=\"wagle-detail-main\">\r\n            <div\r\n              style={{ textAlign: \"center\", padding: \"50px\", color: \"#666\" }}\r\n            >\r\n              게시글을 불러오는 중...\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 에러 상태\r\n  if (error || !post) {\r\n    return (\r\n      <div className=\"wagle-detail-outer\" style={{ background: \"#fff\" }}>\r\n        <Title currentPage=\"게시글 상세\" hideSubtitle={true} />\r\n        <div className=\"wagle-detail-container\">\r\n          <div className=\"wagle-detail-main\">\r\n            <div\r\n              style={{ textAlign: \"center\", padding: \"50px\", color: \"#e74c3c\" }}\r\n            >\r\n              {error || \"존재하지 않는 게시글입니다.\"}\r\n              <br />\r\n              <button\r\n                onClick={() => navigate(\"/wagle\")}\r\n                style={{\r\n                  marginTop: \"10px\",\r\n                  padding: \"8px 16px\",\r\n                  background: \"#60a5fa\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  borderRadius: \"4px\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                목록으로 돌아가기\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"wagle-detail-outer\" style={{ background: \"#fff\" }}>\r\n      <Title currentPage=\"게시글 상세\" hideSubtitle={false} />\r\n      <div className=\"wagle-detail-container\">\r\n        <div className=\"wagle-detail-main\">\r\n          <div className=\"wagle-detail-title-row\">\r\n            <h2 className=\"wagle-detail-title\">{post.title}</h2>\r\n            <div className=\"wagle-detail-btns\">\r\n              {member?.memberNo === post.memberNo && (\r\n                <>\r\n                  <button className=\"edit\" onClick={handleEditPost}>\r\n                    수정\r\n                  </button>\r\n                  <button className=\"delete\" onClick={handleDeletePost}>\r\n                    삭제\r\n                  </button>\r\n                  <button\r\n                    className=\"delete\"\r\n                    onClick={() => navigate(\"/mypage/mypost\")}\r\n                  >\r\n                    내 게시글 목록\r\n                  </button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"wagle-detail-meta\">\r\n            <img\r\n              className=\"wagle-profile-img\"\r\n              src={\r\n                post.memberProfileImage\r\n                  ? `http://localhost:8080${post.memberProfileImage}`\r\n                  : \"/logo.png\"\r\n              }\r\n              alt=\"프로필\"\r\n              style={{\r\n                width: \"28px\",\r\n                height: \"28px\",\r\n                borderRadius: \"50%\",\r\n                marginRight: \"6px\",\r\n              }}\r\n              onError={(e) => {\r\n                e.target.src = \"/logo.png\";\r\n              }}\r\n            />\r\n            <span className=\"author\">{post.author}</span>\r\n            <span className=\"date\">{post.date}</span>\r\n            <span className=\"views\">{post.views}</span>\r\n            {!isNotice && (\r\n              <span className=\"comments\">댓글 {flatComments.length}</span>\r\n            )}\r\n            {!isNotice && (\r\n              <button\r\n                className=\"report-btn\"\r\n                onClick={() => {\r\n                  setCurrentReportData({\r\n                    type: 0, // 게시글\r\n                    targetId: post.id,\r\n                    targetAuthor: post.author,\r\n                    content: post.title,\r\n                    targetMemberNo: post.memberNo, // 게시글 작성자 회원번호\r\n                  });\r\n                  setIsReportModalOpen(true);\r\n                }}\r\n              >\r\n                <FontAwesomeIcon\r\n                  icon={faTriangleExclamation}\r\n                  style={{ marginRight: 4 }}\r\n                />\r\n                신고\r\n              </button>\r\n            )}\r\n          </div>\r\n          <div className=\"wagle-detail-content\">\r\n            <Viewer initialValue={post?.content || \"\"} />\r\n          </div>\r\n          <div className=\"wagle-detail-images\">\r\n            {post.images &&\r\n              post.images.map((img, idx) => (\r\n                <img src={img} alt={`user-upload-${idx}`} key={idx} />\r\n              ))}\r\n          </div>\r\n          <div className=\"wagle-detail-actions-bar\">\r\n            <div className=\"wagle-detail-actions\">\r\n              <button className=\"like-btn\" onClick={handleLikeToggle}>\r\n                <FontAwesomeIcon\r\n                  icon={liked ? faHeartSolid : faHeartRegular}\r\n                  style={{ marginRight: 4 }}\r\n                />{\" \"}\r\n                좋아요 ({post.likes || 0})\r\n              </button>\r\n            </div>\r\n            <button className=\"list-btn\" onClick={() => navigate(\"/wagle\")}>\r\n              목록\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {!isNotice && (\r\n          <div className=\"wagle-detail-comments\">\r\n            <div className=\"wagle-detail-comments-title\">\r\n              댓글 ({flatComments.length})\r\n            </div>\r\n            <form\r\n              className=\"wagle-detail-comment-form\"\r\n              onSubmit={handleCommentSubmit}\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"댓글을 남겨주세요...\"\r\n                value={newComment}\r\n                onChange={(e) => setNewComment(e.target.value)}\r\n              />\r\n              <button type=\"submit\">댓글 작성</button>\r\n            </form>\r\n            <ul className=\"wagle-detail-comment-list\">\r\n              {comments.map((c) => (\r\n                <CommentItem\r\n                  key={c.commentNo}\r\n                  comment={c}\r\n                  onReport={handleReport}\r\n                  currentUser={member}\r\n                  onReplySubmit={handleReplySubmit}\r\n                  onEditComment={handleEditComment}\r\n                  onDeleteComment={handleDeleteComment}\r\n                />\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n        <div className=\"wagle-detail-bottom-list\">\r\n          <div className=\"wagle-divider\" />\r\n          <div className=\"wagle-detail-bottom-title\">\r\n            <h3>{isNotice ? \"공지사항\" : \"게시글\"}</h3>\r\n          </div>\r\n          {isNotice ? (\r\n            <NoticeBoard hideTitle={true} />\r\n          ) : (\r\n            <GeneralBoard hideTitle={true} hideWriteBtn={true} />\r\n          )}\r\n        </div>\r\n        <ReportModal\r\n          isOpen={isReportModalOpen}\r\n          onClose={() => setIsReportModalOpen(false)}\r\n          onSubmit={handleReportSubmit}\r\n          reportData={currentReportData}\r\n          currentUser={member}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WagleDetail;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\wagle\\WaglePage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\workspace\\festive\\festive-app\\src\\ycomponents\\wagle\\WritePage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
