import React, { useState, useEffect, useRef } from "react";
import "./AIChatbot.css";
import AItitle from "./AItitle";

// Î∞±ÏóîÎìú API Í∏∞Î≥∏ URL
const API_BASE_URL = "http://localhost:8080/api";

// Î∞±ÏóîÎìú API Ìò∏Ï∂ú Ìï®Ïàò
const aiAPI = {
  async generateResponse(
    message,
    region = null,
    history = [],
    festivalData = null,
    nearbySpots = []
  ) {
    const response = await fetch(`${API_BASE_URL}/ai/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        message,
        region,
        history,
        festivalData,
        nearbySpots,
      }),
    });
    if (!response.ok) throw new Error("AI ÏÑúÎπÑÏä§ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    return response.json();
  },
};

const DEFAULT_RESPONSE = `ÏïàÎÖïÌïòÏÑ∏Ïöî! ÌïúÍµ≠ Ïó¨Ìñâ Ï†ÑÎ¨∏ AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§.

Ïó¨ÌñâÌïòÍ≥† Ïã∂ÏùÄ ÏßÄÏó≠Í≥º Í∏∞Í∞ÑÏùÑ ÎßêÏîÄÌï¥Ï£ºÏãúÎ©¥ ÎßûÏ∂§Ìòï Ïó¨ÌñâÏΩîÏä§Î•º Ï∂îÏ≤úÌï¥ÎìúÎ¶¥Í≤åÏöî!`;

// Îëê ÏßÄÏ†ê Í∞ÑÏùò Í±∞Î¶¨ Í≥ÑÏÇ∞ Ìï®Ïàò (Haversine Í≥µÏãù)
const calculateDistance = (lat1, lng1, lat2, lng2) => {
  const R = 6371; // ÏßÄÍµ¨Ïùò Î∞òÏßÄÎ¶Ñ (km)
  const dLat = ((lat2 - lat1) * Math.PI) / 180;
  const dLng = ((lng2 - lng1) * Math.PI) / 180;
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos((lat1 * Math.PI) / 180) *
      Math.cos((lat2 * Math.PI) / 180) *
      Math.sin(dLng / 2) *
      Math.sin(dLng / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c;
  return distance;
};

// nearbySpotsÏóêÏÑú Í∞ÄÏû• Í∞ÄÍπåÏö¥ Í¥ÄÍ¥ëÏßÄ Ï∞æÍ∏∞ Ìï®Ïàò
const findNearestSpot = (lat, lng, spots) => {
  if (!spots || spots.length === 0) return null;

  let minDistance = Infinity;
  let nearestSpot = null;

  spots.forEach((spot) => {
    if (spot.mapx && spot.mapy) {
      const distance = calculateDistance(
        lat,
        lng,
        parseFloat(spot.mapy),
        parseFloat(spot.mapx)
      );
      if (distance < minDistance) {
        minDistance = distance;
        nearestSpot = spot;
      }
    }
  });

  console.log(
    `üéØ Í∞ÄÏû• Í∞ÄÍπåÏö¥ Í¥ÄÍ¥ëÏßÄ: ${nearestSpot?.title} (Í±∞Î¶¨: ${minDistance.toFixed(
      2
    )}km)`
  );
  return nearestSpot;
};

// ÏùëÎãµ Ï≤òÎ¶¨ Ìï®Ïàò (nearbySpots ÌôúÏö©)
const processResponse = (response, availableSpots = []) => {
  console.log("ÏõêÎ≥∏ ÏùëÎãµ:", response);
  console.log("ÌôúÏö© Í∞ÄÎä•Ìïú Í¥ÄÍ¥ëÏßÄ:", availableSpots.length + "Í∞ú");

  const newLocations = [];
  let cleanResponse = response;

  try {
    // ÏúÑÏπò Ï†ïÎ≥¥ÏôÄ day Ï†ïÎ≥¥ Ï∂îÏ∂ú
    const regex = /@location:\s*\[(\d+\.\d+)\s*,\s*(\d+\.\d+)\]\s*@day:(\d+)/g;
    let match;
    let spotIndex = 0; // nearbySpots Ïù∏Îç±Ïä§

    while ((match = regex.exec(response)) !== null) {
      const lat = parseFloat(match[1]);
      const lng = parseFloat(match[2]);
      const day = parseInt(match[3]);

      if (!isNaN(lat) && !isNaN(lng) && !isNaN(day) && day > 0 && day <= 10) {
        let placeName = "";
        let timeInfo = "";

        // Î∞©Î≤ï 1: Ï¢åÌëúÏôÄ Í∞ÄÏû• Í∞ÄÍπåÏö¥ Ïã§Ï†ú Í¥ÄÍ¥ëÏßÄ Ï∞æÍ∏∞
        const nearestSpot = findNearestSpot(lat, lng, availableSpots);
        if (nearestSpot) {
          placeName = nearestSpot.title;
          console.log(`‚úÖ Í¥ÄÍ¥ëÏßÄ Îß§Ïπ≠: ${placeName}`);
        }
        // Î∞©Î≤ï 2: ÏàúÏÑúÎåÄÎ°ú nearbySpots ÏÇ¨Ïö© (fallback)
        else if (spotIndex < availableSpots.length) {
          placeName = availableSpots[spotIndex].title;
          console.log(`‚úÖ ÏàúÏÑú Îß§Ïπ≠: ${placeName}`);
          spotIndex++;
        }
        // Î∞©Î≤ï 3: Í∏∞Î≥∏Í∞í (ÏµúÌõÑÏùò ÏàòÎã®)
        else {
          placeName = `Day ${day} ÏΩîÏä§ ${
            newLocations.filter((loc) => loc.day === day).length + 1
          }`;
          console.log(`‚ö†Ô∏è Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©: ${placeName}`);
        }

        // AI ÏùëÎãµÏóêÏÑú ÏãúÍ∞Ñ Ï†ïÎ≥¥ Ï∂îÏ∂ú ÏãúÎèÑ
        const beforeLocation = response.substring(0, match.index);
        const lines = beforeLocation.split("\n");

        for (
          let i = lines.length - 1;
          i >= Math.max(0, lines.length - 3);
          i--
        ) {
          const line = lines[i]?.trim() || "";
          const timeMatch = line.match(/\*\*([^*]*(?:Ïò§Ï†Ñ|Ïò§ÌõÑ)[^*]*)\*\*/);
          if (timeMatch) {
            timeInfo = timeMatch[1].trim();
            console.log(`‚úÖ ÏãúÍ∞Ñ Ï∂îÏ∂ú: ${timeInfo}`);
            break;
          }
        }

        // Í∏∞Î≥∏ ÏãúÍ∞Ñ ÏÑ§Ï†ï
        if (!timeInfo) {
          const courseIndex =
            newLocations.filter((loc) => loc.day === day).length + 1;
          if (courseIndex === 1) timeInfo = "Ïò§Ï†Ñ 09:00";
          else if (courseIndex === 2) timeInfo = "Ïò§ÌõÑ 12:00";
          else if (courseIndex === 3) timeInfo = "Ïò§ÌõÑ 15:00";
          else timeInfo = `ÏΩîÏä§ ${courseIndex}`;
        }

        newLocations.push({
          lat,
          lng,
          name: placeName,
          day: day,
          time: timeInfo,
        });

        console.log(
          `üìç ÏµúÏ¢Ö ÏúÑÏπò Ï∂îÍ∞Ä: ${placeName} (Day ${day}, ${timeInfo})`
        );
      }
    }

    // ÏúÑÏπò Ï†ïÎ≥¥ ÌÖçÏä§Ìä∏ Ï†úÍ±∞
    cleanResponse = response
      .replace(/@location:\s*\[\d+\.\d+\s*,\s*\d+\.\d+\]\s*@day:\d+/g, "")
      .replace(/ÏúÑÏπòÏ†ïÎ≥¥:\s*/g, "")
      .trim();
  } catch (error) {
    console.error("ÏúÑÏπò Ï†ïÎ≥¥ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:", error);
  }

  console.log("üéØ ÏµúÏ¢Ö Ï∂îÏ∂úÎêú ÏúÑÏπòÎì§:", newLocations);
  return { locations: newLocations, cleanResponse };
};

// DayÎ≥Ñ ÏÉâÏÉÅ Ï†ïÏùò
const DAY_COLORS = {
  1: "#FF6B6B", // Îπ®Í∞ï
  2: "#4ECDC4", // Ï≤≠Î°ù
  3: "#45B7D1", // ÌååÎûë
  4: "#FFA07A", // Ï£ºÌô©
  5: "#98D8C8", // ÎØºÌä∏
  6: "#F7DC6F", // ÎÖ∏Îûë
  7: "#BB8FCE", // Î≥¥Îùº
  8: "#85C1E9", // ÌïòÎäò
  9: "#F8C471", // Í≥®Îìú
  10: "#82E0AA", // Ïó∞Îëê
};

// DayÎ≥Ñ ÏÉâÏÉÅ Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
const getDayColor = (day) => {
  return DAY_COLORS[day] || "#FF6B6B";
};

// ÎßàÏª§ HTML ÏÉùÏÑ± Ìï®Ïàò
const createMarkerContent = (day, index) => {
  const color = DAY_COLORS[day] || "#FF6B6B";
  return `
    <div style="
      background-color: ${color};
      color: white;
      border-radius: 50%;
      width: 28px;
      height: 28px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 12px;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.3);
    ">
      D${day}
    </div>
  `;
};

// React Ïª¥Ìè¨ÎÑåÌä∏
const AIChatbot = () => {
  const [messages, setMessages] = useState([
    {
      role: "assistant",
      content: DEFAULT_RESPONSE,
    },
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [locations, setLocations] = useState([]);
  const [currentStreamMessage, setCurrentStreamMessage] = useState("");
  const [nearbySpots, setNearbySpots] = useState([]);
  const [travelInfo, setTravelInfo] = useState({
    festival: {
      name: "",
      period: "",
      location: "",
      image: "",
      overview: "",
      tel: "",
      homepage: "",
    },
    courses: [],
    transportation: { nearestStation: "", recommendedMode: "" },
  });

  const mapRef = useRef(null);
  const chatContainerRef = useRef(null);

  // Ïπ¥Ïπ¥Ïò§Îßµ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    const initializeMap = async () => {
      try {
        const mapContainer = document.getElementById("kakao-map");
        if (!mapContainer) {
          console.error("ÏßÄÎèÑ Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
          return;
        }

        // Ïπ¥Ïπ¥Ïò§Îßµ SDK Î°úÎî©
        if (!window.kakao || !window.kakao.maps) {
          await new Promise((resolve, reject) => {
            const script = document.createElement("script");
            script.async = true;
            script.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${
              import.meta.env.VITE_KAKAO_MAP_API_KEY
            }&autoload=false`;
            script.onload = () => {
              window.kakao.maps.load(resolve);
            };
            script.onerror = reject;
            document.head.appendChild(script);
          });
        }

        const options = {
          center: new window.kakao.maps.LatLng(37.5666805, 126.9784147),
          level: 3,
        };

        const map = new window.kakao.maps.Map(mapContainer, options);
        mapRef.current = map;
        console.log("ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");
      } catch (error) {
        console.error("ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      }
    };

    initializeMap();
  }, []);

  // ÎßàÏª§ ÌëúÏãú
  useEffect(() => {
    if (!mapRef.current || locations.length === 0) return;

    const map = mapRef.current;

    // Í∏∞Ï°¥ ÎßàÏª§ Î∞è Ìè¥Î¶¨ÎùºÏù∏ Ï†úÍ±∞
    if (map._markers) {
      map._markers.forEach((marker) => marker.setMap(null));
    }
    if (map._polylines) {
      map._polylines.forEach((polyline) => polyline.setMap(null));
    }
    map._markers = [];
    map._polylines = [];

    const bounds = new window.kakao.maps.LatLngBounds();

    // DayÎ≥ÑÎ°ú Í∑∏Î£πÌôî
    const dayGroups = {};
    locations.forEach((location) => {
      if (!dayGroups[location.day]) {
        dayGroups[location.day] = [];
      }
      dayGroups[location.day].push(location);
    });

    // Í∞Å DayÎ≥ÑÎ°ú ÎßàÏª§ ÏÉùÏÑ± Î∞è Ïó∞Í≤∞ÏÑ† Í∑∏Î¶¨Í∏∞
    Object.keys(dayGroups).forEach((day) => {
      const dayLocations = dayGroups[day];
      const dayColor = DAY_COLORS[parseInt(day)] || "#FF6B6B";
      const polylinePath = [];

      dayLocations.forEach((location, index) => {
        const markerPosition = new window.kakao.maps.LatLng(
          location.latitude || location.lat,
          location.longitude || location.lng
        );

        // Ïª§Ïä§ÌÖÄ Ïò§Î≤ÑÎ†àÏù¥Î°ú ÎßàÏª§ ÏÉùÏÑ±
        const customOverlay = new window.kakao.maps.CustomOverlay({
          position: markerPosition,
          content: createMarkerContent(location.day, index + 1),
          yAnchor: 1,
        });

        customOverlay.setMap(map);
        map._markers.push(customOverlay);

        // Ïû•ÏÜåÎ™Ö ÎùºÎ≤® Ï∂îÍ∞Ä (ÎßàÏª§ ÏúÑÏóê)
        const labelPosition = new window.kakao.maps.LatLng(
          (location.latitude || location.lat) + 0.001, // ÎßàÏª§Î≥¥Îã§ ÏïΩÍ∞Ñ ÏúÑÏóê ÏúÑÏπò
          location.longitude || location.lng
        );

        const labelOverlay = new window.kakao.maps.CustomOverlay({
          position: labelPosition,
          content: `<div style="
            background: rgba(255,255,255,0.95);
            border: 1px solid ${dayColor};
            border-radius: 8px;
            padding: 4px 8px;
            font-size: 11px;
            font-weight: bold;
            color: #333;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            text-align: center;
            white-space: nowrap;
            max-width: 150px;
            overflow: hidden;
            text-overflow: ellipsis;
          ">${location.name}</div>`,
          yAnchor: 1,
        });

        labelOverlay.setMap(map);
        map._markers.push(labelOverlay);
        bounds.extend(markerPosition);

        // Ìè¥Î¶¨ÎùºÏù∏ Í≤ΩÎ°úÏóê Ï∂îÍ∞Ä
        polylinePath.push(markerPosition);

        // Ïù∏Ìè¨ÏúàÎèÑÏö∞ - Ïû•ÏÜåÎ™Ö Ï§ëÏã¨ÏúºÎ°ú ÌëúÍ∏∞
        const infowindow = new window.kakao.maps.InfoWindow({
          content: `<div style="padding:10px;font-size:13px;max-width:250px;text-align:center;">
            <div style="color:${dayColor};font-weight:bold;margin-bottom:5px;">Day ${location.day}</div>
            <div style="color:#333;font-weight:600;font-size:14px;">${location.name}</div>
          </div>`,
        });

        // ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ - Ïπ¥Ïπ¥Ïò§Îßµ API Î∞©ÏãùÏúºÎ°ú ÏàòÏ†ï
        window.kakao.maps.event.addListener(customOverlay, "click", () => {
          // Í∏∞Ï°¥ Ïù∏Ìè¨ÏúàÎèÑÏö∞ Î™®Îëê Îã´Í∏∞
          if (map._currentInfoWindow) {
            map._currentInfoWindow.close();
          }
          infowindow.open(map, customOverlay);
          map._currentInfoWindow = infowindow;
        });
      });

      // Í∞ôÏùÄ DayÎÅºÎ¶¨ Ïó∞Í≤∞ÏÑ† Í∑∏Î¶¨Í∏∞
      if (polylinePath.length > 1) {
        const polyline = new window.kakao.maps.Polyline({
          path: polylinePath,
          strokeWeight: 3,
          strokeColor: dayColor,
          strokeOpacity: 0.8,
          strokeStyle: "solid",
        });

        polyline.setMap(map);
        map._polylines.push(polyline);

        // Í∞Å ÏÑ†Î∂ÑÎßàÎã§ Í±∞Î¶¨ ÌëúÍ∏∞ Ï∂îÍ∞Ä
        for (let i = 0; i < polylinePath.length - 1; i++) {
          const startPos = polylinePath[i];
          const endPos = polylinePath[i + 1];

          // Í±∞Î¶¨ Í≥ÑÏÇ∞ (km)
          const distance = calculateDistance(
            startPos.getLat(),
            startPos.getLng(),
            endPos.getLat(),
            endPos.getLng()
          );

          // ÏÑ†Î∂Ñ Ï§ëÍ∞Ñ ÏßÄÏ†ê Í≥ÑÏÇ∞
          const midLat = (startPos.getLat() + endPos.getLat()) / 2;
          const midLng = (startPos.getLng() + endPos.getLng()) / 2;
          const midPosition = new window.kakao.maps.LatLng(midLat, midLng);

          // Í±∞Î¶¨ ÎùºÎ≤® ÌëúÏãú
          const distanceOverlay = new window.kakao.maps.CustomOverlay({
            position: midPosition,
            content: `<div style="
              background: ${dayColor};
              color: white;
              border-radius: 12px;
              padding: 3px 8px;
              font-size: 10px;
              font-weight: bold;
              box-shadow: 0 1px 3px rgba(0,0,0,0.3);
              text-align: center;
              white-space: nowrap;
            ">${distance.toFixed(1)}km</div>`,
            yAnchor: 0.5,
          });

          distanceOverlay.setMap(map);
          map._markers.push(distanceOverlay);
        }
      }
    });

    // ÏßÄÎèÑ Î≤îÏúÑ Ï°∞Ï†ï
    if (locations.length > 0) {
      map.setBounds(bounds);
    }
  }, [locations]);

  // Ïä§ÌÅ¨Î°§ ÏûêÎèô Ï°∞Ï†ï
  useEffect(() => {
    if (chatContainerRef.current) {
      const scrollToBottom = () => {
        chatContainerRef.current.scrollTop =
          chatContainerRef.current.scrollHeight;
      };
      setTimeout(scrollToBottom, 100);
    }
  }, [messages, currentStreamMessage]);

  // üéØ ÏôÑÏ†ÑÌûà ÏÉàÎ°úÏõåÏßÑ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï≤òÎ¶¨ - Î∞±ÏóîÎìú Ï§ëÏã¨
  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = inputMessage.trim();
    setMessages((prev) => [...prev, { role: "user", content: userMessage }]);
    setInputMessage("");
    setLoading(true);
    setCurrentStreamMessage("");

    try {
      console.log("üöÄ ÏÉàÎ°úÏö¥ AI ÏãúÏä§ÌÖú ÏãúÏûë:", userMessage);

      // üéØ Î∞±ÏóîÎìúÏóê ÏõêÎ≥∏ Î©îÏãúÏßÄÎßå Ï†ÑÎã¨ - Î™®Îì† Î∂ÑÏÑùÏùÑ Î∞±ÏóîÎìúÍ∞Ä Ï≤òÎ¶¨
      const response = await fetch(`${API_BASE_URL}/ai/chat`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: userMessage }),
      });

      if (!response.ok) {
        throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${response.status}`);
      }

      const data = await response.json();
      console.log("‚úÖ ÏÉàÎ°úÏö¥ Î∞±ÏóîÎìú ÏùëÎãµ ÏàòÏã†:", data);

      const content = data.content || "Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏùëÎãµÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.";

      // @locationÍ≥º @day ÌÉúÍ∑∏Î•º Ï†úÍ±∞Ìïú ÍπîÎÅîÌïú ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
      const cleanContent = content
        .replace(/@location:\s*\[\d+\.\d+\s*,\s*\d+\.\d+\]\s*@day:\d+/g, "")
        .replace(/ÏúÑÏπòÏ†ïÎ≥¥:\s*/g, "")
        .trim();

      // Ïä§Ìä∏Î¶¨Î∞ç ÏãúÎÆ¨Î†àÏù¥ÏÖò
      let displayedResponse = "";
      const chunks = cleanContent.match(/.{1,50}/g) || [cleanContent];

      for (const chunk of chunks) {
        displayedResponse += chunk;
        setCurrentStreamMessage(displayedResponse);
        await new Promise((resolve) => setTimeout(resolve, 50));
      }

      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content: cleanContent,
        },
      ]);

      setCurrentStreamMessage("");

      // üó∫Ô∏è Ïπ¥Ïπ¥Ïò§Îßµ ÏúÑÏπò ÏÑ§Ï†ï (Î∞±ÏóîÎìú locations ÏÇ¨Ïö©)
      if (data.locations && data.locations.length > 0) {
        console.log("üìç Ïπ¥Ïπ¥Ïò§Îßµ ÏúÑÏπò ÏÑ§Ï†ï:", data.locations.length, "Í∞ú");
        setTimeout(() => {
          setLocations(data.locations);
        }, 500);
      } else {
        setLocations([]);
      }

      // üéØ ÏÉàÎ°úÏö¥ Ïó¨Ìñâ Ï†ïÎ≥¥ Íµ¨Ï°∞ Ï≤òÎ¶¨
      setTravelInfo({
        requestType: data.requestType,
        festivals: data.festivals || [],
        travelCourse: data.travelCourse,
        mainSpot: data.travelCourse
          ? {
              name: data.travelCourse.courseTitle || "AI Ï∂îÏ≤ú Ïó¨Ìñâ",
              location: "ÏÇ¨Ïö©Ïûê ÏöîÏ≤≠ ÏßÄÏó≠",
              overview: "AIÍ∞Ä ÏÉùÏÑ±Ìïú ÎßûÏ∂§ Ïó¨Ìñâ Ï†ïÎ≥¥ÏûÖÎãàÎã§.",
            }
          : null,
        courses: data.locations || [],
        transportation: {
          nearestStation: "ÎåÄÏ§ëÍµêÌÜµ Ïù¥Ïö© Í∞ÄÎä•",
          recommendedMode: "AI ÏµúÏ†Å Í≤ΩÎ°ú Î∂ÑÏÑù ÏôÑÎ£å",
        },
      });

      console.log("‚úÖ ÏÉàÎ°úÏö¥ AI ÏãúÏä§ÌÖú ÏôÑÎ£å - ÌÉÄÏûÖ:", data.requestType);
    } catch (error) {
      console.error("‚ùå Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïò§Î•ò:", error);

      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content: `Ï£ÑÏÜ°Ìï©ÎãàÎã§. ${
            error.message || "ÏùëÎãµ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
          } Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.`,
        },
      ]);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // AI ÏùëÎãµ ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨ Ìï®Ïàò (ÎèôÏùºÌïú Ìè∞Ìä∏ Ïä§ÌÉÄÏùº)
  const formatAIResponse = (content) => {
    if (!content) return [];

    return content.split("\n").map((line, index) => {
      // Îπà Ï§Ñ Ï≤òÎ¶¨
      if (!line.trim()) {
        return <br key={index} />;
      }

      // Î™®Îì† ÌÖçÏä§Ìä∏Î•º ÎèôÏùºÌïú Ïä§ÌÉÄÏùºÎ°ú ÌëúÏãú
      return (
        <p
          key={index}
          style={{
            margin: "6px 0",
            lineHeight: "1.6",
            color: "#333",
            fontSize: "14px",
          }}
        >
          {line.replace(/\*\*/g, "")} {/* ** Ï†úÍ±∞ */}
        </p>
      );
    });
  };

  //DayÎ≥Ñ ÌÉÄÏûÑÎùºÏù∏ Î†åÎçîÎßÅ Ìï®Ïàò
  const renderDayTimeline = (day, dayLocations) => {
    return (
      <div key={`day-${day}`} style={{ marginBottom: "30px" }}>
        <h4
          style={{
            color: getDayColor(day),
            borderBottom: `2px solid ${getDayColor(day)}`,
            paddingBottom: "10px",
            marginBottom: "15px",
          }}
        >
          Day {day}
        </h4>
        {dayLocations.map((location, index) => (
          <div
            key={`${day}-${index}`}
            style={{
              display: "flex",
              alignItems: "center",
              marginBottom: "15px",
            }}
          >
            <div
              style={{
                background: getDayColor(day),
                color: "white",
                borderRadius: "50%",
                width: "24px",
                height: "24px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "12px",
                fontWeight: "bold",
                marginRight: "10px",
                flexShrink: 0,
              }}
            >
              {index + 1}
            </div>
            <div style={{ flex: 1 }}>
              <div style={{ fontSize: "14px", fontWeight: "bold" }}>
                {location.name}
              </div>
              {location.time && (
                <div
                  style={{ fontSize: "12px", color: "#666", marginTop: "2px" }}
                >
                  {location.time}
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    );
  };

  return (
    <>
      <AItitle currentPage="AI Ïó¨ÌñâÏΩîÏä§ Ï∂îÏ≤ú" showLocation={true} />
      <div className="ai-chatbot-container">
        <div className="ai-chatbot-chat-map-container">
          <div className="ai-chatbot-chat-section">
            <div className="ai-chatbot-chat-messages" ref={chatContainerRef}>
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`ai-chatbot-message ${
                    message.role === "user" ? "user" : "assistant"
                  }`}
                >
                  <div className="ai-chatbot-message-content">
                    {message.role === "assistant"
                      ? formatAIResponse(message.content)
                      : message.content
                          .split("\n")
                          .map((line, i) => <p key={i}>{line}</p>)}
                  </div>
                </div>
              ))}
              {currentStreamMessage && (
                <div className="ai-chatbot-message assistant">
                  <div className="ai-chatbot-message-content">
                    {formatAIResponse(currentStreamMessage)}
                  </div>
                </div>
              )}
              {loading && !currentStreamMessage && (
                <div className="ai-chatbot-message assistant">
                  <div className="ai-chatbot-message-content loading">
                    Ïó¨Ìñâ Í≥ÑÌöçÏùÑ ÏÉùÏÑ±ÌïòÎäîÏ§ë...
                  </div>
                </div>
              )}
            </div>

            <div className="ai-chatbot-chat-input">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Ïó¨Ìñâ Í≥ÑÌöçÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî..."
                disabled={loading}
              />
              <button onClick={handleSendMessage} disabled={loading}>
                Ï†ÑÏÜ°
              </button>
            </div>
          </div>

          <div className="ai-chatbot-map-section">
            <div
              id="kakao-map"
              className="ai-chatbot-kakao-map"
              style={{
                width: "100%",
                height: "100%",
                borderRadius: "8px",
              }}
            />
          </div>
        </div>

        {/* üéØ ÏÉàÎ°úÏö¥ Ïó¨Ìñâ Ï†ïÎ≥¥ ÏöîÏïΩ ÏÑπÏÖò - requestTypeÏóê Îî∞Î•∏ Ï°∞Í±¥Î∂Ä ÌëúÏãú */}
        {!loading &&
          !currentStreamMessage &&
          travelInfo.requestType &&
          travelInfo.requestType !== "general_chat" && (
            <div className="ai-chatbot-travel-summary">
              <div className="ai-chatbot-travel-info-grid">
                {/* üé™ Ï∂ïÏ†ú Ï†ïÎ≥¥ ÏÑπÏÖò - festival_only ÎòêÎäî festival_with_travelÏùº ÎïåÎßå ÌëúÏãú */}
                {(travelInfo.requestType === "festival_only" ||
                  travelInfo.requestType === "festival_with_travel") &&
                  travelInfo.festivals &&
                  travelInfo.festivals.length > 0 && (
                    <div className="ai-chatbot-festival-info">
                      <h3>üé™ Ï∂ïÏ†ú Ï†ïÎ≥¥</h3>
                      {travelInfo.festivals.map((festival, index) => (
                        <div
                          key={index}
                          className="ai-chatbot-festival-card"
                          style={{ marginBottom: "20px" }}
                        >
                          {festival.image && (
                            <div className="ai-chatbot-festival-image-container">
                              <img
                                src={festival.image}
                                alt={festival.name}
                                style={{
                                  width: "100%",
                                  height: "200px",
                                  objectFit: "cover",
                                  borderRadius: "8px 8px 0 0",
                                }}
                                onError={(e) => {
                                  e.target.parentElement.style.display = "none";
                                }}
                              />
                            </div>
                          )}
                          <div style={{ padding: "20px" }}>
                            <h4
                              style={{
                                margin: "0 0 10px 0",
                                fontSize: "18px",
                                color: "#1e40af",
                              }}
                            >
                              {festival.name}
                            </h4>
                            <p style={{ margin: "5px 0", color: "#64748b" }}>
                              <strong style={{ color: "#374151" }}>
                                üìÖ Í∏∞Í∞Ñ:
                              </strong>{" "}
                              {festival.period}
                            </p>
                            <p style={{ margin: "5px 0", color: "#64748b" }}>
                              <strong style={{ color: "#374151" }}>
                                üìç Ïû•ÏÜå:
                              </strong>{" "}
                              {festival.location}
                            </p>
                            {festival.tel && festival.tel !== "Ï†ïÎ≥¥ ÏóÜÏùå" && (
                              <p style={{ margin: "5px 0", color: "#64748b" }}>
                                <strong style={{ color: "#374151" }}>
                                  üìû Ïó∞ÎùΩÏ≤ò:
                                </strong>{" "}
                                {festival.tel}
                              </p>
                            )}
                            {festival.description && (
                              <p
                                style={{
                                  margin: "10px 0 0 0",
                                  lineHeight: "1.6",
                                  color: "#4b5563",
                                  fontSize: "14px",
                                }}
                              >
                                {festival.description}
                              </p>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                {/* üó∫Ô∏è Ï∂îÏ≤ú ÏΩîÏä§ Ï†ïÎ≥¥ - festival_with_travel ÎòêÎäî travel_onlyÏùº ÎïåÎßå ÌëúÏãú */}
                {(travelInfo.requestType === "festival_with_travel" ||
                  travelInfo.requestType === "travel_only") &&
                  travelInfo.travelCourse && (
                    <div className="ai-chatbot-course-info">
                      <h3>üó∫Ô∏è Ï∂îÏ≤ú ÏΩîÏä§</h3>
                      <div className="ai-chatbot-course-content">
                        <h4 style={{ color: "#1e40af", marginBottom: "15px" }}>
                          {travelInfo.travelCourse.courseTitle}
                        </h4>
                        <p style={{ color: "#64748b", marginBottom: "20px" }}>
                          Ï¥ù {travelInfo.travelCourse.totalDays}Ïùº ÏΩîÏä§
                        </p>

                        {travelInfo.travelCourse.dailySchedule.map(
                          (daySchedule) => (
                            <div
                              key={daySchedule.day}
                              style={{ marginBottom: "25px" }}
                            >
                              <h5
                                style={{
                                  color: getDayColor(daySchedule.day),
                                  fontWeight: "bold",
                                  fontSize: "16px",
                                  marginBottom: "10px",
                                  borderBottom: `2px solid ${getDayColor(
                                    daySchedule.day
                                  )}`,
                                  paddingBottom: "5px",
                                }}
                              >
                                Day {daySchedule.day} - {daySchedule.theme}
                              </h5>

                              <ul
                                style={{ marginLeft: "0", paddingLeft: "16px" }}
                              >
                                {daySchedule.places.map((place, index) => (
                                  <li
                                    key={index}
                                    style={{ marginBottom: "10px" }}
                                  >
                                    <span
                                      style={{
                                        color: getDayColor(daySchedule.day),
                                        fontWeight: "bold",
                                      }}
                                    >
                                      {index + 1}.
                                    </span>{" "}
                                    <strong style={{ color: "#374151" }}>
                                      {place.visitTime}
                                    </strong>{" "}
                                    - {place.name}
                                    {place.description &&
                                      place.description !== place.visitTime && (
                                        <p
                                          style={{
                                            marginLeft: "20px",
                                            fontSize: "12px",
                                            color: "#64748b",
                                            marginTop: "2px",
                                          }}
                                        >
                                          {place.description}
                                        </p>
                                      )}
                                  </li>
                                ))}
                              </ul>
                            </div>
                          )
                        )}
                      </div>
                    </div>
                  )}

                {/* üöó ÍµêÌÜµ ÏïàÎÇ¥ - Ïó¨ÌñâÏΩîÏä§Í∞Ä ÏûàÏùÑ ÎïåÎßå ÌëúÏãú */}
                {travelInfo.travelCourse && travelInfo.transportation && (
                  <div className="ai-chatbot-transportation-info">
                    <h3>üöó ÍµêÌÜµ ÏïàÎÇ¥</h3>
                    {travelInfo.transportation.nearestStation && (
                      <p>
                        <strong>Í∞ÄÏû• Í∞ÄÍπåÏö¥ Ïó≠:</strong>{" "}
                        {travelInfo.transportation.nearestStation}
                      </p>
                    )}
                    {travelInfo.transportation.recommendedMode && (
                      <p>
                        <strong>Ï∂îÏ≤ú Ïù¥ÎèôÏàòÎã®:</strong>{" "}
                        {travelInfo.transportation.recommendedMode}
                      </p>
                    )}
                  </div>
                )}
              </div>

              {/* Ï†ÄÏû•/Í≥µÏú† Î≤ÑÌäº */}
              <div className="ai-chatbot-button-group">
                <button
                  className="ai-chatbot-action-btn"
                  onClick={() => {
                    alert("Ïó¨Ìñâ Í≥ÑÌöçÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!");
                  }}
                >
                  Ï†ÄÏû•ÌïòÍ∏∞
                </button>
                <button
                  className="ai-chatbot-action-btn"
                  onClick={() => {
                    navigator.clipboard.writeText(
                      messages[messages.length - 1]?.content || ""
                    );
                    alert("Ïó¨Ìñâ Í≥ÑÌöçÏù¥ ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!");
                  }}
                >
                  Í≥µÏú†ÌïòÍ∏∞
                </button>
              </div>
            </div>
          )}
      </div>
    </>
  );
};

export default AIChatbot;
